/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Language;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Components.ErrorL;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Language/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  8, 10, 10,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  6,  0, 48,  0,  0, 11, 45, 46, 13, 44, 47, 43,  5, 12, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0, 41,  0,  0,  0, 
     0,  2, 38, 37,  2,  2, 40,  2,  2,  2,  2,  2,  2,  2, 36,  2, 
     2,  2,  2,  2,  2,  2, 39,  2,  2,  2,  2,  0,  7,  0,  0,  3, 
     0, 23,  2, 19, 14, 15, 29, 31, 34, 24, 35,  2, 17, 26, 20, 18, 
    25, 33, 22, 27, 21, 30, 28,  2,  2, 32,  2, 49,  0, 50,  0,  0, 
     0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\2\3\1\10\10\3\1\11\6\3\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\2\0\1\17\3\0"+
    "\1\20\1\0\1\2\1\0\4\3\1\0\2\3\1\21"+
    "\13\3\1\22\10\3\1\0\1\23\1\4\1\20\3\0"+
    "\2\3\1\0\2\3\1\0\21\3\1\24\11\3\1\0"+
    "\1\2\1\0\2\3\1\0\2\3\1\25\1\0\1\26"+
    "\10\3\1\27\6\3\1\0\11\3\1\0\2\3\1\0"+
    "\2\3\3\0\15\3\1\30\4\0\1\3\1\31\1\32"+
    "\5\3\1\33\1\0\2\3\1\0\2\3\3\0\1\34"+
    "\2\3\1\35\1\36\2\3\1\0\1\3\1\0\1\37"+
    "\1\40\1\0\1\3\4\0\1\41\1\0\1\3\1\42"+
    "\1\43\3\3\1\0\1\44\1\3\1\0\2\3\3\0"+
    "\1\3\1\45\2\3\1\46\1\3\4\0\1\3\5\0"+
    "\1\47\3\3\1\0\1\3\1\0\1\50\1\51\3\0"+
    "\1\52\1\53\1\54\1\55\4\0\1\56\1\57\4\0"+
    "\1\60\1\61\1\3\1\0\1\3\3\0\1\62\2\0"+
    "\1\63\1\0\1\64\2\0\1\65\1\0\1\66\10\0"+
    "\1\67\7\0\1\70\3\0\1\71\1\0\1\72\5\0"+
    "\1\73\7\0\1\74\1\75\1\76\2\0\1\77\1\100"+
    "\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\63\0\u0132"+
    "\0\u0165\0\63\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\231\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\63\0\63\0\63"+
    "\0\63\0\63\0\u052e\0\377\0\63\0\u0561\0\u0594\0\u05c7"+
    "\0\u0594\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\231\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\231"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u04fb\0\63\0\u052e\0\63\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\63\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\63\0\u1452\0\231\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\231\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u1d7c\0\231\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\231\0\231\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\231"+
    "\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112"+
    "\0\u2145\0\231\0\u2178\0\u21ab\0\231\0\231\0\u21de\0\u2211"+
    "\0\u2244\0\u2277\0\u22aa\0\231\0\231\0\u22dd\0\u2310\0\u2343"+
    "\0\u2376\0\u23a9\0\u23dc\0\63\0\u240f\0\u2442\0\231\0\231"+
    "\0\u2475\0\u24a8\0\u24db\0\u250e\0\231\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\231\0\u26d9\0\u270c"+
    "\0\63\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\u290a\0\u293d\0\231\0\u2970\0\u29a3\0\u29d6"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\231\0\231\0\u2aa2\0\u2ad5\0\u2b08"+
    "\0\231\0\231\0\u2b3b\0\231\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07"+
    "\0\231\0\63\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\231\0\231"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\63\0\u2e38"+
    "\0\u2e6b\0\63\0\u2e9e\0\63\0\u2ed1\0\u2f04\0\63\0\u2f37"+
    "\0\231\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c"+
    "\0\u30cf\0\63\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201"+
    "\0\u3234\0\63\0\u3267\0\u329a\0\u32cd\0\63\0\u3300\0\63"+
    "\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff\0\63\0\u3432\0\u3465"+
    "\0\u3498\0\u34cb\0\u34fe\0\u3531\0\u3564\0\63\0\63\0\63"+
    "\0\u3597\0\u35ca\0\63\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\2"+
    "\1\7\1\3\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\3\1\4\1\15\1\16\1\17\1\4\1\20\1\4"+
    "\1\21\1\22\1\23\1\24\1\4\1\25\2\4\1\26"+
    "\1\4\1\27\1\4\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\2\1\36\1\37\1\40\1\41\1\42\3\2"+
    "\64\0\1\3\7\0\1\3\6\0\1\3\44\0\3\4"+
    "\11\0\2\4\1\0\30\4\16\0\1\5\1\43\55\0"+
    "\6\44\1\45\1\46\53\44\6\47\1\0\1\50\3\47"+
    "\1\51\44\47\1\52\2\47\14\0\1\53\1\54\47\0"+
    "\3\4\11\0\1\4\1\55\1\0\7\4\1\56\20\4"+
    "\14\0\3\4\11\0\2\4\1\0\3\4\1\57\16\4"+
    "\1\60\5\4\14\0\3\4\11\0\2\4\1\61\30\4"+
    "\14\0\3\4\11\0\2\4\1\0\1\4\1\62\13\4"+
    "\1\63\12\4\14\0\3\4\11\0\2\4\1\0\1\4"+
    "\1\64\26\4\14\0\3\4\11\0\1\4\1\65\1\0"+
    "\30\4\14\0\3\4\11\0\2\4\1\0\3\4\1\66"+
    "\5\4\1\67\4\4\1\70\11\4\14\0\3\4\11\0"+
    "\2\4\1\0\1\4\1\71\4\4\1\72\21\4\14\0"+
    "\3\4\11\0\1\4\1\73\1\0\1\4\1\74\4\4"+
    "\1\75\1\76\20\4\14\0\3\4\11\0\1\4\1\77"+
    "\1\0\7\4\1\100\20\4\14\0\3\4\11\0\2\4"+
    "\1\0\7\4\1\101\5\4\1\102\12\4\14\0\3\4"+
    "\11\0\2\4\1\0\6\4\1\103\21\4\14\0\3\4"+
    "\11\0\2\4\1\0\15\4\1\104\12\4\14\0\3\4"+
    "\11\0\2\4\1\0\6\4\1\105\21\4\14\0\3\4"+
    "\11\0\2\4\1\0\1\4\1\106\26\4\14\0\3\4"+
    "\11\0\1\4\1\107\1\0\30\4\14\0\3\4\11\0"+
    "\2\4\1\0\6\4\1\110\21\4\13\0\1\111\6\0"+
    "\3\111\5\0\1\111\31\0\1\111\1\112\13\0\1\113"+
    "\56\0\10\44\3\0\50\44\13\0\1\114\47\0\10\47"+
    "\3\0\50\47\13\0\1\114\45\0\1\115\1\0\10\53"+
    "\2\0\51\53\15\54\1\116\45\54\2\0\3\4\11\0"+
    "\2\4\1\117\4\4\1\120\23\4\14\0\3\4\11\0"+
    "\2\4\1\0\14\4\1\121\13\4\14\0\3\4\11\0"+
    "\2\4\1\122\4\4\1\123\23\4\14\0\3\4\11\0"+
    "\1\4\1\124\1\0\30\4\45\0\1\125\31\0\3\4"+
    "\11\0\2\4\1\0\3\4\1\126\5\4\1\127\16\4"+
    "\14\0\3\4\11\0\2\4\1\0\6\4\1\130\21\4"+
    "\14\0\3\4\11\0\2\4\1\0\4\4\1\131\3\4"+
    "\1\132\17\4\14\0\3\4\11\0\2\4\1\0\7\4"+
    "\1\133\6\4\1\134\11\4\14\0\3\4\11\0\2\4"+
    "\1\0\10\4\1\135\17\4\14\0\3\4\11\0\2\4"+
    "\1\0\15\4\1\136\12\4\14\0\3\4\11\0\2\4"+
    "\1\0\4\4\1\137\23\4\14\0\3\4\11\0\2\4"+
    "\1\0\5\4\1\140\22\4\14\0\3\4\11\0\2\4"+
    "\1\0\3\4\1\141\1\142\23\4\14\0\3\4\11\0"+
    "\1\143\1\4\1\0\30\4\14\0\3\4\11\0\2\4"+
    "\1\0\17\4\1\144\10\4\14\0\3\4\11\0\1\4"+
    "\1\145\1\0\30\4\14\0\3\4\11\0\2\4\1\0"+
    "\16\4\1\146\11\4\14\0\3\4\11\0\2\4\1\0"+
    "\3\4\1\147\24\4\14\0\3\4\11\0\2\4\1\0"+
    "\3\4\1\150\24\4\14\0\3\4\11\0\2\4\1\0"+
    "\2\4\1\151\7\4\1\152\15\4\14\0\3\4\11\0"+
    "\2\4\1\0\11\4\1\153\16\4\14\0\3\4\11\0"+
    "\1\154\1\4\1\0\5\4\1\155\22\4\14\0\3\4"+
    "\11\0\2\4\1\0\1\4\1\156\26\4\14\0\3\4"+
    "\11\0\2\4\1\0\5\4\1\157\22\4\14\0\3\4"+
    "\11\0\2\4\1\0\1\160\27\4\16\0\1\161\56\0"+
    "\14\54\1\162\1\116\45\54\21\0\1\163\43\0\3\4"+
    "\11\0\1\4\1\164\1\0\30\4\14\0\3\4\11\0"+
    "\1\4\1\165\1\0\30\4\35\0\1\166\41\0\3\4"+
    "\11\0\2\4\1\0\1\4\1\167\26\4\14\0\3\4"+
    "\11\0\2\4\1\0\2\4\1\170\25\4\42\0\1\171"+
    "\34\0\3\4\11\0\2\4\1\172\30\4\14\0\3\4"+
    "\11\0\2\4\1\0\1\4\1\173\26\4\14\0\3\4"+
    "\11\0\2\4\1\0\3\4\1\174\24\4\14\0\3\4"+
    "\11\0\2\4\1\0\1\4\1\175\26\4\14\0\3\4"+
    "\11\0\1\4\1\176\1\0\30\4\14\0\3\4\11\0"+
    "\2\4\1\0\2\4\1\177\25\4\14\0\3\4\11\0"+
    "\2\4\1\0\5\4\1\200\22\4\14\0\3\4\11\0"+
    "\2\4\1\0\5\4\1\201\22\4\14\0\3\4\11\0"+
    "\2\4\1\0\6\4\1\202\21\4\14\0\3\4\11\0"+
    "\1\4\1\203\1\0\30\4\14\0\3\4\11\0\2\4"+
    "\1\0\6\4\1\204\21\4\14\0\3\4\11\0\2\4"+
    "\1\0\1\4\1\205\26\4\14\0\3\4\11\0\2\4"+
    "\1\0\1\4\1\206\26\4\14\0\3\4\11\0\2\4"+
    "\1\0\15\4\1\207\12\4\14\0\3\4\11\0\2\4"+
    "\1\0\1\4\1\210\26\4\14\0\3\4\11\0\2\4"+
    "\1\0\3\4\1\211\24\4\14\0\3\4\11\0\2\4"+
    "\1\0\15\4\1\212\12\4\14\0\3\4\11\0\2\4"+
    "\1\213\30\4\14\0\3\4\11\0\2\4\1\0\2\4"+
    "\1\214\25\4\14\0\3\4\11\0\1\4\1\215\1\0"+
    "\30\4\14\0\3\4\11\0\2\4\1\0\4\4\1\216"+
    "\23\4\14\0\3\4\11\0\1\4\1\217\1\0\30\4"+
    "\14\0\3\4\11\0\1\4\1\220\1\0\30\4\14\0"+
    "\3\4\11\0\2\4\1\0\6\4\1\221\21\4\14\0"+
    "\3\4\11\0\2\4\1\0\1\222\27\4\14\0\3\4"+
    "\11\0\1\223\1\4\1\0\30\4\14\0\3\4\11\0"+
    "\2\4\1\0\12\4\1\224\15\4\16\0\1\161\55\0"+
    "\1\47\22\0\1\225\42\0\3\4\11\0\2\4\1\0"+
    "\3\4\1\226\24\4\14\0\3\4\11\0\2\4\1\0"+
    "\5\4\1\227\22\4\41\0\1\230\35\0\3\4\11\0"+
    "\2\4\1\0\3\4\1\231\24\4\14\0\3\4\11\0"+
    "\2\4\1\0\15\4\1\232\12\4\42\0\1\233\1\234"+
    "\2\0\1\235\30\0\3\4\11\0\1\236\1\4\1\0"+
    "\30\4\14\0\3\4\11\0\2\4\1\0\5\4\1\237"+
    "\22\4\14\0\3\4\11\0\2\4\1\0\4\4\1\240"+
    "\23\4\14\0\3\4\11\0\2\4\1\0\7\4\1\241"+
    "\20\4\14\0\3\4\11\0\1\4\1\242\1\0\30\4"+
    "\14\0\3\4\11\0\2\4\1\0\7\4\1\243\20\4"+
    "\14\0\3\4\11\0\2\4\1\0\1\244\27\4\14\0"+
    "\3\4\11\0\2\4\1\0\3\4\1\245\24\4\14\0"+
    "\3\4\11\0\2\4\1\0\5\4\1\246\22\4\14\0"+
    "\3\4\11\0\1\247\1\4\1\0\30\4\14\0\3\4"+
    "\11\0\2\4\1\0\1\250\27\4\14\0\3\4\11\0"+
    "\2\4\1\0\5\4\1\251\22\4\14\0\3\4\11\0"+
    "\2\4\1\0\4\4\1\252\23\4\14\0\3\4\11\0"+
    "\2\4\1\0\3\4\1\253\24\4\43\0\1\254\1\255"+
    "\1\256\1\0\1\257\27\0\3\4\11\0\2\4\1\0"+
    "\7\4\1\260\20\4\14\0\3\4\11\0\2\4\1\0"+
    "\5\4\1\261\22\4\14\0\3\4\11\0\2\4\1\0"+
    "\6\4\1\262\21\4\14\0\3\4\11\0\2\4\1\0"+
    "\5\4\1\263\22\4\14\0\3\4\11\0\2\4\1\0"+
    "\3\4\1\264\24\4\14\0\3\4\11\0\2\4\1\0"+
    "\2\4\1\265\25\4\14\0\3\4\11\0\1\4\1\266"+
    "\1\0\30\4\14\0\3\4\11\0\2\4\1\0\6\4"+
    "\1\267\21\4\14\0\3\4\11\0\2\4\1\0\1\4"+
    "\1\270\26\4\32\0\1\271\44\0\3\4\11\0\1\4"+
    "\1\272\1\0\30\4\14\0\3\4\11\0\1\4\1\273"+
    "\1\0\30\4\45\0\1\274\31\0\3\4\11\0\2\4"+
    "\1\0\2\4\1\275\25\4\14\0\3\4\11\0\2\4"+
    "\1\0\4\4\1\276\23\4\36\0\1\277\65\0\1\300"+
    "\62\0\1\301\35\0\3\4\11\0\2\4\1\0\1\4"+
    "\1\302\26\4\14\0\3\4\11\0\2\4\1\0\3\4"+
    "\1\303\24\4\14\0\3\4\11\0\2\4\1\0\7\4"+
    "\1\304\20\4\14\0\3\4\11\0\2\4\1\0\1\4"+
    "\1\305\4\4\1\306\21\4\14\0\3\4\11\0\2\4"+
    "\1\0\12\4\1\307\15\4\14\0\3\4\11\0\2\4"+
    "\1\0\11\4\1\310\16\4\14\0\3\4\11\0\2\4"+
    "\1\311\30\4\14\0\3\4\11\0\2\4\1\0\2\4"+
    "\1\312\25\4\14\0\3\4\11\0\2\4\1\313\30\4"+
    "\14\0\3\4\11\0\2\4\1\0\1\4\1\314\26\4"+
    "\14\0\3\4\11\0\2\4\1\0\1\4\1\315\26\4"+
    "\14\0\3\4\11\0\2\4\1\316\30\4\14\0\3\4"+
    "\11\0\2\4\1\0\5\4\1\317\22\4\41\0\1\320"+
    "\52\0\1\321\10\0\1\322\51\0\1\323\10\0\1\324"+
    "\70\0\1\325\26\0\3\4\11\0\2\4\1\0\1\4"+
    "\1\326\26\4\14\0\3\4\11\0\2\4\1\0\1\4"+
    "\1\327\26\4\14\0\3\4\11\0\2\4\1\0\6\4"+
    "\1\330\21\4\14\0\3\4\11\0\2\4\1\0\4\4"+
    "\1\331\23\4\14\0\3\4\11\0\2\4\1\0\6\4"+
    "\1\332\21\4\14\0\3\4\11\0\1\333\1\4\1\0"+
    "\30\4\35\0\1\334\41\0\3\4\11\0\2\4\1\0"+
    "\5\4\1\335\22\4\14\0\3\4\11\0\2\4\1\0"+
    "\3\4\1\336\24\4\34\0\1\337\42\0\3\4\11\0"+
    "\1\4\1\340\1\0\30\4\14\0\3\4\11\0\2\4"+
    "\1\0\6\4\1\341\21\4\35\0\1\342\65\0\1\343"+
    "\55\0\1\344\43\0\3\4\11\0\2\4\1\0\6\4"+
    "\1\345\21\4\14\0\3\4\11\0\2\4\1\0\5\4"+
    "\1\346\22\4\14\0\3\4\11\0\2\4\1\0\6\4"+
    "\1\347\21\4\14\0\3\4\11\0\2\4\1\0\7\4"+
    "\1\350\20\4\41\0\1\351\35\0\3\4\11\0\2\4"+
    "\1\0\7\4\1\352\20\4\42\0\1\353\10\0\1\354"+
    "\51\0\1\355\10\0\1\356\23\0\3\4\11\0\2\4"+
    "\1\0\6\4\1\357\21\4\40\0\1\360\61\0\1\361"+
    "\54\0\1\362\102\0\1\363\47\0\1\364\40\0\3\4"+
    "\11\0\2\4\1\0\3\4\1\365\24\4\14\0\3\4"+
    "\11\0\1\4\1\366\1\0\30\4\14\0\3\4\11\0"+
    "\2\4\1\0\3\4\1\367\24\4\14\0\3\4\11\0"+
    "\1\4\1\370\1\0\30\4\34\0\1\371\42\0\3\4"+
    "\11\0\2\4\1\0\4\4\1\372\23\4\32\0\1\373"+
    "\44\0\3\4\11\0\2\4\1\0\12\4\1\374\15\4"+
    "\14\0\3\4\11\0\2\4\1\0\5\4\1\375\22\4"+
    "\40\0\1\376\63\0\1\377\55\0\1\u0100\42\0\3\4"+
    "\11\0\2\4\1\0\5\4\1\u0101\22\4\14\0\3\4"+
    "\11\0\2\4\1\0\5\4\1\u0102\22\4\14\0\3\4"+
    "\11\0\2\4\1\0\5\4\1\u0103\22\4\14\0\3\4"+
    "\11\0\2\4\1\0\6\4\1\u0104\21\4\51\0\1\u0105"+
    "\61\0\1\u0106\63\0\1\u0107\61\0\1\u0108\26\0\3\4"+
    "\11\0\2\4\1\0\12\4\1\u0109\15\4\41\0\1\u010a"+
    "\55\0\1\u010b\64\0\1\u010c\74\0\1\u010d\47\0\1\u010e"+
    "\41\0\3\4\11\0\2\4\1\0\5\4\1\u010f\22\4"+
    "\14\0\3\4\11\0\2\4\1\0\1\4\1\u0110\26\4"+
    "\14\0\3\4\11\0\2\4\1\0\5\4\1\u0111\22\4"+
    "\36\0\1\u0112\40\0\3\4\11\0\1\4\1\u0113\1\0"+
    "\30\4\30\0\1\u0114\63\0\1\u0115\75\0\1\u0116\56\0"+
    "\1\u0117\36\0\3\4\11\0\2\4\1\u0118\30\4\50\0"+
    "\1\u0119\43\0\1\u011a\101\0\1\u011b\43\0\1\u011c\61\0"+
    "\1\u011d\71\0\1\u011e\61\0\1\u011f\66\0\1\u0120\34\0"+
    "\3\4\11\0\2\4\1\0\1\4\1\u0121\26\4\37\0"+
    "\1\u0122\37\0\3\4\11\0\2\4\1\u0123\30\4\31\0"+
    "\1\u0124\75\0\1\u0125\47\0\1\u0126\67\0\1\u0127\65\0"+
    "\1\u0128\62\0\1\u0129\55\0\1\u012a\66\0\1\u012b\56\0"+
    "\1\u012c\66\0\1\u012d\52\0\1\u012e\64\0\1\u012f\61\0"+
    "\1\u0130\70\0\1\u0131\56\0\1\u0132\62\0\1\u0133\62\0"+
    "\1\u0134\70\0\1\u0135\57\0\1\u0136\65\0\1\u0137\52\0"+
    "\1\u0138\76\0\1\u0139\53\0\1\u013a\64\0\1\u013b\54\0"+
    "\1\u013c\62\0\1\u013d\75\0\1\u013e\55\0\1\u013f\53\0"+
    "\1\u0140\70\0\1\u0141\57\0\1\u0142\101\0\1\u0143\62\0"+
    "\1\u0144\51\0\1\u0145\60\0\1\u0146\56\0\1\u0147\73\0"+
    "\1\u0148\65\0\1\u0149\62\0\1\u014a\46\0\1\u014b\57\0"+
    "\1\u014c\62\0\1\u014d\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13821];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\23\1\5\11"+
    "\2\0\1\11\3\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\27\1\1\0\1\11\1\1\1\11\3\0\2\1"+
    "\1\0\2\1\1\0\33\1\1\0\1\11\1\0\2\1"+
    "\1\0\2\1\1\11\1\0\20\1\1\0\11\1\1\0"+
    "\2\1\1\0\2\1\3\0\16\1\4\0\11\1\1\0"+
    "\2\1\1\0\2\1\3\0\7\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\4\0\1\11\1\0\6\1\1\0"+
    "\2\1\1\0\2\1\3\0\4\1\1\11\1\1\4\0"+
    "\1\1\5\0\4\1\1\0\1\1\1\0\2\1\3\0"+
    "\4\1\4\0\1\1\1\11\4\0\3\1\1\0\1\1"+
    "\3\0\1\11\2\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\1\10\0\1\11\7\0\1\11\3\0\1\11"+
    "\1\0\1\11\5\0\1\11\7\0\3\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    ArrayList<ErrorL> errors = new ArrayList<>();
    public ArrayList<ErrorL> getErrors() {
        return errors;
    }
    void addError(int line,int column,String character) {
        errors.add(new ErrorL(line,column,character));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yyline,yychar,yytext());
            } 
            // fall through
          case 66: break;
          case 2: 
            { 
            } 
            // fall through
          case 67: break;
          case 3: 
            { return new Symbol(Sym.TK_id,         yyline, yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 4: 
            { return new Symbol(Sym.TK_num,        yyline, yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 5: 
            { yychar = 1;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return new Symbol(Sym.TK_div,        yyline, yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 7: 
            { return new Symbol(Sym.TK_mult,       yyline, yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 8: 
            { return new Symbol(Sym.RW_or,         yyline, yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 9: 
            { return new Symbol(Sym.RW_and,        yyline, yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 10: 
            { return new Symbol(Sym.TK_minus,      yyline, yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 11: 
            { return new Symbol(Sym.TK_plus,       yyline, yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 12: 
            { return new Symbol(Sym.TK_lpar,       yyline, yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 13: 
            { return new Symbol(Sym.TK_rpar,       yyline, yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 14: 
            { return new Symbol(Sym.TK_comma,      yyline, yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 15: 
            { return new Symbol(Sym.TK_str,        yyline, yychar, yytext().substring(1, yytext().toString().length() - 1));
            } 
            // fall through
          case 80: break;
          case 16: 
            { return new Symbol(Sym.TK_char,       yyline, yychar, yytext().substring(1, yytext().toString().length() - 1));
            } 
            // fall through
          case 81: break;
          case 17: 
            { return new Symbol(Sym.RW_not,        yyline, yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 18: 
            { return new Symbol(Sym.RW_if,         yyline, yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 19: 
            { return new Symbol(Sym.TK_prompt,     yyline, yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 20: 
            { return new Symbol(Sym.RW_end,        yyline, yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 21: 
            { return new Symbol(Sym.RW_elseif,     yyline, yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 22: 
            { return new Symbol(Sym.RW_as,         yyline, yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 23: 
            { return new Symbol(Sym.RW_for,        yyline, yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 24: 
            { return new Symbol(Sym.RW_switch,     yyline, yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 25: 
            { return new Symbol(Sym.RW_do,         yyline, yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 26: 
            { return new Symbol(Sym.RW_to,         yyline, yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 27: 
            { return new Symbol(Sym.RW_false,      yyline, yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 28: 
            { return new Symbol(Sym.RW_until,      yyline, yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 29: 
            { return new Symbol(Sym.RW_begin,      yyline, yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 30: 
            { return new Symbol(Sym.RW_start,      yyline, yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 31: 
            { return new Symbol(Sym.RW_meth,       yyline, yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 32: 
            { return new Symbol(Sym.RW_mod,        yyline, yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 33: 
            { return new Symbol(Sym.RW_endif,      yyline, yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 34: 
            { return new Symbol(Sym.RW_num,        yyline, yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 35: 
            { return new Symbol(Sym.RW_str,        yyline, yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 36: 
            { return new Symbol(Sym.RW_break,      yyline, yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 37: 
            { return new Symbol(Sym.RW_repeat,     yyline, yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 38: 
            { return new Symbol(Sym.RW_equequ,     yyline, yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 39: 
            { return new Symbol(Sym.RW_func,       yyline, yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 40: 
            { return new Symbol(Sym.RW_then,       yyline, yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 41: 
            { return new Symbol(Sym.RW_exec,       yyline, yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 42: 
            { return new Symbol(Sym.RW_return,     yyline, yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 43: 
            { return new Symbol(Sym.RW_insert,     yyline, yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 44: 
            { return new Symbol(Sym.RW_print,      yyline, yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 45: 
            { return new Symbol(Sym.RW_pow,        yyline, yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 46: 
            { return new Symbol(Sym.RW_while,      yyline, yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 47: 
            { return new Symbol(Sym.RW_endfor,     yyline, yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 48: 
            { return new Symbol(Sym.RW_char,       yyline, yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 49: 
            { return new Symbol(Sym.RW_bool,       yyline, yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 50: 
            { return new Symbol(Sym.RW_equ,        yyline, yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 51: 
            { return new Symbol(Sym.RW_less,       yyline, yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 52: 
            { return new Symbol(Sym.RW_more,       yyline, yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 53: 
            { return new Symbol(Sym.RW_endswitch,  yyline, yychar, yytext());
            } 
            // fall through
          case 118: break;
          case 54: 
            { return new Symbol(Sym.RW_true,       yyline, yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 55: 
            { return new Symbol(Sym.RW_endmeth,    yyline, yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 56: 
            { return new Symbol(Sym.RW_println,    yyline, yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 57: 
            { return new Symbol(Sym.RW_endfunc,    yyline, yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 58: 
            { return new Symbol(Sym.RW_notequ,     yyline, yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 59: 
            { return new Symbol(Sym.RW_endwhile,   yyline, yychar, yytext());
            } 
            // fall through
          case 124: break;
          case 60: 
            { return new Symbol(Sym.RW_case,       yyline, yychar, yytext());
            } 
            // fall through
          case 125: break;
          case 61: 
            { return new Symbol(Sym.RW_incr,       yyline, yychar, yytext());
            } 
            // fall through
          case 126: break;
          case 62: 
            { return new Symbol(Sym.RW_params,     yyline, yychar, yytext());
            } 
            // fall through
          case 127: break;
          case 63: 
            { return new Symbol(Sym.RW_else,       yyline, yychar, yytext());
            } 
            // fall through
          case 128: break;
          case 64: 
            { return new Symbol(Sym.RW_lessequ,    yyline, yychar, yytext());
            } 
            // fall through
          case 129: break;
          case 65: 
            { return new Symbol(Sym.RW_moreequ,    yyline, yychar, yytext());
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
