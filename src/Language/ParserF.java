
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\063\002\000\002\040\005\000\002\041\004" +
    "\000\002\041\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\003\004\000\002" +
    "\003\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\064\002\000" +
    "\002\004\005\000\002\004\003\000\002\065\002\000\002" +
    "\005\005\000\002\066\002\000\002\067\002\000\002\070" +
    "\002\000\002\006\013\000\002\071\002\000\002\011\006" +
    "\000\002\007\005\000\002\007\003\000\002\024\006\000" +
    "\002\024\006\000\002\024\006\000\002\025\007\000\002" +
    "\025\006\000\002\025\007\000\002\025\006\000\002\025" +
    "\007\000\002\025\006\000\002\016\004\000\002\016\003" +
    "\000\002\026\005\000\002\026\004\000\002\027\005\000" +
    "\002\027\004\000\002\072\002\000\002\060\006\000\002" +
    "\030\004\000\002\030\003\000\002\030\003\000\002\031" +
    "\004\000\002\031\003\000\002\032\006\000\002\032\005" +
    "\000\002\033\005\000\002\033\004\000\002\073\002\000" +
    "\002\074\002\000\002\034\014\000\002\075\002\000\002" +
    "\034\011\000\002\076\002\000\002\077\002\000\002\034" +
    "\010\000\002\100\002\000\002\034\006\000\002\017\004" +
    "\000\002\017\003\000\002\020\004\000\002\020\003\000" +
    "\002\101\002\000\002\023\005\000\002\023\003\000\002" +
    "\102\002\000\002\035\012\000\002\035\005\000\002\103" +
    "\002\000\002\035\011\000\002\035\004\000\002\104\002" +
    "\000\002\055\005\000\002\105\002\000\002\056\005\000" +
    "\002\021\004\000\002\021\003\000\002\022\004\000\002" +
    "\022\003\000\002\106\002\000\002\036\007\000\002\107" +
    "\002\000\002\036\005\000\002\014\006\000\002\014\005" +
    "\000\002\110\002\000\002\057\005\000\002\015\005\000" +
    "\002\015\003\000\002\111\002\000\002\037\005\000\002" +
    "\112\002\000\002\037\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\004\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\113\002\000\002\045\006\000\002\114\002\000" +
    "\002\045\006\000\002\115\002\000\002\045\005\000\002" +
    "\046\003\000\002\047\003\000\002\051\003\000\002\050" +
    "\003\000\002\052\003\000\002\053\003\000\002\054\003" +
    "\000\002\061\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\037\004\001\002\000\010\034\ufffe\035" +
    "\ufffe\077\ufffe\001\002\000\016\003\022\025\020\040\011" +
    "\041\014\053\021\054\012\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\012\056\224\057\222" +
    "\060\223\061\225\001\002\000\004\002\uffff\001\002\000" +
    "\010\034\uffae\035\uffae\077\uffae\001\002\000\016\003\ufffb" +
    "\025\ufffb\040\ufffb\041\ufffb\053\ufffb\054\ufffb\001\002\000" +
    "\010\034\uffe7\035\uffe7\077\uffe7\001\002\000\044\003\160" +
    "\006\155\013\165\017\162\024\166\026\135\034\030\035" +
    "\033\041\014\044\156\045\154\047\150\050\151\051\137" +
    "\052\147\055\036\077\032\001\002\000\016\003\ufffa\025" +
    "\ufffa\040\ufffa\041\ufffa\053\ufffa\054\ufffa\001\002\000\016" +
    "\003\ufff9\025\ufff9\040\ufff9\041\ufff9\053\ufff9\054\ufff9\001" +
    "\002\000\004\055\uffe9\001\002\000\010\034\uffac\035\uffac" +
    "\077\uffac\001\002\000\016\003\ufff7\025\ufff7\040\ufff7\041" +
    "\ufff7\053\ufff7\054\ufff7\001\002\000\016\003\022\025\020" +
    "\040\025\041\014\053\021\054\012\001\002\000\016\003" +
    "\ufff8\025\ufff8\040\ufff8\041\ufff8\053\ufff8\054\ufff8\001\002" +
    "\000\004\002\000\001\002\000\016\003\ufffc\025\ufffc\040" +
    "\ufffc\041\ufffc\053\ufffc\054\ufffc\001\002\000\010\034\030" +
    "\035\033\077\032\001\002\000\074\003\uff93\006\uff93\013" +
    "\uff93\017\uff93\024\uff93\025\uff93\026\uff93\034\uff93\035\uff93" +
    "\040\uff93\041\uff93\042\uff93\044\uff93\045\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\066\uff93\074\uff93\076\uff93\077" +
    "\uff93\001\002\000\044\003\uffab\006\uffab\013\uffab\017\uffab" +
    "\024\uffab\026\uffab\034\uffab\035\uffab\041\uffab\044\uffab\045" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\055\uffab\077\uffab" +
    "\001\002\000\074\003\uff94\006\uff94\013\uff94\017\uff94\024" +
    "\uff94\025\uff94\026\uff94\034\uff94\035\uff94\040\uff94\041\uff94" +
    "\042\uff94\044\uff94\045\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\066\uff94\074\uff94\076\uff94\077\uff94\001\002\000" +
    "\074\003\uff92\006\uff92\013\uff92\017\uff92\024\uff92\025\uff92" +
    "\026\uff92\034\uff92\035\uff92\040\uff92\041\uff92\042\uff92\044" +
    "\uff92\045\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\066" +
    "\uff92\074\uff92\076\uff92\077\uff92\001\002\000\004\055\036" +
    "\001\002\000\016\003\uffe8\025\uffe8\040\uffe8\041\uffe8\053" +
    "\uffe8\054\uffe8\001\002\000\010\034\uffa0\035\uffa0\077\uffa0" +
    "\001\002\000\004\074\040\001\002\000\034\034\uff6c\035" +
    "\uff6c\036\uff6c\055\uff6c\064\uff6c\065\uff6c\070\uff6c\074\uff6c" +
    "\075\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\001\002\000" +
    "\030\036\061\055\036\064\057\065\042\070\047\074\040" +
    "\075\055\077\044\100\062\101\046\102\043\001\002\000" +
    "\140\003\uff88\004\uff88\005\uff88\007\uff88\011\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\040" +
    "\uff88\041\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\062" +
    "\uff88\063\uff88\067\uff88\070\uff88\072\uff88\073\uff88\075\uff88" +
    "\076\uff88\077\uff88\001\002\000\140\003\uff8c\004\uff8c\005" +
    "\uff8c\007\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\040\uff8c\041\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\062\uff8c\063\uff8c\067\uff8c\070" +
    "\uff8c\072\uff8c\073\uff8c\075\uff8c\076\uff8c\077\uff8c\001\002" +
    "\000\140\003\uff8a\004\uff8a\005\uff8a\007\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\040\uff8a\041\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\062\uff8a\063\uff8a\067\uff8a\070\uff8a\072\uff8a\073\uff8a\075" +
    "\uff8a\076\uff8a\077\uff8a\001\002\000\140\003\uffa1\004\uffa1" +
    "\005\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\062\uffa1\063\uffa1\067\uffa1" +
    "\070\uffa1\072\uffa1\073\uffa1\075\uffa1\076\uffa1\077\uffa1\001" +
    "\002\000\140\003\uff8d\004\uff8d\005\uff8d\007\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\040\uff8d\041\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055" +
    "\uff8d\062\uff8d\063\uff8d\067\uff8d\070\uff8d\072\uff8d\073\uff8d" +
    "\075\uff8d\076\uff8d\077\uff8d\001\002\000\026\036\061\055" +
    "\036\064\057\065\042\070\047\074\040\077\044\100\062" +
    "\101\046\102\043\001\002\000\026\036\061\055\036\064" +
    "\057\065\042\070\047\074\040\077\044\100\062\101\046" +
    "\102\043\001\002\000\042\020\077\021\071\027\075\030" +
    "\101\031\076\032\102\034\066\035\067\062\070\063\072" +
    "\067\100\070\065\072\074\073\073\075\uff9d\076\uff9d\001" +
    "\002\000\006\075\055\076\124\001\002\000\140\003\uff90" +
    "\004\uff90\005\uff90\007\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\040\uff90\041\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\062\uff90\063\uff90" +
    "\067\uff90\070\uff90\072\uff90\073\uff90\075\uff90\076\uff90\077" +
    "\uff90\001\002\000\140\003\uff91\004\uff91\005\uff91\007\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\035\uff91\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\055\uff91\062\uff91\063\uff91\067\uff91\070\uff91\072\uff91" +
    "\073\uff91\075\uff91\076\uff91\077\uff91\001\002\000\140\003" +
    "\uff6b\004\uff6b\005\uff6b\007\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\040\uff6b\041" +
    "\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b" +
    "\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\062\uff6b\063" +
    "\uff6b\067\uff6b\070\uff6b\072\uff6b\073\uff6b\075\uff6b\076\uff6b" +
    "\077\uff6b\001\002\000\140\003\uff8f\004\uff8f\005\uff8f\007" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\040\uff8f\041\uff8f\043\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\062\uff8f\063\uff8f\067\uff8f\070\uff8f\072" +
    "\uff8f\073\uff8f\075\uff8f\076\uff8f\077\uff8f\001\002\000\140" +
    "\003\uff89\004\uff89\005\uff89\007\uff89\011\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030" +
    "\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\040\uff89" +
    "\041\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050" +
    "\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\062\uff89" +
    "\063\uff89\067\uff89\070\uff89\072\uff89\073\uff89\075\uff89\076" +
    "\uff89\077\uff89\001\002\000\140\003\uff8e\004\uff8e\005\uff8e" +
    "\007\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\035\uff8e\040\uff8e\041\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\062\uff8e\063\uff8e\067\uff8e\070\uff8e" +
    "\072\uff8e\073\uff8e\075\uff8e\076\uff8e\077\uff8e\001\002\000" +
    "\026\036\uff75\055\uff75\064\uff75\065\uff75\070\uff75\074\uff75" +
    "\077\uff75\100\uff75\101\uff75\102\uff75\001\002\000\140\003" +
    "\uff8b\004\uff8b\005\uff8b\007\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\040\uff8b\041" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\062\uff8b\063" +
    "\uff8b\067\uff8b\070\uff8b\072\uff8b\073\uff8b\075\uff8b\076\uff8b" +
    "\077\uff8b\001\002\000\026\036\061\055\036\064\057\065" +
    "\042\070\047\074\040\077\044\100\062\101\046\102\043" +
    "\001\002\000\140\003\uff74\004\uff74\005\uff74\007\uff74\011" +
    "\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\020\077\021\071\022\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\075\030\101\031\076\032\102\033\uff74\034\uff74" +
    "\035\uff74\040\uff74\041\uff74\043\uff74\044\uff74\045\uff74\046" +
    "\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\055\uff74\062\070\063\072\067\100\070\065\072\074\073" +
    "\073\075\uff74\076\uff74\077\uff74\001\002\000\026\036\061" +
    "\055\036\064\057\065\042\070\047\074\040\077\044\100" +
    "\062\101\046\102\043\001\002\000\026\036\uff77\055\uff77" +
    "\064\uff77\065\uff77\070\uff77\074\uff77\077\uff77\100\uff77\101" +
    "\uff77\102\uff77\001\002\000\026\036\uff79\055\uff79\064\uff79" +
    "\065\uff79\070\uff79\074\uff79\077\uff79\100\uff79\101\uff79\102" +
    "\uff79\001\002\000\026\036\061\055\036\064\057\065\042" +
    "\070\047\074\040\077\044\100\062\101\046\102\043\001" +
    "\002\000\026\036\061\055\036\064\057\065\042\070\047" +
    "\074\040\077\044\100\062\101\046\102\043\001\002\000" +
    "\026\036\061\055\036\064\057\065\042\070\047\074\040" +
    "\077\044\100\062\101\046\102\043\001\002\000\026\036" +
    "\061\055\036\064\057\065\042\070\047\074\040\077\044" +
    "\100\062\101\046\102\043\001\002\000\026\036\061\055" +
    "\036\064\057\065\042\070\047\074\040\077\044\100\062" +
    "\101\046\102\043\001\002\000\026\036\061\055\036\064" +
    "\057\065\042\070\047\074\040\077\044\100\062\101\046" +
    "\102\043\001\002\000\026\036\061\055\036\064\057\065" +
    "\042\070\047\074\040\077\044\100\062\101\046\102\043" +
    "\001\002\000\026\036\061\055\036\064\057\065\042\070" +
    "\047\074\040\077\044\100\062\101\046\102\043\001\002" +
    "\000\026\036\061\055\036\064\057\065\042\070\047\074" +
    "\040\077\044\100\062\101\046\102\043\001\002\000\026" +
    "\036\061\055\036\064\057\065\042\070\047\074\040\077" +
    "\044\100\062\101\046\102\043\001\002\000\026\036\061" +
    "\055\036\064\057\065\042\070\047\074\040\077\044\100" +
    "\062\101\046\102\043\001\002\000\140\003\uff7e\004\uff7e" +
    "\005\uff7e\007\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\077\021\071\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\075\030\101\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\040\uff7e\041\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\062\070\063\072\067\100" +
    "\070\065\072\074\073\073\075\uff7e\076\uff7e\077\uff7e\001" +
    "\002\000\140\003\uff7b\004\uff7b\005\uff7b\007\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035" +
    "\uff7b\040\uff7b\041\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\062\070\063\072\067\100\070\065\072\074\073\073" +
    "\075\uff7b\076\uff7b\077\uff7b\001\002\000\140\003\uff86\004" +
    "\uff86\005\uff86\007\uff86\011\uff86\012\uff86\013\uff86\014\uff86" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\040\uff86\041\uff86\043" +
    "\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\062\070\063\072\067" +
    "\uff86\070\uff86\072\074\073\073\075\uff86\076\uff86\077\uff86" +
    "\001\002\000\140\003\uff7c\004\uff7c\005\uff7c\007\uff7c\011" +
    "\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\040\uff7c\041\uff7c\043\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c" +
    "\055\uff7c\062\070\063\072\067\100\070\065\072\074\073" +
    "\073\075\uff7c\076\uff7c\077\uff7c\001\002\000\140\003\uff7f" +
    "\004\uff7f\005\uff7f\007\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\077\021\071\022\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\075\030\101\031" +
    "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\040\uff7f\041\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\062\070\063\072" +
    "\067\100\070\065\072\074\073\073\075\uff7f\076\uff7f\077" +
    "\uff7f\001\002\000\140\003\uff7a\004\uff7a\005\uff7a\007\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017" +
    "\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\040\uff7a\041\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\062\070\063\072\067\100\070\065\072\074" +
    "\073\073\075\uff7a\076\uff7a\077\uff7a\001\002\000\140\003" +
    "\uff84\004\uff84\005\uff84\007\uff84\011\uff84\012\uff84\013\uff84" +
    "\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\040\uff84\041" +
    "\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\062\070\063" +
    "\uff84\067\uff84\070\uff84\072\uff84\073\uff84\075\uff84\076\uff84" +
    "\077\uff84\001\002\000\140\003\uff83\004\uff83\005\uff83\007" +
    "\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\040\uff83\041\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\062\070\063\uff83\067\uff83\070\uff83\072" +
    "\uff83\073\uff83\075\uff83\076\uff83\077\uff83\001\002\000\140" +
    "\003\uff81\004\uff81\005\uff81\007\uff81\011\uff81\012\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\040\uff81" +
    "\041\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\062\070" +
    "\063\uff81\067\uff81\070\uff81\072\uff81\073\uff81\075\uff81\076" +
    "\uff81\077\uff81\001\002\000\140\003\uff7d\004\uff7d\005\uff7d" +
    "\007\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\035\uff7d\040\uff7d\041\uff7d\043\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\054\uff7d\055\uff7d\062\070\063\072\067\100\070\065" +
    "\072\074\073\073\075\uff7d\076\uff7d\077\uff7d\001\002\000" +
    "\136\003\uff82\004\uff82\005\uff82\007\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021" +
    "\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\040" +
    "\uff82\041\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82" +
    "\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\063" +
    "\uff82\067\uff82\070\uff82\072\uff82\073\uff82\075\uff82\076\uff82" +
    "\077\uff82\001\002\000\026\036\061\055\036\064\057\065" +
    "\042\070\047\074\040\077\044\100\062\101\046\102\043" +
    "\001\002\000\140\003\uff78\004\uff78\005\uff78\007\uff78\011" +
    "\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\077\021\071\022\uff78\023\uff78\024\uff78\025\uff78\026" +
    "\uff78\027\075\030\101\031\076\032\102\033\uff78\034\uff78" +
    "\035\uff78\040\uff78\041\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78" +
    "\055\uff78\062\070\063\072\067\100\070\065\072\074\073" +
    "\073\075\uff78\076\uff78\077\uff78\001\002\000\026\036\061" +
    "\055\036\064\057\065\042\070\047\074\040\077\044\100" +
    "\062\101\046\102\043\001\002\000\140\003\uff76\004\uff76" +
    "\005\uff76\007\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015" +
    "\uff76\016\uff76\017\uff76\020\077\021\071\022\uff76\023\uff76" +
    "\024\uff76\025\uff76\026\uff76\027\075\030\101\031\076\032" +
    "\102\033\uff76\034\uff76\035\067\040\uff76\041\uff76\043\uff76" +
    "\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\053\uff76\054\uff76\055\uff76\062\070\063\072\067\100" +
    "\070\065\072\074\073\073\075\uff76\076\uff76\077\uff76\001" +
    "\002\000\140\003\uff85\004\uff85\005\uff85\007\uff85\011\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\040\uff85\041\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055" +
    "\uff85\062\070\063\072\067\uff85\070\uff85\072\074\073\073" +
    "\075\uff85\076\uff85\077\uff85\001\002\000\140\003\uffa2\004" +
    "\uffa2\005\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\040\uffa2\041\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\062\uffa2\063\uffa2\067" +
    "\uffa2\070\uffa2\072\uffa2\073\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\001\002\000\026\036\061\055\036\064\057\065\042\070" +
    "\047\074\040\077\044\100\062\101\046\102\043\001\002" +
    "\000\042\020\077\021\071\027\075\030\101\031\076\032" +
    "\102\034\066\035\067\062\070\063\072\067\100\070\065" +
    "\072\074\073\073\075\uff9e\076\uff9e\001\002\000\040\020" +
    "\077\021\071\027\075\030\101\031\076\032\102\034\066" +
    "\035\067\062\070\063\072\067\100\070\065\072\074\073" +
    "\073\075\055\001\002\000\140\003\uff87\004\uff87\005\uff87" +
    "\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\034\uff87\035\uff87\040\uff87\041\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\062\uff87\063\uff87\067\uff87\070\uff87" +
    "\072\uff87\073\uff87\075\uff87\076\uff87\077\uff87\001\002\000" +
    "\140\003\uff80\004\uff80\005\uff80\007\uff80\011\uff80\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\040" +
    "\uff80\041\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\062" +
    "\uff80\063\uff80\067\uff80\070\uff80\072\uff80\073\uff80\075\uff80" +
    "\076\uff80\077\uff80\001\002\000\010\034\030\035\033\077" +
    "\032\001\002\000\004\074\uff9f\001\002\000\064\003\ufff3" +
    "\004\ufff3\005\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\022\ufff3\024\ufff3\026\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\055\ufff3\077\ufff3\001\002\000\006" +
    "\066\uffe3\076\334\001\002\000\026\036\uff9a\055\uff9a\064" +
    "\uff9a\065\uff9a\070\uff9a\074\uff9a\077\uff9a\100\uff9a\101\uff9a" +
    "\102\uff9a\001\002\000\064\003\uffee\004\uffee\005\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\022\uffee\024\uffee\026\uffee\033\uffee\034\uffee\035\uffee\041" +
    "\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\055\uffee\077\uffee\001\002\000\042\003\uffb7\017\uffb7\022" +
    "\uffb5\024\uffb7\026\uffb7\034\uffb7\035\uffb7\041\uffb7\044\uffb7" +
    "\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\055\uffb7\077" +
    "\uffb7\001\002\000\064\003\ufff1\004\ufff1\005\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022" +
    "\ufff1\024\ufff1\026\ufff1\033\ufff1\034\ufff1\035\ufff1\041\ufff1" +
    "\044\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\055" +
    "\ufff1\077\ufff1\001\002\000\064\003\ufff4\004\ufff4\005\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\041\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\055\ufff4\077\ufff4\001\002\000\064\003\ufff0\004\ufff0" +
    "\005\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\022\ufff0\024\ufff0\026\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\055\ufff0\077\ufff0\001\002\000\026\036\061" +
    "\055\036\064\057\065\042\070\047\074\040\077\044\100" +
    "\062\101\046\102\043\001\002\000\004\022\272\001\002" +
    "\000\042\003\160\013\271\017\162\024\166\026\135\034" +
    "\030\035\033\041\014\044\156\045\154\047\150\050\151" +
    "\051\137\052\147\055\036\077\032\001\002\000\010\004" +
    "\254\014\256\033\257\001\002\000\026\036\uffec\055\uffec" +
    "\064\uffec\065\uffec\070\uffec\074\uffec\077\uffec\100\uffec\101" +
    "\uffec\102\uffec\001\002\000\010\034\uff6e\035\uff6e\077\uff6e" +
    "\001\002\000\026\036\uffc0\055\uffc0\064\uffc0\065\uffc0\070" +
    "\uffc0\074\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\001\002" +
    "\000\064\003\ufff5\004\ufff5\005\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\022\ufff5\024\ufff5" +
    "\026\ufff5\033\ufff5\034\ufff5\035\ufff5\041\ufff5\044\ufff5\045" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\077\ufff5" +
    "\001\002\000\064\003\ufff2\004\ufff2\005\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\022\ufff2" +
    "\024\ufff2\026\ufff2\033\ufff2\034\ufff2\035\ufff2\041\ufff2\044" +
    "\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\055\ufff2" +
    "\077\ufff2\001\002\000\026\036\uffd0\055\uffd0\064\uffd0\065" +
    "\uffd0\070\uffd0\074\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\001\002\000\004\074\uffb1\001\002\000\026\036\uff73\055" +
    "\uff73\064\uff73\065\uff73\070\uff73\074\uff73\077\uff73\100\uff73" +
    "\101\uff73\102\uff73\001\002\000\016\003\uffaf\025\uffaf\040" +
    "\uffaf\041\uffaf\053\uffaf\054\uffaf\001\002\000\064\003\uffea" +
    "\004\uffea\005\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\022\uffea\024\uffea\026\uffea\033\uffea" +
    "\034\uffea\035\uffea\041\uffea\044\uffea\045\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\055\uffea\077\uffea\001\002\000\010" +
    "\042\uffe0\066\uffe0\076\uffe0\001\002\000\026\036\uff9c\055" +
    "\uff9c\064\uff9c\065\uff9c\070\uff9c\074\uff9c\077\uff9c\100\uff9c" +
    "\101\uff9c\102\uff9c\001\002\000\010\034\030\035\033\077" +
    "\032\001\002\000\064\003\uffef\004\uffef\005\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\022" +
    "\uffef\024\uffef\026\uffef\033\uffef\034\uffef\035\uffef\041\uffef" +
    "\044\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\055" +
    "\uffef\077\uffef\001\002\000\016\003\uffa7\025\uffa7\040\uffa7" +
    "\041\uffa7\053\uffa7\054\uffa7\001\002\000\064\003\uffed\004" +
    "\uffed\005\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\022\uffed\024\uffed\026\uffed\033\uffed\034" +
    "\uffed\035\uffed\041\uffed\044\uffed\045\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\055\uffed\077\uffed\001\002\000\004\023" +
    "\171\001\002\000\026\036\061\055\036\064\057\065\042" +
    "\070\047\074\040\077\044\100\062\101\046\102\043\001" +
    "\002\000\026\036\uff6d\055\uff6d\064\uff6d\065\uff6d\070\uff6d" +
    "\074\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\001\002\000" +
    "\042\007\173\020\077\021\071\027\075\030\101\031\076" +
    "\032\102\034\066\035\067\046\174\062\070\063\072\067" +
    "\100\070\065\072\074\073\073\001\002\000\026\036\uffc5" +
    "\055\uffc5\064\uffc5\065\uffc5\070\uffc5\074\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\001\002\000\042\003\uffc2\015\uffc2" +
    "\017\uffc2\024\uffc2\026\uffc2\034\uffc2\035\uffc2\041\uffc2\044" +
    "\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\077\uffc2\001\002\000\042\003\160\015\200\017\162\024" +
    "\166\026\135\034\030\035\033\041\014\044\156\045\154" +
    "\047\150\050\151\051\137\052\147\055\036\077\032\001" +
    "\002\000\064\003\uffc1\004\uffc1\005\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\022\uffc1\024" +
    "\uffc1\026\uffc1\033\uffc1\034\uffc1\035\uffc1\041\uffc1\044\uffc1" +
    "\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\055\uffc1\077" +
    "\uffc1\001\002\000\042\003\160\015\202\017\162\024\166" +
    "\026\135\034\030\035\033\041\014\044\156\045\154\047" +
    "\150\050\151\051\137\052\147\055\036\077\032\001\002" +
    "\000\064\003\uffba\004\uffba\005\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\022\uffba\024\uffba" +
    "\026\uffba\033\uffba\034\uffba\035\uffba\041\uffba\044\uffba\045" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\055\uffba\077\uffba" +
    "\001\002\000\064\003\ufff6\004\ufff6\005\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6" +
    "\024\ufff6\026\ufff6\033\ufff6\034\ufff6\035\ufff6\041\ufff6\044" +
    "\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\055\ufff6" +
    "\077\ufff6\001\002\000\064\003\uffbb\004\uffbb\005\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\022\uffbb\024\uffbb\026\uffbb\033\uffbb\034\uffbb\035\uffbb\041" +
    "\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\055\uffbb\077\uffbb\001\002\000\026\036\061\055\036\064" +
    "\057\065\042\070\047\074\040\077\044\100\062\101\046" +
    "\102\043\001\002\000\040\020\077\021\071\027\075\030" +
    "\101\031\076\032\102\034\066\035\067\046\205\062\070" +
    "\063\072\067\100\070\065\072\074\073\073\001\002\000" +
    "\042\003\uffc4\015\uffc4\017\uffc4\024\uffc4\026\uffc4\034\uffc4" +
    "\035\uffc4\041\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\055\uffc4\077\uffc4\001\002\000\042\003\160" +
    "\015\200\017\162\024\166\026\135\034\030\035\033\041" +
    "\014\044\156\045\154\047\150\050\151\051\137\052\147" +
    "\055\036\077\032\001\002\000\064\003\uffc3\004\uffc3\005" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\022\uffc3\024\uffc3\026\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\041\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\055\uffc3\077\uffc3\001\002\000\026\036\061\055" +
    "\036\064\057\065\042\070\047\074\040\077\044\100\062" +
    "\101\046\102\043\001\002\000\114\003\uff9b\004\uff9b\005" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\077\021\071\022\uff9b\024\uff9b\026\uff9b\027" +
    "\075\030\101\031\076\032\102\033\uff9b\034\066\035\067" +
    "\041\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\055\uff9b\062\070\063\072\067\100\070\065\072\074" +
    "\073\073\077\uff9b\001\002\000\004\074\040\001\002\000" +
    "\010\034\030\035\033\077\032\001\002\000\012\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\001\002\000\006\075\055\076" +
    "\217\001\002\000\042\003\160\013\165\017\162\024\166" +
    "\026\135\034\030\035\033\041\014\044\156\045\154\047" +
    "\150\050\151\051\137\052\147\055\036\077\032\001\002" +
    "\000\010\034\030\035\033\077\032\001\002\000\012\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000\012\056\224" +
    "\057\222\060\223\061\225\001\002\000\052\003\uff97\006" +
    "\uff97\010\uff97\012\uff97\017\uff97\024\uff97\026\uff97\034\uff97" +
    "\035\uff97\041\uff97\044\uff97\045\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\055\uff97\075\uff97\076\uff97\077\uff97\001\002" +
    "\000\052\003\uff95\006\uff95\010\uff95\012\uff95\017\uff95\024" +
    "\uff95\026\uff95\034\uff95\035\uff95\041\uff95\044\uff95\045\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\055\uff95\075\uff95\076" +
    "\uff95\077\uff95\001\002\000\052\003\uff98\006\uff98\010\uff98" +
    "\012\uff98\017\uff98\024\uff98\026\uff98\034\uff98\035\uff98\041" +
    "\uff98\044\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\055\uff98\075\uff98\076\uff98\077\uff98\001\002\000\052\003" +
    "\uff96\006\uff96\010\uff96\012\uff96\017\uff96\024\uff96\026\uff96" +
    "\034\uff96\035\uff96\041\uff96\044\uff96\045\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\055\uff96\075\uff96\076\uff96\077\uff96" +
    "\001\002\000\006\075\uffa5\076\uffa5\001\002\000\016\003" +
    "\uffb0\025\uffb0\040\uffb0\041\uffb0\053\uffb0\054\uffb0\001\002" +
    "\000\012\056\224\057\222\060\223\061\225\001\002\000" +
    "\006\075\uffa3\076\uffa3\001\002\000\026\036\061\055\036" +
    "\064\057\065\042\070\047\074\040\077\044\100\062\101" +
    "\046\102\043\001\002\000\040\020\077\021\071\027\075" +
    "\030\101\031\076\032\102\034\066\035\067\046\234\062" +
    "\070\063\072\067\100\070\065\072\074\073\073\001\002" +
    "\000\010\004\uffcf\014\uffcf\033\uffcf\001\002\000\026\036" +
    "\061\055\036\064\057\065\042\070\047\074\040\077\044" +
    "\100\062\101\046\102\043\001\002\000\040\020\077\021" +
    "\071\027\075\030\101\031\076\032\102\034\066\035\067" +
    "\046\237\062\070\063\072\067\100\070\065\072\074\073" +
    "\073\001\002\000\042\003\uffbf\011\uffbf\017\uffbf\024\uffbf" +
    "\026\uffbf\034\uffbf\035\uffbf\041\uffbf\044\uffbf\045\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\055\uffbf\077\uffbf\001\002" +
    "\000\042\003\160\011\243\017\162\024\166\026\135\034" +
    "\030\035\033\041\014\044\156\045\154\047\150\050\151" +
    "\051\137\052\147\055\036\077\032\001\002\000\042\003" +
    "\160\011\244\017\162\024\166\026\135\034\030\035\033" +
    "\041\014\044\156\045\154\047\150\050\151\051\137\052" +
    "\147\055\036\077\032\001\002\000\064\003\uffbe\004\uffbe" +
    "\005\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\022\uffbe\024\uffbe\026\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\041\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\055\uffbe\077\uffbe\001\002\000\064\003\uffb8" +
    "\004\uffb8\005\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\022\uffb8\024\uffb8\026\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\041\uffb8\044\uffb8\045\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\077\uffb8\001\002\000\064" +
    "\003\uffb9\004\uffb9\005\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\022\uffb9\024\uffb9\026\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\041\uffb9\044\uffb9\045\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\055\uffb9\077\uffb9\001\002" +
    "\000\026\036\061\055\036\064\057\065\042\070\047\074" +
    "\040\077\044\100\062\101\046\102\043\001\002\000\114" +
    "\003\uffeb\004\uffeb\005\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\077\021\071\022\uffeb" +
    "\024\uffeb\026\uffeb\027\075\030\101\031\076\032\102\033" +
    "\uffeb\034\066\035\067\041\uffeb\044\uffeb\045\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\055\uffeb\062\070\063\072\067" +
    "\100\070\065\072\074\073\073\077\uffeb\001\002\000\026" +
    "\036\061\055\036\064\057\065\042\070\047\074\040\077" +
    "\044\100\062\101\046\102\043\001\002\000\004\014\265" +
    "\001\002\000\004\014\uffcc\001\002\000\004\043\262\001" +
    "\002\000\010\004\254\014\uffcd\033\257\001\002\000\044" +
    "\003\uff72\016\uff72\017\uff72\024\uff72\026\uff72\034\uff72\035" +
    "\uff72\041\uff72\043\uff72\044\uff72\045\uff72\047\uff72\050\uff72" +
    "\051\uff72\052\uff72\055\uff72\077\uff72\001\002\000\010\004" +
    "\uffca\014\uffca\033\uffca\001\002\000\064\003\uffd1\004\uffd1" +
    "\005\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\022\uffd1\024\uffd1\026\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\041\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\055\uffd1\077\uffd1\001\002\000\026\036\uff6f" +
    "\055\uff6f\064\uff6f\065\uff6f\070\uff6f\074\uff6f\077\uff6f\100" +
    "\uff6f\101\uff6f\102\uff6f\001\002\000\004\014\uffce\001\002" +
    "\000\010\004\uffcb\014\uffcb\033\uffcb\001\002\000\052\003" +
    "\uff71\004\uff71\005\uff71\014\uff71\016\uff71\017\uff71\024\uff71" +
    "\026\uff71\033\uff71\034\uff71\035\uff71\041\uff71\044\uff71\045" +
    "\uff71\047\uff71\050\uff71\051\uff71\052\uff71\055\uff71\077\uff71" +
    "\001\002\000\042\003\160\014\uffc6\017\162\024\166\026" +
    "\135\034\030\035\033\041\014\044\156\045\154\047\150" +
    "\050\151\051\137\052\147\055\036\077\032\001\002\000" +
    "\042\003\160\014\uffc7\017\162\024\166\026\135\034\030" +
    "\035\033\041\014\044\156\045\154\047\150\050\151\051" +
    "\137\052\147\055\036\077\032\001\002\000\064\003\uffd2" +
    "\004\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\022\uffd2\024\uffd2\026\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\041\uffd2\044\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\055\uffd2\077\uffd2\001\002\000\040" +
    "\020\077\021\071\027\075\030\101\031\076\032\102\034" +
    "\066\035\067\043\262\062\070\063\072\067\100\070\065" +
    "\072\074\073\073\001\002\000\046\003\160\004\uffc8\014" +
    "\uffc8\017\162\024\166\026\135\033\uffc8\034\030\035\033" +
    "\041\014\044\156\045\154\047\150\050\151\051\137\052" +
    "\147\055\036\077\032\001\002\000\046\003\160\004\uffc9" +
    "\014\uffc9\017\162\024\166\026\135\033\uffc9\034\030\035" +
    "\033\041\014\044\156\045\154\047\150\050\151\051\137" +
    "\052\147\055\036\077\032\001\002\000\016\003\uffa8\025" +
    "\uffa8\040\uffa8\041\uffa8\053\uffa8\054\uffa8\001\002\000\026" +
    "\036\uffbd\055\uffbd\064\uffbd\065\uffbd\070\uffbd\074\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\001\002\000\026\036\061" +
    "\055\036\064\057\065\042\070\047\074\040\077\044\100" +
    "\062\101\046\102\043\001\002\000\114\003\uffbc\004\uffbc" +
    "\005\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\077\021\071\022\uffbc\024\uffbc\026\uffbc" +
    "\027\075\030\101\031\076\032\102\033\uffbc\034\066\035" +
    "\067\041\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\055\uffbc\062\070\063\072\067\100\070\065\072" +
    "\074\073\073\077\uffbc\001\002\000\040\020\077\021\071" +
    "\027\075\030\101\031\076\032\102\034\066\035\067\043" +
    "\262\062\070\063\072\067\100\070\065\072\074\073\073" +
    "\001\002\000\046\003\160\004\254\005\305\016\300\017" +
    "\162\024\166\026\135\034\030\035\033\041\014\044\156" +
    "\045\154\047\150\050\151\051\137\052\147\055\036\077" +
    "\032\001\002\000\046\003\160\004\254\005\305\016\311" +
    "\017\162\024\166\026\135\034\030\035\033\041\014\044" +
    "\156\045\154\047\150\050\151\051\137\052\147\055\036" +
    "\077\032\001\002\000\064\003\uffd5\004\uffd5\005\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\022\uffd5\024\uffd5\026\uffd5\033\uffd5\034\uffd5\035\uffd5\041" +
    "\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\055\uffd5\077\uffd5\001\002\000\026\036\061\055\036\064" +
    "\057\065\042\070\047\074\040\077\044\100\062\101\046" +
    "\102\043\001\002\000\064\003\uffde\004\uffde\005\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\022\uffde\024\uffde\026\uffde\033\uffde\034\uffde\035\uffde\041" +
    "\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\055\uffde\077\uffde\001\002\000\064\003\uffdf\004\uffdf\005" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\022\uffdf\024\uffdf\026\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\041\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\055\uffdf\077\uffdf\001\002\000\042\003\160\016" +
    "\300\017\162\024\166\026\135\034\030\035\033\041\014" +
    "\044\156\045\154\047\150\050\151\051\137\052\147\055" +
    "\036\077\032\001\002\000\026\036\uff70\055\uff70\064\uff70" +
    "\065\uff70\070\uff70\074\uff70\077\uff70\100\uff70\101\uff70\102" +
    "\uff70\001\002\000\064\003\uffdd\004\uffdd\005\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022" +
    "\uffdd\024\uffdd\026\uffdd\033\uffdd\034\uffdd\035\uffdd\041\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\055" +
    "\uffdd\077\uffdd\001\002\000\064\003\uffd3\004\uffd3\005\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\022\uffd3\024\uffd3\026\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\041\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\055\uffd3\077\uffd3\001\002\000\042\003\160\016\311" +
    "\017\162\024\166\026\135\034\030\035\033\041\014\044" +
    "\156\045\154\047\150\050\151\051\137\052\147\055\036" +
    "\077\032\001\002\000\064\003\uffd6\004\uffd6\005\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\022\uffd6\024\uffd6\026\uffd6\033\uffd6\034\uffd6\035\uffd6\041" +
    "\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\055\uffd6\077\uffd6\001\002\000\040\020\077\021\071\027" +
    "\075\030\101\031\076\032\102\034\066\035\067\043\262" +
    "\062\070\063\072\067\100\070\065\072\074\073\073\001" +
    "\002\000\046\003\160\004\254\005\305\016\300\017\162" +
    "\024\166\026\135\034\030\035\033\041\014\044\156\045" +
    "\154\047\150\050\151\051\137\052\147\055\036\077\032" +
    "\001\002\000\064\003\uffdb\004\uffdb\005\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb" +
    "\024\uffdb\026\uffdb\033\uffdb\034\uffdb\035\uffdb\041\uffdb\044" +
    "\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\055\uffdb" +
    "\077\uffdb\001\002\000\064\003\uffd9\004\uffd9\005\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\022\uffd9\024\uffd9\026\uffd9\033\uffd9\034\uffd9\035\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\055\uffd9\077\uffd9\001\002\000\064\003\uffd7\004\uffd7\005" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\022\uffd7\024\uffd7\026\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\055\uffd7\077\uffd7\001\002\000\042\003\160\016" +
    "\300\017\162\024\166\026\135\034\030\035\033\041\014" +
    "\044\156\045\154\047\150\050\151\051\137\052\147\055" +
    "\036\077\032\001\002\000\026\036\061\055\036\064\057" +
    "\065\042\070\047\074\040\077\044\100\062\101\046\102" +
    "\043\001\002\000\040\020\077\021\071\027\075\030\101" +
    "\031\076\032\102\034\066\035\067\043\262\062\070\063" +
    "\072\067\100\070\065\072\074\073\073\001\002\000\046" +
    "\003\160\004\254\005\305\016\300\017\162\024\166\026" +
    "\135\034\030\035\033\041\014\044\156\045\154\047\150" +
    "\050\151\051\137\052\147\055\036\077\032\001\002\000" +
    "\064\003\uffdc\004\uffdc\005\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\024\uffdc\026" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\041\uffdc\044\uffdc\045\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\055\uffdc\077\uffdc\001" +
    "\002\000\064\003\uffda\004\uffda\005\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\024" +
    "\uffda\026\uffda\033\uffda\034\uffda\035\uffda\041\uffda\044\uffda" +
    "\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\055\uffda\077" +
    "\uffda\001\002\000\064\003\uffd8\004\uffd8\005\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022" +
    "\uffd8\024\uffd8\026\uffd8\033\uffd8\034\uffd8\035\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\055" +
    "\uffd8\077\uffd8\001\002\000\064\003\uffd4\004\uffd4\005\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\022\uffd4\024\uffd4\026\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\041\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\055\uffd4\077\uffd4\001\002\000\040\003\160\017\162" +
    "\024\166\026\135\034\030\035\033\041\014\044\156\045" +
    "\154\047\150\050\151\051\137\052\147\055\036\077\032" +
    "\001\002\000\042\003\160\017\162\022\uffb6\024\166\026" +
    "\135\034\030\035\033\041\014\044\156\045\154\047\150" +
    "\050\151\051\137\052\147\055\036\077\032\001\002\000" +
    "\026\036\061\055\036\064\057\065\042\070\047\074\040" +
    "\077\044\100\062\101\046\102\043\001\002\000\114\003" +
    "\uff99\004\uff99\005\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\077\021\071\022\uff99\024" +
    "\uff99\026\uff99\027\075\030\101\031\076\032\102\033\uff99" +
    "\034\066\035\067\041\uff99\044\uff99\045\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\055\uff99\062\070\063\072\067\100" +
    "\070\065\072\074\073\073\077\uff99\001\002\000\004\066" +
    "\336\001\002\000\010\034\030\035\033\077\032\001\002" +
    "\000\010\042\uffe1\066\uffe1\076\uffe1\001\002\000\026\036" +
    "\061\055\036\064\057\065\042\070\047\074\040\077\044" +
    "\100\062\101\046\102\043\001\002\000\116\003\uffe2\004" +
    "\uffe2\005\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\077\021\071\022\uffe2\023\uffe2\024" +
    "\uffe2\026\uffe2\027\075\030\101\031\076\032\102\033\uffe2" +
    "\034\066\035\067\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\055\uffe2\062\070\063\072\067\100" +
    "\070\065\072\074\073\073\077\uffe2\001\002\000\010\034" +
    "\030\035\033\077\032\001\002\000\006\042\342\076\334" +
    "\001\002\000\012\056\uffe6\057\uffe6\060\uffe6\061\uffe6\001" +
    "\002\000\012\056\224\057\222\060\223\061\225\001\002" +
    "\000\004\010\345\001\002\000\026\036\uffe5\055\uffe5\064" +
    "\uffe5\065\uffe5\070\uffe5\074\uffe5\077\uffe5\100\uffe5\101\uffe5" +
    "\102\uffe5\001\002\000\026\036\061\055\036\064\057\065" +
    "\042\070\047\074\040\077\044\100\062\101\046\102\043" +
    "\001\002\000\124\003\uffe4\004\uffe4\005\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\077" +
    "\021\071\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\075\030" +
    "\101\031\076\032\102\033\uffe4\034\066\035\067\040\uffe4" +
    "\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\062\070\063\072\067\100" +
    "\070\065\072\074\073\073\077\uffe4\001\002\000\010\034" +
    "\030\035\033\077\032\001\002\000\012\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\001\002\000\044\003\160\006\355\012" +
    "\356\017\162\024\166\026\135\034\030\035\033\041\014" +
    "\044\156\045\154\047\150\050\151\051\137\052\147\055" +
    "\036\077\032\001\002\000\042\003\160\012\364\017\162" +
    "\024\166\026\135\034\030\035\033\041\014\044\156\045" +
    "\154\047\150\050\151\051\137\052\147\055\036\077\032" +
    "\001\002\000\016\003\uffb2\025\uffb2\040\uffb2\041\uffb2\053" +
    "\uffb2\054\uffb2\001\002\000\004\074\uffb4\001\002\000\016" +
    "\003\uffa9\025\uffa9\040\uffa9\041\uffa9\053\uffa9\054\uffa9\001" +
    "\002\000\004\074\040\001\002\000\010\034\030\035\033" +
    "\077\032\001\002\000\006\075\055\076\217\001\002\000" +
    "\042\003\160\012\356\017\162\024\166\026\135\034\030" +
    "\035\033\041\014\044\156\045\154\047\150\050\151\051" +
    "\137\052\147\055\036\077\032\001\002\000\016\003\uffb3" +
    "\025\uffb3\040\uffb3\041\uffb3\053\uffb3\054\uffb3\001\002\000" +
    "\016\003\uffaa\025\uffaa\040\uffaa\041\uffaa\053\uffaa\054\uffaa" +
    "\001\002\000\010\034\030\035\033\077\032\001\002\000" +
    "\016\003\ufffd\025\ufffd\040\ufffd\041\ufffd\053\ufffd\054\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\006\002\005\040\004\001\001\000\004\063" +
    "\364\001\001\000\020\005\015\006\016\035\023\041\022" +
    "\042\012\055\007\056\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\351\001\001\000\002\001\001" +
    "\000\004\104\347\001\001\000\002\001\001\000\004\066" +
    "\337\001\001\000\044\003\144\004\151\006\140\007\133" +
    "\011\132\013\160\014\163\022\156\023\143\024\152\027" +
    "\137\034\141\037\135\046\142\053\162\057\036\060\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\033\001\001\000\004\105\026\001\001\000\002\001\001" +
    "\000\016\005\015\006\016\035\023\042\025\055\007\056" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\034\057\036\001\001\000\002\001\001\000\004\110" +
    "\130\001\001\000\004\061\040\001\001\000\002\001\001" +
    "\000\024\012\050\014\057\015\051\043\053\044\052\045" +
    "\055\057\036\061\047\062\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\127\014\057\043\053\044\052" +
    "\045\055\057\036\061\047\001\001\000\020\012\125\014" +
    "\057\043\053\044\052\045\055\057\036\061\047\001\001" +
    "\000\002\001\001\000\004\062\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\115\062\001" +
    "\001\000\002\001\001\000\020\012\063\014\057\043\053" +
    "\044\052\045\055\057\036\061\047\001\001\000\002\001" +
    "\001\000\020\012\121\014\057\043\053\044\052\045\055" +
    "\057\036\061\047\001\001\000\004\114\117\001\001\000" +
    "\004\113\115\001\001\000\020\012\114\014\057\043\053" +
    "\044\052\045\055\057\036\061\047\001\001\000\020\012" +
    "\113\014\057\043\053\044\052\045\055\057\036\061\047" +
    "\001\001\000\020\012\112\014\057\043\053\044\052\045" +
    "\055\057\036\061\047\001\001\000\020\012\111\014\057" +
    "\043\053\044\052\045\055\057\036\061\047\001\001\000" +
    "\020\012\110\014\057\043\053\044\052\045\055\057\036" +
    "\061\047\001\001\000\020\012\107\014\057\043\053\044" +
    "\052\045\055\057\036\061\047\001\001\000\020\012\106" +
    "\014\057\043\053\044\052\045\055\057\036\061\047\001" +
    "\001\000\020\012\105\014\057\043\053\044\052\045\055" +
    "\057\036\061\047\001\001\000\020\012\104\014\057\043" +
    "\053\044\052\045\055\057\036\061\047\001\001\000\020" +
    "\012\103\014\057\043\053\044\052\045\055\057\036\061" +
    "\047\001\001\000\020\012\102\014\057\043\053\044\052" +
    "\045\055\057\036\061\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\116\014\057\043\053\044\052\045\055\057" +
    "\036\061\047\001\001\000\002\001\001\000\020\012\120" +
    "\014\057\043\053\044\052\045\055\057\036\061\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\124\014\057\043\053\044\052\045\055\057" +
    "\036\061\047\001\001\000\002\001\001\000\004\062\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\332\001\001\000\004\112\330\001\001\000\002\001" +
    "\001\000\004\101\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\274\014\057\043" +
    "\053\044\052\045\055\057\036\061\047\001\001\000\002" +
    "\001\001\000\040\004\200\006\140\007\133\011\132\013" +
    "\160\014\163\023\143\024\152\027\137\034\141\037\135" +
    "\046\142\053\162\057\036\060\145\001\001\000\016\030" +
    "\247\031\252\032\254\033\250\047\251\052\246\001\001" +
    "\000\004\064\244\001\001\000\002\001\001\000\004\076" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\231\001\001\000\004\103\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\207\001\001\000\010\007\133\011\166\013" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\167\001\001\000\020\012\171\014" +
    "\057\043\053\044\052\045\055\057\036\061\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\202\001" +
    "\001\000\004\075\174\001\001\000\044\003\176\004\151" +
    "\006\140\007\133\011\132\013\160\014\163\017\175\023" +
    "\143\024\152\027\137\034\141\037\135\046\142\053\162" +
    "\057\036\060\145\001\001\000\002\001\001\000\040\004" +
    "\200\006\140\007\133\011\132\013\160\014\163\023\143" +
    "\024\152\027\137\034\141\037\135\046\142\053\162\057" +
    "\036\060\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\203\014\057\043\053\044" +
    "\052\045\055\057\036\061\047\001\001\000\002\001\001" +
    "\000\004\074\205\001\001\000\044\003\176\004\151\006" +
    "\140\007\133\011\132\013\160\014\163\017\206\023\143" +
    "\024\152\027\137\034\141\037\135\046\142\053\162\057" +
    "\036\060\145\001\001\000\002\001\001\000\020\012\210" +
    "\014\057\043\053\044\052\045\055\057\036\061\047\001" +
    "\001\000\002\001\001\000\004\061\212\001\001\000\006" +
    "\013\213\036\214\001\001\000\004\107\227\001\001\000" +
    "\004\062\215\001\001\000\044\003\144\004\151\006\140" +
    "\007\133\011\132\013\160\014\163\022\226\023\143\024" +
    "\152\027\137\034\141\037\135\046\142\053\162\057\036" +
    "\060\145\001\001\000\004\013\217\001\001\000\004\106" +
    "\220\001\001\000\004\010\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\230\001\001" +
    "\000\002\001\001\000\020\012\232\014\057\043\053\044" +
    "\052\045\055\057\036\061\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\235\014\057\043\053\044" +
    "\052\045\055\057\036\061\047\001\001\000\002\001\001" +
    "\000\004\077\237\001\001\000\044\003\240\004\151\006" +
    "\140\007\133\011\132\013\160\014\163\020\241\023\143" +
    "\024\152\027\137\034\141\037\135\046\142\053\162\057" +
    "\036\060\145\001\001\000\040\004\200\006\140\007\133" +
    "\011\132\013\160\014\163\023\143\024\152\027\137\034" +
    "\141\037\135\046\142\053\162\057\036\060\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\245\014\057\043\053\044\052\045\055\057\036" +
    "\061\047\001\001\000\002\001\001\000\020\012\265\014" +
    "\057\043\053\044\052\045\055\057\036\061\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\262\001" +
    "\001\000\012\032\260\033\257\047\251\052\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\263\004\151\006\140\007\133\011" +
    "\132\013\160\014\163\023\143\024\152\027\137\034\141" +
    "\037\135\046\142\053\162\057\036\060\145\001\001\000" +
    "\040\004\200\006\140\007\133\011\132\013\160\014\163" +
    "\023\143\024\152\027\137\034\141\037\135\046\142\053" +
    "\162\057\036\060\145\001\001\000\002\001\001\000\004" +
    "\051\266\001\001\000\042\003\267\004\151\006\140\007" +
    "\133\011\132\013\160\014\163\023\143\024\152\027\137" +
    "\034\141\037\135\046\142\053\162\057\036\060\145\001" +
    "\001\000\040\004\200\006\140\007\133\011\132\013\160" +
    "\014\163\023\143\024\152\027\137\034\141\037\135\046" +
    "\142\053\162\057\036\060\145\001\001\000\002\001\001" +
    "\000\004\100\272\001\001\000\020\012\273\014\057\043" +
    "\053\044\052\045\055\057\036\061\047\001\001\000\002" +
    "\001\001\000\004\051\275\001\001\000\054\003\276\004" +
    "\151\006\140\007\133\011\132\013\160\014\163\016\302" +
    "\023\143\024\152\025\301\026\305\027\137\034\141\037" +
    "\135\046\142\047\303\050\300\053\162\057\036\060\145" +
    "\001\001\000\044\004\200\006\140\007\133\011\132\013" +
    "\160\014\163\023\143\024\152\027\137\034\141\037\135" +
    "\046\142\047\316\050\317\053\162\057\036\060\145\001" +
    "\001\000\002\001\001\000\020\012\311\014\057\043\053" +
    "\044\052\045\055\057\036\061\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\307\004\151\006\140" +
    "\007\133\011\132\013\160\014\163\016\306\023\143\024" +
    "\152\027\137\034\141\037\135\046\142\053\162\057\036" +
    "\060\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\200\006\140\007\133\011\132" +
    "\013\160\014\163\023\143\024\152\027\137\034\141\037" +
    "\135\046\142\053\162\057\036\060\145\001\001\000\002" +
    "\001\001\000\004\051\312\001\001\000\054\003\276\004" +
    "\151\006\140\007\133\011\132\013\160\014\163\016\314" +
    "\023\143\024\152\025\313\026\315\027\137\034\141\037" +
    "\135\046\142\047\303\050\300\053\162\057\036\060\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\307\004\151\006\140\007\133\011\132" +
    "\013\160\014\163\016\325\023\143\024\152\027\137\034" +
    "\141\037\135\046\142\053\162\057\036\060\145\001\001" +
    "\000\020\012\320\014\057\043\053\044\052\045\055\057" +
    "\036\061\047\001\001\000\004\051\321\001\001\000\054" +
    "\003\276\004\151\006\140\007\133\011\132\013\160\014" +
    "\163\016\323\023\143\024\152\025\322\026\324\027\137" +
    "\034\141\037\135\046\142\047\303\050\300\053\162\057" +
    "\036\060\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\327\004" +
    "\151\006\140\007\133\011\132\013\160\014\163\023\143" +
    "\024\152\027\137\034\141\037\135\046\142\053\162\057" +
    "\036\060\145\001\001\000\040\004\200\006\140\007\133" +
    "\011\132\013\160\014\163\023\143\024\152\027\137\034" +
    "\141\037\135\046\142\053\162\057\036\060\145\001\001" +
    "\000\020\012\331\014\057\043\053\044\052\045\055\057" +
    "\036\061\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\334\001\001\000\002\001\001\000\020\012" +
    "\336\014\057\043\053\044\052\045\055\057\036\061\047" +
    "\001\001\000\002\001\001\000\006\007\340\013\160\001" +
    "\001\000\002\001\001\000\004\067\342\001\001\000\004" +
    "\010\343\001\001\000\002\001\001\000\004\070\345\001" +
    "\001\000\020\012\346\014\057\043\053\044\052\045\055" +
    "\057\036\061\047\001\001\000\002\001\001\000\004\013" +
    "\350\001\001\000\002\001\001\000\044\003\352\004\151" +
    "\006\140\007\133\011\132\013\160\014\163\021\353\023" +
    "\143\024\152\027\137\034\141\037\135\046\142\053\162" +
    "\057\036\060\145\001\001\000\040\004\200\006\140\007" +
    "\133\011\132\013\160\014\163\023\143\024\152\027\137" +
    "\034\141\037\135\046\142\053\162\057\036\060\145\001" +
    "\001\000\002\001\001\000\004\102\356\001\001\000\002" +
    "\001\001\000\004\061\357\001\001\000\006\013\213\036" +
    "\360\001\001\000\004\062\361\001\001\000\044\003\352" +
    "\004\151\006\140\007\133\011\132\013\160\014\163\021" +
    "\362\023\143\024\152\027\137\034\141\037\135\046\142" +
    "\053\162\057\036\060\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\365\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= BEGIN INSTSGLOBAL RW_end 
            {
              String RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(c2left,c2right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INI ::= BEGIN RW_end 
            {
              String RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(c2left,c2right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW3(c1left,c1right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGIN ::= RW_begin NT$0 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("BEGIN",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= MAIN_METHOD 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= INIT_ID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTGLOBAL ::= FUNCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INIT_ID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= ID_ASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= IF_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= SWITCH_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= LOOP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= NATIVES_FUNCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= RW_break 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= RW_return NT$1 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(stleft,stright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN_METHOD ::= RW_start NT$2 CALLFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("MAIN_METHOD",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              String RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW1(insleft,insright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(aleft,aright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(eqleft,eqright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INIT_ID ::= RW_insert NT$3 LIST_ID RW_as NT$4 TYPE RW_equ NT$5 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT_ID",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ID_ASIGN ::= LIST_ID NT$6 TK_prompt EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ID_ASIGN",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIST_ID ::= LIST_ID TK_comma IDS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LIST_ID",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LIST_ID ::= IDS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LIST_ID",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF_STRUCT ::= IF EXP THEN INST_IF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF_STRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_STRUCT ::= IF EXP THEN ELSEIF_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF_STRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_STRUCT ::= IF EXP THEN ELSE_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF_STRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSEIF_STRUCT ::= INSTRUCTIONS ELSEIF EXP THEN ELSEIF_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF_STRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSEIF_STRUCT ::= ELSEIF EXP THEN ELSEIF_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF_STRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSEIF_STRUCT ::= INSTRUCTIONS ELSEIF EXP THEN INST_IF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF_STRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSEIF_STRUCT ::= ELSEIF EXP THEN INST_IF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF_STRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSEIF_STRUCT ::= INSTRUCTIONS ELSEIF EXP THEN ELSE_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF_STRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSEIF_STRUCT ::= ELSEIF EXP THEN ELSE_STRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF_STRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST_IF ::= INSTRUCTIONS RW_endif 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_IF",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST_IF ::= RW_endif 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_IF",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE_STRUCT ::= INSTRUCTIONS ELSE INST_IF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSE_STRUCT",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE_STRUCT ::= ELSE INST_IF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSE_STRUCT",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SWITCH_STRUCT ::= SWITCHCOLOR CASE_BLOCK RW_endswitch 
            {
              String RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(edleft,edright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCH_STRUCT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SWITCH_STRUCT ::= SWITCHCOLOR RW_endswitch 
            {
              String RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(edleft,edright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCH_STRUCT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$7 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft,swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCHCOLOR ::= RW_switch NT$7 EXP RW_do 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHCOLOR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASE_BLOCK ::= CASE_LIST DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE_BLOCK",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASE_BLOCK ::= CASE_LIST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE_BLOCK",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASE_BLOCK ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE_BLOCK",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE_LIST ::= CASE_LIST CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE_LIST",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASE_LIST ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE_LIST",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASE ::= CASE1 EXP THEN INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE ::= CASE1 EXP THEN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEFAULT ::= ELSE THEN INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEFAULT ::= ELSE THEN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$8 ::= 
            {
              String RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW3(incleft,incright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOOP ::= FOR ID_ASIGN TO EXP RW_incr NT$8 EXP RW_do NT$9 INST_FOR 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOP",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-9)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$10 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOOP ::= FOR ID_ASIGN TO EXP RW_do NT$10 INST_FOR 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOP",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$11 ::= 
            {
              String RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whleft,whright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOOP ::= RW_while NT$11 EXP RW_do NT$12 INST_WHILE 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOP",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$13 ::= 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(uleft,uright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOOP ::= INST_REPEAT RW_until NT$13 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOP",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INST_FOR ::= INSTRUCTIONS RW_endfor 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(efleft,efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FOR",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_FOR ::= RW_endfor 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(efleft,efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FOR",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INST_WHILE ::= INSTRUCTIONS RW_endwhile 
            {
              String RESULT =null;
		int ewleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ewright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ew = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ewleft,ewright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_WHILE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INST_WHILE ::= RW_endwhile 
            {
              String RESULT =null;
		int ewleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ewright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ew = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ewleft,ewright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_WHILE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$14 ::= 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(rleft,rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_REPEAT ::= RW_repeat NT$14 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_REPEAT",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INST_REPEAT ::= RW_repeat 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(rleft,rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_REPEAT",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$15 ::= 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(pleft,pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCTION ::= FNC TYPE RW_params NT$15 COLORLPAR PARAMS COLORRPAR INST_FUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCTION ::= FNC TYPE INST_FUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$16 ::= 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(pleft,pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$16",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCTION ::= MTH RW_params NT$16 COLORLPAR PARAMS COLORRPAR INST_METH 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCTION ::= MTH INST_METH 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FUNCTION",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$17 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW1(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$17",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FNC ::= RW_func NT$17 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FNC",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$18 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW1(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$18",67, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MTH ::= RW_meth NT$18 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("MTH",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INST_FUNC ::= INSTRUCTIONS RW_endfunc 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft,efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FUNC",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INST_FUNC ::= RW_endfunc 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft,efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FUNC",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INST_METH ::= INSTRUCTIONS RW_endmeth 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft,efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_METH",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INST_METH ::= RW_endmeth 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft,efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_METH",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$19 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$19",68, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMS ::= PARAMS TK_comma IDS NT$19 TYPE 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PARAMS",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$20 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$20",69, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMS ::= IDS NT$20 TYPE 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PARAMS",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CALLFUNC ::= CALL COLORLPAR ARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CALLFUNC ::= CALL COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$21 ::= 
            {
              String RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(exleft,exright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$21",70, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CALL ::= RW_exec NT$21 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALL",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARGS ::= ARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGS",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGS",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$22 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.FNC(cleft,cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$22",71, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NATIVES_FUNCTION ::= RW_println NT$22 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NATIVES_FUNCTION",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$23 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.FNC(cleft,cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$23",72, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NATIVES_FUNCTION ::= RW_print NT$23 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NATIVES_FUNCTION",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPE ::= RW_num 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPE ::= RW_str 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= RW_bool 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IDS ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IDS ::= RW_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IDS ::= RW_and 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= TK_str 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(pleft,pright);  
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= TK_char 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(pleft,pright);    
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= TK_num 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(pleft,pright);  
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= TK_id 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(pleft,pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= RW_true 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(pleft,pright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= RW_false 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(pleft,pright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARITHMETICS ::= EXP RW_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARITHMETICS ::= EXP RW_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // RELATIONALS ::= EXP RW_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // RELATIONALS ::= EXP RW_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // RELATIONALS ::= EXP RW_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // RELATIONALS ::= EXP RW_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RELATIONALS ::= EXP RW_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RELATIONALS ::= EXP RW_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$24 ::= 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(oleft,oright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$24",73, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LOGICS ::= EXP RW_and NT$24 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$25 ::= 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(oleft,oright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$25",74, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LOGICS ::= EXP RW_or NT$25 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$26 ::= 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(oleft,oright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$26",75, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LOGICS ::= RW_not NT$26 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IF ::= RW_if 
            {
              String RESULT =null;
		int ifrleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ifrright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ifr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ifrleft,ifrright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IF",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ELSE ::= RW_else 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(elleft,elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSE",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // THEN ::= RW_then 
            {
              String RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String th = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(thleft,thright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("THEN",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ELSEIF ::= RW_elseif 
            {
              String RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(elifleft,elifright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIF",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE1 ::= RW_case 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(cleft,cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE1",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FOR ::= RW_for 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(fleft,fright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TO ::= RW_to 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(tleft,tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TO",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
