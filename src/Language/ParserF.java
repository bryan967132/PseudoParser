
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\071\002\000\002\052\005\000\002\003\004" +
    "\000\002\003\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\004\004\000\002" +
    "\004\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\072\002\000\002\014" +
    "\005\000\002\073\002\000\002\074\002\000\002\075\002" +
    "\000\002\017\013\000\002\021\005\000\002\021\003\000" +
    "\002\036\005\000\002\022\005\000\002\022\003\000\002" +
    "\024\006\000\002\024\006\000\002\024\006\000\002\053" +
    "\003\000\002\047\007\000\002\047\007\000\002\047\007" +
    "\000\002\047\006\000\002\047\006\000\002\047\006\000" +
    "\002\054\003\000\002\050\005\000\002\050\004\000\002" +
    "\040\004\000\002\040\003\000\002\025\005\000\002\025" +
    "\004\000\002\076\002\000\002\055\006\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\027\004\000" +
    "\002\027\003\000\002\030\006\000\002\030\005\000\002" +
    "\056\003\000\002\046\005\000\002\046\004\000\002\057" +
    "\003\000\002\060\003\000\002\077\002\000\002\031\007" +
    "\000\002\061\003\000\002\100\002\000\002\032\010\000" +
    "\002\032\005\000\002\062\003\000\002\101\002\000\002" +
    "\033\006\000\002\102\002\000\002\103\002\000\002\034" +
    "\010\000\002\104\002\000\002\035\006\000\002\043\004" +
    "\000\002\043\003\000\002\044\004\000\002\044\003\000" +
    "\002\105\002\000\002\045\005\000\002\045\003\000\002" +
    "\106\002\000\002\020\012\000\002\020\005\000\002\107" +
    "\002\000\002\020\011\000\002\020\004\000\002\110\002" +
    "\000\002\063\005\000\002\111\002\000\002\064\005\000" +
    "\002\041\004\000\002\041\003\000\002\042\004\000\002" +
    "\042\003\000\002\112\002\000\002\006\007\000\002\113" +
    "\002\000\002\006\005\000\002\013\006\000\002\013\005" +
    "\000\002\114\002\000\002\065\005\000\002\005\005\000" +
    "\002\005\003\000\002\016\004\000\002\066\003\000\002" +
    "\066\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\067\003\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\037\006\001\002\000\016\003\027\025" +
    "\025\040\016\041\022\055\024\056\020\001\002\000\004" +
    "\002\014\001\002\000\010\034\ufffe\035\ufffe\102\ufffe\001" +
    "\002\000\010\034\011\035\013\102\012\001\002\000\016" +
    "\003\ufffd\025\ufffd\040\ufffd\041\ufffd\055\ufffd\056\ufffd\001" +
    "\002\000\102\003\uff86\006\uff86\013\uff86\017\uff86\024\uff86" +
    "\025\uff86\026\uff86\034\uff86\035\uff86\040\uff86\041\uff86\042" +
    "\uff86\044\uff86\045\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\071\uff86\077\uff86\101\uff86" +
    "\102\uff86\001\002\000\102\003\uff87\006\uff87\013\uff87\017" +
    "\uff87\024\uff87\025\uff87\026\uff87\034\uff87\035\uff87\040\uff87" +
    "\041\uff87\042\uff87\044\uff87\045\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\071\uff87\077" +
    "\uff87\101\uff87\102\uff87\001\002\000\102\003\uff85\006\uff85" +
    "\013\uff85\017\uff85\024\uff85\025\uff85\026\uff85\034\uff85\035" +
    "\uff85\040\uff85\041\uff85\042\uff85\044\uff85\045\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85" +
    "\071\uff85\077\uff85\101\uff85\102\uff85\001\002\000\004\002" +
    "\001\001\002\000\014\060\326\061\330\062\324\063\325" +
    "\064\327\001\002\000\004\002\uffff\001\002\000\016\003" +
    "\ufff8\025\ufff8\040\ufff8\041\ufff8\055\ufff8\056\ufff8\001\002" +
    "\000\010\034\uffa1\035\uffa1\102\uffa1\001\002\000\016\003" +
    "\ufffb\025\ufffb\040\ufffb\041\ufffb\055\ufffb\056\ufffb\001\002" +
    "\000\010\034\uffe4\035\uffe4\102\uffe4\001\002\000\016\003" +
    "\ufff9\025\ufff9\040\ufff9\041\ufff9\055\ufff9\056\ufff9\001\002" +
    "\000\010\034\uff9f\035\uff9f\102\uff9f\001\002\000\004\057" +
    "\uffe6\001\002\000\016\003\ufffa\025\ufffa\040\ufffa\041\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\016\003\ufff7\025\ufff7\040" +
    "\ufff7\041\ufff7\055\ufff7\056\ufff7\001\002\000\016\003\027" +
    "\025\025\040\335\041\022\055\024\056\020\001\002\000" +
    "\050\003\057\006\033\013\043\017\042\024\036\026\055" +
    "\034\011\035\013\041\022\044\071\045\034\047\044\050" +
    "\045\051\061\052\070\053\064\054\056\057\063\102\012" +
    "\001\002\000\070\003\ufff1\004\ufff1\005\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1" +
    "\024\ufff1\026\ufff1\033\ufff1\034\ufff1\035\ufff1\041\ufff1\044" +
    "\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\057\ufff1\102\ufff1\001\002\000\004\077\uffa4\001" +
    "\002\000\030\036\uffca\057\uffca\067\uffca\070\uffca\073\uffca" +
    "\077\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\001" +
    "\002\000\046\003\057\013\310\017\042\024\036\026\055" +
    "\034\011\035\013\041\022\044\071\045\034\047\044\050" +
    "\045\051\061\052\070\053\064\054\056\057\063\102\012" +
    "\001\002\000\070\003\uffe8\004\uffe8\005\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\022\uffe8" +
    "\024\uffe8\026\uffe8\033\uffe8\034\uffe8\035\uffe8\041\uffe8\044" +
    "\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\057\uffe8\102\uffe8\001\002\000\070\003\ufff5\004" +
    "\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\022\ufff5\024\ufff5\026\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\041\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\057\ufff5\102\ufff5\001" +
    "\002\000\070\003\uffee\004\uffee\005\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\022\uffee\024" +
    "\uffee\026\uffee\033\uffee\034\uffee\035\uffee\041\uffee\044\uffee" +
    "\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\057\uffee\102\uffee\001\002\000\016\003\uffa2\025\uffa2" +
    "\040\uffa2\041\uffa2\055\uffa2\056\uffa2\001\002\000\030\036" +
    "\uff8e\057\uff8e\067\uff8e\070\uff8e\073\uff8e\077\uff8e\102\uff8e" +
    "\103\uff8e\104\uff8e\105\uff8e\106\uff8e\001\002\000\016\003" +
    "\uff9a\025\uff9a\040\uff9a\041\uff9a\055\uff9a\056\uff9a\001\002" +
    "\000\010\034\uffba\035\uffba\102\uffba\001\002\000\030\036" +
    "\uffb3\057\uffb3\067\uffb3\070\uffb3\073\uffb3\077\uffb3\102\uffb3" +
    "\103\uffb3\104\uffb3\105\uffb3\106\uffb3\001\002\000\070\003" +
    "\ufff4\004\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\022\ufff4\024\ufff4\026\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\057\ufff4\102" +
    "\ufff4\001\002\000\070\003\ufff0\004\ufff0\005\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\022" +
    "\ufff0\024\ufff0\026\ufff0\033\ufff0\034\ufff0\035\ufff0\041\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\057\ufff0\102\ufff0\001\002\000\004\022\275" +
    "\001\002\000\004\077\111\001\002\000\006\071\262\101" +
    "\263\001\002\000\030\036\114\057\063\067\112\070\075" +
    "\073\101\077\111\102\077\103\106\104\107\105\100\106" +
    "\076\001\002\000\006\071\uffdc\101\uffdc\001\002\000\030" +
    "\036\uff8d\057\uff8d\067\uff8d\070\uff8d\073\uff8d\077\uff8d\102" +
    "\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\001\002\000\070" +
    "\003\uffe9\004\uffe9\005\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\022\uffe9\024\uffe9\026\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\041\uffe9\044\uffe9\045\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057\uffe9" +
    "\102\uffe9\001\002\000\070\003\uffe7\004\uffe7\005\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\022\uffe7\024\uffe7\026\uffe7\033\uffe7\034\uffe7\035\uffe7\041" +
    "\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\057\uffe7\102\uffe7\001\002\000\070\003" +
    "\uffed\004\uffed\005\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\022\uffed\024\uffed\026\uffed\033" +
    "\uffed\034\uffed\035\uffed\041\uffed\044\uffed\045\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\057\uffed\102" +
    "\uffed\001\002\000\046\003\uffaa\017\uffaa\022\uffa8\024\uffaa" +
    "\026\uffaa\034\uffaa\035\uffaa\041\uffaa\044\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa" +
    "\102\uffaa\001\002\000\010\034\011\035\013\102\012\001" +
    "\002\000\010\034\uff93\035\uff93\102\uff93\001\002\000\070" +
    "\003\uffea\004\uffea\005\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\022\uffea\024\uffea\026\uffea" +
    "\033\uffea\034\uffea\035\uffea\041\uffea\044\uffea\045\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea" +
    "\102\uffea\001\002\000\070\003\ufff3\004\ufff3\005\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\022\ufff3\024\ufff3\026\ufff3\033\ufff3\034\ufff3\035\ufff3\041" +
    "\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\057\ufff3\102\ufff3\001\002\000\070\003" +
    "\uffef\004\uffef\005\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\022\uffef\024\uffef\026\uffef\033" +
    "\uffef\034\uffef\035\uffef\041\uffef\044\uffef\045\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\057\uffef\102" +
    "\uffef\001\002\000\070\003\ufff2\004\ufff2\005\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\022" +
    "\ufff2\024\ufff2\026\ufff2\033\ufff2\034\ufff2\035\ufff2\041\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\057\ufff2\102\ufff2\001\002\000\030\036\114" +
    "\057\063\067\112\070\075\073\101\077\111\102\077\103" +
    "\106\104\107\105\100\106\076\001\002\000\030\036\uffd8" +
    "\057\uffd8\067\uffd8\070\uffd8\073\uffd8\077\uffd8\102\uffd8\103" +
    "\uffd8\104\uffd8\105\uffd8\106\uffd8\001\002\000\010\004\160" +
    "\014\220\033\221\001\002\000\030\036\114\057\063\067" +
    "\112\070\075\073\101\077\111\102\077\103\106\104\107" +
    "\105\100\106\076\001\002\000\070\003\uffec\004\uffec\005" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\022\uffec\024\uffec\026\uffec\033\uffec\034\uffec\035" +
    "\uffec\041\uffec\044\uffec\045\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\057\uffec\102\uffec\001\002\000" +
    "\144\003\uff7a\004\uff7a\005\uff7a\007\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\040" +
    "\uff7a\041\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\065\uff7a\066\uff7a\072\uff7a\073\uff7a\075\uff7a" +
    "\076\uff7a\100\uff7a\101\uff7a\102\uff7a\001\002\000\144\003" +
    "\uff7e\004\uff7e\005\uff7e\007\uff7e\011\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\040\uff7e\041" +
    "\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\065\uff7e\066\uff7e\072\uff7e\073\uff7e\075\uff7e\076\uff7e" +
    "\100\uff7e\101\uff7e\102\uff7e\001\002\000\144\003\uff80\004" +
    "\uff80\005\uff80\007\uff80\011\uff80\012\uff80\013\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80" +
    "\032\uff80\033\uff80\034\uff80\035\uff80\040\uff80\041\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\065" +
    "\uff80\066\uff80\072\uff80\073\uff80\075\uff80\076\uff80\100\uff80" +
    "\101\uff80\102\uff80\001\002\000\144\003\uff7f\004\uff7f\005" +
    "\uff7f\007\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\040\uff7f\041\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\065\uff7f\066" +
    "\uff7f\072\uff7f\073\uff7f\075\uff7f\076\uff7f\100\uff7f\101\uff7f" +
    "\102\uff7f\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\040\020\127\021\122\027\130\030" +
    "\132\031\126\032\133\034\117\035\120\043\152\065\121" +
    "\066\124\072\131\073\116\075\123\076\125\001\002\000" +
    "\144\003\uff83\004\uff83\005\uff83\007\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\040" +
    "\uff83\041\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\065\uff83\066\uff83\072\uff83\073\uff83\075\uff83" +
    "\076\uff83\100\uff83\101\uff83\102\uff83\001\002\000\144\003" +
    "\uff84\004\uff84\005\uff84\007\uff84\011\uff84\012\uff84\013\uff84" +
    "\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\040\uff84\041" +
    "\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057" +
    "\uff84\065\uff84\066\uff84\072\uff84\073\uff84\075\uff84\076\uff84" +
    "\100\uff84\101\uff84\102\uff84\001\002\000\144\003\uff7d\004" +
    "\uff7d\005\uff7d\007\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d" +
    "\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\033\uff7d\034\uff7d\035\uff7d\040\uff7d\041\uff7d\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\065" +
    "\uff7d\066\uff7d\072\uff7d\073\uff7d\075\uff7d\076\uff7d\100\uff7d" +
    "\101\uff7d\102\uff7d\001\002\000\144\003\uff7c\004\uff7c\005" +
    "\uff7c\007\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\040\uff7c\041\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\065\uff7c\066" +
    "\uff7c\072\uff7c\073\uff7c\075\uff7c\076\uff7c\100\uff7c\101\uff7c" +
    "\102\uff7c\001\002\000\144\003\uff82\004\uff82\005\uff82\007" +
    "\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025" +
    "\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82" +
    "\034\uff82\035\uff82\040\uff82\041\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\065\uff82\066\uff82\072" +
    "\uff82\073\uff82\075\uff82\076\uff82\100\uff82\101\uff82\102\uff82" +
    "\001\002\000\036\034\uff68\035\uff68\036\uff68\057\uff68\067" +
    "\uff68\070\uff68\073\uff68\077\uff68\100\uff68\102\uff68\103\uff68" +
    "\104\uff68\105\uff68\106\uff68\001\002\000\144\003\uff7b\004" +
    "\uff7b\005\uff7b\007\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\040\uff7b\041\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b" +
    "\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\065" +
    "\uff7b\066\uff7b\072\uff7b\073\uff7b\075\uff7b\076\uff7b\100\uff7b" +
    "\101\uff7b\102\uff7b\001\002\000\144\003\uff81\004\uff81\005" +
    "\uff81\007\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81" +
    "\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\040\uff81\041\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\065\uff81\066" +
    "\uff81\072\uff81\073\uff81\075\uff81\076\uff81\100\uff81\101\uff81" +
    "\102\uff81\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\144\003\uff69\004\uff69\005\uff69\007" +
    "\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\127\021\122\022\uff69\023\uff69\024\uff69\025" +
    "\uff69\026\uff69\027\130\030\132\031\126\032\133\033\uff69" +
    "\034\uff69\035\uff69\040\uff69\041\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69" +
    "\054\uff69\055\uff69\056\uff69\057\uff69\065\121\066\124\072" +
    "\131\073\116\075\123\076\125\100\uff69\101\uff69\102\uff69" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\030\036\114\057\063\067\112\070\075\073" +
    "\101\077\111\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\144\003\uff70\004\uff70\005\uff70\007\uff70\011" +
    "\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70" +
    "\020\127\021\122\022\uff70\023\uff70\024\uff70\025\uff70\026" +
    "\uff70\027\130\030\132\031\uff70\032\uff70\033\uff70\034\uff70" +
    "\035\uff70\040\uff70\041\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70" +
    "\055\uff70\056\uff70\057\uff70\065\121\066\124\072\131\073" +
    "\116\075\123\076\125\100\uff70\101\uff70\102\uff70\001\002" +
    "\000\144\003\uff6d\004\uff6d\005\uff6d\007\uff6d\011\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047" +
    "\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d" +
    "\056\uff6d\057\uff6d\065\121\066\124\072\131\073\116\075" +
    "\123\076\125\100\uff6d\101\uff6d\102\uff6d\001\002\000\144" +
    "\003\uff78\004\uff78\005\uff78\007\uff78\011\uff78\012\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030" +
    "\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78\040\uff78" +
    "\041\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78" +
    "\057\uff78\065\121\066\124\072\uff78\073\uff78\075\123\076" +
    "\125\100\uff78\101\uff78\102\uff78\001\002\000\144\003\uff6c" +
    "\004\uff6c\005\uff6c\007\uff6c\011\uff6c\012\uff6c\013\uff6c\014" +
    "\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c" +
    "\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031" +
    "\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\040\uff6c\041\uff6c" +
    "\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\065\121\066\124\072\131\073\116\075\123\076\125\100" +
    "\uff6c\101\uff6c\102\uff6c\001\002\000\144\003\uff6e\004\uff6e" +
    "\005\uff6e\007\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015" +
    "\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e" +
    "\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\040\uff6e\041\uff6e\043\uff6e" +
    "\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\065\121" +
    "\066\124\072\131\073\116\075\123\076\125\100\uff6e\101" +
    "\uff6e\102\uff6e\001\002\000\144\003\uff71\004\uff71\005\uff71" +
    "\007\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016" +
    "\uff71\017\uff71\020\127\021\122\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\026\uff71\027\130\030\132\031\uff71\032\uff71\033" +
    "\uff71\034\uff71\035\uff71\040\uff71\041\uff71\043\uff71\044\uff71" +
    "\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053" +
    "\uff71\054\uff71\055\uff71\056\uff71\057\uff71\065\121\066\124" +
    "\072\131\073\116\075\123\076\125\100\uff71\101\uff71\102" +
    "\uff71\001\002\000\144\003\uff75\004\uff75\005\uff75\007\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017" +
    "\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\040\uff75\041\uff75\043\uff75\044\uff75\045\uff75" +
    "\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054" +
    "\uff75\055\uff75\056\uff75\057\uff75\065\121\066\uff75\072\uff75" +
    "\073\uff75\075\uff75\076\uff75\100\uff75\101\uff75\102\uff75\001" +
    "\002\000\144\003\uff73\004\uff73\005\uff73\007\uff73\011\uff73" +
    "\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020" +
    "\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\040\uff73\041\uff73\043\uff73\044\uff73\045\uff73\046\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\065\121\066\uff73\072\uff73\073\uff73" +
    "\075\uff73\076\uff73\100\uff73\101\uff73\102\uff73\001\002\000" +
    "\144\003\uff76\004\uff76\005\uff76\007\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021" +
    "\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\040" +
    "\uff76\041\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\065\121\066\uff76\072\uff76\073\uff76\075\uff76" +
    "\076\uff76\100\uff76\101\uff76\102\uff76\001\002\000\144\003" +
    "\uff6f\004\uff6f\005\uff6f\007\uff6f\011\uff6f\012\uff6f\013\uff6f" +
    "\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f" +
    "\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\040\uff6f\041" +
    "\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f" +
    "\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057" +
    "\uff6f\065\121\066\124\072\131\073\116\075\123\076\125" +
    "\100\uff6f\101\uff6f\102\uff6f\001\002\000\142\003\uff74\004" +
    "\uff74\005\uff74\007\uff74\011\uff74\012\uff74\013\uff74\014\uff74" +
    "\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\040\uff74\041\uff74\043" +
    "\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74" +
    "\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\066" +
    "\uff74\072\uff74\073\uff74\075\uff74\076\uff74\100\uff74\101\uff74" +
    "\102\uff74\001\002\000\144\003\uff6b\004\uff6b\005\uff6b\007" +
    "\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b" +
    "\017\uff6b\020\127\021\122\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\026\uff6b\027\130\030\132\031\126\032\133\033\uff6b" +
    "\034\uff6b\035\uff6b\040\uff6b\041\uff6b\043\uff6b\044\uff6b\045" +
    "\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b" +
    "\054\uff6b\055\uff6b\056\uff6b\057\uff6b\065\121\066\124\072" +
    "\131\073\116\075\123\076\125\100\uff6b\101\uff6b\102\uff6b" +
    "\001\002\000\144\003\uff6a\004\uff6a\005\uff6a\007\uff6a\011" +
    "\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a" +
    "\020\127\021\122\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\130\030\132\031\126\032\133\033\uff6a\034\uff6a" +
    "\035\120\040\uff6a\041\uff6a\043\uff6a\044\uff6a\045\uff6a\046" +
    "\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a" +
    "\055\uff6a\056\uff6a\057\uff6a\065\121\066\124\072\131\073" +
    "\116\075\123\076\125\100\uff6a\101\uff6a\102\uff6a\001\002" +
    "\000\144\003\uff77\004\uff77\005\uff77\007\uff77\011\uff77\012" +
    "\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77" +
    "\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77" +
    "\040\uff77\041\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047" +
    "\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77" +
    "\056\uff77\057\uff77\065\121\066\124\072\uff77\073\uff77\075" +
    "\123\076\125\100\uff77\101\uff77\102\uff77\001\002\000\056" +
    "\003\uffbd\004\uffbd\005\uffbd\014\uffbd\016\uffbd\017\uffbd\024" +
    "\uffbd\026\uffbd\033\uffbd\034\uffbd\035\uffbd\041\uffbd\044\uffbd" +
    "\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\057\uffbd\102\uffbd\001\002\000\052\003\057\004\160" +
    "\005\162\016\156\017\042\024\036\026\055\034\011\035" +
    "\013\041\022\044\071\045\034\047\044\050\045\051\061" +
    "\052\070\053\064\054\056\057\063\102\012\001\002\000" +
    "\070\003\uffd9\004\uffd9\005\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9\026" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\041\uffd9\044\uffd9\045\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\057" +
    "\uffd9\102\uffd9\001\002\000\052\003\057\004\160\005\162" +
    "\016\170\017\042\024\036\026\055\034\011\035\013\041" +
    "\022\044\071\045\034\047\044\050\045\051\061\052\070" +
    "\053\064\054\056\057\063\102\012\001\002\000\070\003" +
    "\uffcd\004\uffcd\005\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\022\uffcd\024\uffcd\026\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\041\uffcd\044\uffcd\045\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\057\uffcd\102" +
    "\uffcd\001\002\000\070\003\uffda\004\uffda\005\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022" +
    "\uffda\024\uffda\026\uffda\033\uffda\034\uffda\035\uffda\041\uffda" +
    "\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\057\uffda\102\uffda\001\002\000\050\003\uffbe" +
    "\016\uffbe\017\uffbe\024\uffbe\026\uffbe\034\uffbe\035\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\057\uffbe\102\uffbe\001\002\000" +
    "\030\036\114\057\063\067\112\070\075\073\101\077\111" +
    "\102\077\103\106\104\107\105\100\106\076\001\002\000" +
    "\030\036\uffd1\057\uffd1\067\uffd1\070\uffd1\073\uffd1\077\uffd1" +
    "\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\001\002\000" +
    "\046\003\057\016\156\017\042\024\036\026\055\034\011" +
    "\035\013\041\022\044\071\045\034\047\044\050\045\051" +
    "\061\052\070\053\064\054\056\057\063\102\012\001\002" +
    "\000\070\003\uffdb\004\uffdb\005\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb\024\uffdb" +
    "\026\uffdb\033\uffdb\034\uffdb\035\uffdb\041\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\057\uffdb\102\uffdb\001\002\000\046\003\057\016\170\017" +
    "\042\024\036\026\055\034\011\035\013\041\022\044\071" +
    "\045\034\047\044\050\045\051\061\052\070\053\064\054" +
    "\056\057\063\102\012\001\002\000\070\003\uffcf\004\uffcf" +
    "\005\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\022\uffcf\024\uffcf\026\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\057\uffcf\102\uffcf\001\002" +
    "\000\070\003\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\024\ufff6" +
    "\026\ufff6\033\ufff6\034\ufff6\035\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\057\ufff6\102\ufff6\001\002\000\070\003\uffce\004\uffce\005" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\022\uffce\024\uffce\026\uffce\033\uffce\034\uffce\035" +
    "\uffce\041\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\057\uffce\102\uffce\001\002\000" +
    "\040\020\127\021\122\027\130\030\132\031\126\032\133" +
    "\034\117\035\120\043\152\065\121\066\124\072\131\073" +
    "\116\075\123\076\125\001\002\000\052\003\057\004\160" +
    "\005\162\016\156\017\042\024\036\026\055\034\011\035" +
    "\013\041\022\044\071\045\034\047\044\050\045\051\061" +
    "\052\070\053\064\054\056\057\063\102\012\001\002\000" +
    "\070\003\uffd2\004\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\022\uffd2\024\uffd2\026" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2\044\uffd2\045\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\057" +
    "\uffd2\102\uffd2\001\002\000\070\003\uffd3\004\uffd3\005\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\022\uffd3\024\uffd3\026\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\041\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\057\uffd3\102\uffd3\001\002\000\070" +
    "\003\uffd4\004\uffd4\005\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\024\uffd4\026\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\041\uffd4\044\uffd4\045\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\057\uffd4" +
    "\102\uffd4\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\046\003\057\016\156\017\042\024" +
    "\036\026\055\034\011\035\013\041\022\044\071\045\034" +
    "\047\044\050\045\051\061\052\070\053\064\054\056\057" +
    "\063\102\012\001\002\000\070\003\uffd0\004\uffd0\005\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\022\uffd0\024\uffd0\026\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\057\uffd0\102\uffd0\001\002\000\040" +
    "\020\127\021\122\027\130\030\132\031\126\032\133\034" +
    "\117\035\120\043\152\065\121\066\124\072\131\073\116" +
    "\075\123\076\125\001\002\000\052\003\057\004\160\005" +
    "\162\016\156\017\042\024\036\026\055\034\011\035\013" +
    "\041\022\044\071\045\034\047\044\050\045\051\061\052" +
    "\070\053\064\054\056\057\063\102\012\001\002\000\070" +
    "\003\uffd5\004\uffd5\005\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\024\uffd5\026\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\041\uffd5\044\uffd5\045\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\057\uffd5" +
    "\102\uffd5\001\002\000\070\003\uffd6\004\uffd6\005\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\022\uffd6\024\uffd6\026\uffd6\033\uffd6\034\uffd6\035\uffd6\041" +
    "\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\057\uffd6\102\uffd6\001\002\000\070\003" +
    "\uffd7\004\uffd7\005\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\022\uffd7\024\uffd7\026\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\057\uffd7\102" +
    "\uffd7\001\002\000\040\020\127\021\122\027\130\030\132" +
    "\031\126\032\133\034\117\035\120\065\121\066\124\072" +
    "\131\073\116\075\123\076\125\100\207\001\002\000\144" +
    "\003\uff67\004\uff67\005\uff67\007\uff67\011\uff67\012\uff67\013" +
    "\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67\021\uff67" +
    "\022\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030" +
    "\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\040\uff67" +
    "\041\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67" +
    "\057\uff67\065\uff67\066\uff67\072\uff67\073\uff67\075\uff67\076" +
    "\uff67\100\uff67\101\uff67\102\uff67\001\002\000\144\003\uff79" +
    "\004\uff79\005\uff79\007\uff79\011\uff79\012\uff79\013\uff79\014" +
    "\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79" +
    "\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031" +
    "\uff79\032\uff79\033\uff79\034\uff79\035\uff79\040\uff79\041\uff79" +
    "\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051" +
    "\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79" +
    "\065\uff79\066\uff79\072\uff79\073\uff79\075\uff79\076\uff79\100" +
    "\uff79\101\uff79\102\uff79\001\002\000\144\003\uff72\004\uff72" +
    "\005\uff72\007\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015" +
    "\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72" +
    "\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032" +
    "\uff72\033\uff72\034\uff72\035\uff72\040\uff72\041\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\065\uff72" +
    "\066\uff72\072\uff72\073\uff72\075\uff72\076\uff72\100\uff72\101" +
    "\uff72\102\uff72\001\002\000\004\043\152\001\002\000\030" +
    "\036\114\057\063\067\112\070\075\073\101\077\111\102" +
    "\077\103\106\104\107\105\100\106\076\001\002\000\004" +
    "\014\uffc6\001\002\000\010\004\160\014\uffc7\033\221\001" +
    "\002\000\004\014\222\001\002\000\010\004\uffc4\014\uffc4" +
    "\033\uffc4\001\002\000\070\003\uffcb\004\uffcb\005\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\022\uffcb\024\uffcb\026\uffcb\033\uffcb\034\uffcb\035\uffcb\041" +
    "\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\057\uffcb\102\uffcb\001\002\000\030\036" +
    "\uffc1\057\uffc1\067\uffc1\070\uffc1\073\uffc1\077\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\001\002\000\070\003" +
    "\uffcc\004\uffcc\005\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\022\uffcc\024\uffcc\026\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\041\uffcc\044\uffcc\045\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\057\uffcc\102" +
    "\uffcc\001\002\000\004\014\uffc8\001\002\000\010\004\uffc5" +
    "\014\uffc5\033\uffc5\001\002\000\040\020\127\021\122\027" +
    "\130\030\132\031\126\032\133\034\117\035\120\043\152" +
    "\065\121\066\124\072\131\073\116\075\123\076\125\001" +
    "\002\000\052\003\057\004\uffc2\014\uffc2\017\042\024\036" +
    "\026\055\033\uffc2\034\011\035\013\041\022\044\071\045" +
    "\034\047\044\050\045\051\061\052\070\053\064\054\056" +
    "\057\063\102\012\001\002\000\052\003\057\004\uffc3\014" +
    "\uffc3\017\042\024\036\026\055\033\uffc3\034\011\035\013" +
    "\041\022\044\071\045\034\047\044\050\045\051\061\052" +
    "\070\053\064\054\056\057\063\102\012\001\002\000\046" +
    "\003\057\014\uffbf\017\042\024\036\026\055\034\011\035" +
    "\013\041\022\044\071\045\034\047\044\050\045\051\061" +
    "\052\070\053\064\054\056\057\063\102\012\001\002\000" +
    "\046\003\057\014\uffc0\017\042\024\036\026\055\034\011" +
    "\035\013\041\022\044\071\045\034\047\044\050\045\051" +
    "\061\052\070\053\064\054\056\057\063\102\012\001\002" +
    "\000\120\003\uffeb\004\uffeb\005\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\127\021\122" +
    "\022\uffeb\024\uffeb\026\uffeb\027\130\030\132\031\126\032" +
    "\133\033\uffeb\034\117\035\120\041\uffeb\044\uffeb\045\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\057" +
    "\uffeb\065\121\066\124\072\131\073\116\075\123\076\125" +
    "\102\uffeb\001\002\000\010\034\011\035\013\102\012\001" +
    "\002\000\004\077\uff92\001\002\000\004\071\uffb5\001\002" +
    "\000\004\023\246\001\002\000\004\046\240\001\002\000" +
    "\046\003\uffbc\015\uffbc\017\uffbc\024\uffbc\026\uffbc\034\uffbc" +
    "\035\uffbc\041\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\057\uffbc\102\uffbc\001\002" +
    "\000\046\003\057\015\243\017\042\024\036\026\055\034" +
    "\011\035\013\041\022\044\071\045\034\047\044\050\045" +
    "\051\061\052\070\053\064\054\056\057\063\102\012\001" +
    "\002\000\046\003\057\015\245\017\042\024\036\026\055" +
    "\034\011\035\013\041\022\044\071\045\034\047\044\050" +
    "\045\051\061\052\070\053\064\054\056\057\063\102\012" +
    "\001\002\000\070\003\uffad\004\uffad\005\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\022\uffad" +
    "\024\uffad\026\uffad\033\uffad\034\uffad\035\uffad\041\uffad\044" +
    "\uffad\045\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\057\uffad\102\uffad\001\002\000\070\003\uffbb\004" +
    "\uffbb\005\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\022\uffbb\024\uffbb\026\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\041\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\057\uffbb\102\uffbb\001" +
    "\002\000\070\003\uffae\004\uffae\005\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\022\uffae\024" +
    "\uffae\026\uffae\033\uffae\034\uffae\035\uffae\041\uffae\044\uffae" +
    "\045\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\057\uffae\102\uffae\001\002\000\030\036\uffb6\057\uffb6" +
    "\067\uffb6\070\uffb6\073\uffb6\077\uffb6\102\uffb6\103\uffb6\104" +
    "\uffb6\105\uffb6\106\uffb6\001\002\000\030\036\114\057\063" +
    "\067\112\070\075\073\101\077\111\102\077\103\106\104" +
    "\107\105\100\106\076\001\002\000\042\007\251\020\127" +
    "\021\122\027\130\030\132\031\126\032\133\034\117\035" +
    "\120\046\uffb7\065\121\066\124\072\131\073\116\075\123" +
    "\076\125\001\002\000\030\036\uffb9\057\uffb9\067\uffb9\070" +
    "\uffb9\073\uffb9\077\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\040\020\127\021\122\027\130\030" +
    "\132\031\126\032\133\034\117\035\120\046\uffb8\065\121" +
    "\066\124\072\131\073\116\075\123\076\125\001\002\000" +
    "\004\071\255\001\002\000\030\036\114\057\063\067\112" +
    "\070\075\073\101\077\111\102\077\103\106\104\107\105" +
    "\100\106\076\001\002\000\040\020\127\021\122\023\uffb4" +
    "\027\130\030\132\031\126\032\133\034\117\035\120\065" +
    "\121\066\124\072\131\073\116\075\123\076\125\001\002" +
    "\000\044\003\057\017\042\024\036\026\055\034\011\035" +
    "\013\041\022\044\071\045\034\047\044\050\045\051\061" +
    "\052\070\053\064\054\056\057\063\102\012\001\002\000" +
    "\046\003\057\017\042\022\uffa9\024\036\026\055\034\011" +
    "\035\013\041\022\044\071\045\034\047\044\050\045\051" +
    "\061\052\070\053\064\054\056\057\063\102\012\001\002" +
    "\000\120\003\uff8f\004\uff8f\005\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\127\021\122" +
    "\022\uff8f\024\uff8f\026\uff8f\027\130\030\132\031\126\032" +
    "\133\033\uff8f\034\117\035\120\041\uff8f\044\uff8f\045\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\057" +
    "\uff8f\065\121\066\124\072\131\073\116\075\123\076\125" +
    "\102\uff8f\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\010\034\011\035\013\102\012\001" +
    "\002\000\006\071\uffdd\101\uffdd\001\002\000\120\003\uffde" +
    "\004\uffde\005\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\127\021\122\022\uffde\024\uffde" +
    "\026\uffde\027\130\030\132\031\126\032\133\033\uffde\034" +
    "\117\035\120\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\057\uffde\065\121\066" +
    "\124\072\131\073\116\075\123\076\125\102\uffde\001\002" +
    "\000\032\036\114\057\063\067\112\070\075\073\101\077" +
    "\111\100\207\102\077\103\106\104\107\105\100\106\076" +
    "\001\002\000\006\100\207\101\273\001\002\000\144\003" +
    "\uff94\004\uff94\005\uff94\007\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\040\uff94\041" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057" +
    "\uff94\065\uff94\066\uff94\072\uff94\073\uff94\075\uff94\076\uff94" +
    "\100\uff94\101\uff94\102\uff94\001\002\000\042\020\127\021" +
    "\122\027\130\030\132\031\126\032\133\034\117\035\120" +
    "\065\121\066\124\072\131\073\116\075\123\076\125\100" +
    "\uff90\101\uff90\001\002\000\144\003\uff95\004\uff95\005\uff95" +
    "\007\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\040\uff95\041\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\057\uff95\065\uff95\066\uff95" +
    "\072\uff95\073\uff95\075\uff95\076\uff95\100\uff95\101\uff95\102" +
    "\uff95\001\002\000\030\036\114\057\063\067\112\070\075" +
    "\073\101\077\111\102\077\103\106\104\107\105\100\106" +
    "\076\001\002\000\042\020\127\021\122\027\130\030\132" +
    "\031\126\032\133\034\117\035\120\065\121\066\124\072" +
    "\131\073\116\075\123\076\125\100\uff91\101\uff91\001\002" +
    "\000\030\036\uffb0\057\uffb0\067\uffb0\070\uffb0\073\uffb0\077" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002" +
    "\000\030\036\114\057\063\067\112\070\075\073\101\077" +
    "\111\102\077\103\106\104\107\105\100\106\076\001\002" +
    "\000\120\003\uffaf\004\uffaf\005\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\127\021\122" +
    "\022\uffaf\024\uffaf\026\uffaf\027\130\030\132\031\126\032" +
    "\133\033\uffaf\034\117\035\120\041\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\057" +
    "\uffaf\065\121\066\124\072\131\073\116\075\123\076\125" +
    "\102\uffaf\001\002\000\030\036\114\057\063\067\112\070" +
    "\075\073\101\077\111\102\077\103\106\104\107\105\100" +
    "\106\076\001\002\000\040\020\127\021\122\027\130\030" +
    "\132\031\126\032\133\034\117\035\120\046\302\065\121" +
    "\066\124\072\131\073\116\075\123\076\125\001\002\000" +
    "\046\003\uffb2\011\uffb2\017\uffb2\024\uffb2\026\uffb2\034\uffb2" +
    "\035\uffb2\041\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\102\uffb2\001\002" +
    "\000\046\003\057\011\305\017\042\024\036\026\055\034" +
    "\011\035\013\041\022\044\071\045\034\047\044\050\045" +
    "\051\061\052\070\053\064\054\056\057\063\102\012\001" +
    "\002\000\046\003\057\011\307\017\042\024\036\026\055" +
    "\034\011\035\013\041\022\044\071\045\034\047\044\050" +
    "\045\051\061\052\070\053\064\054\056\057\063\102\012" +
    "\001\002\000\070\003\uffab\004\uffab\005\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\022\uffab" +
    "\024\uffab\026\uffab\033\uffab\034\uffab\035\uffab\041\uffab\044" +
    "\uffab\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\057\uffab\102\uffab\001\002\000\070\003\uffb1\004" +
    "\uffb1\005\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\022\uffb1\024\uffb1\026\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\041\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\057\uffb1\102\uffb1\001" +
    "\002\000\070\003\uffac\004\uffac\005\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022\uffac\024" +
    "\uffac\026\uffac\033\uffac\034\uffac\035\uffac\041\uffac\044\uffac" +
    "\045\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\057\uffac\102\uffac\001\002\000\016\003\uff9b\025\uff9b" +
    "\040\uff9b\041\uff9b\055\uff9b\056\uff9b\001\002\000\030\036" +
    "\114\057\063\067\112\070\075\073\101\077\111\102\077" +
    "\103\106\104\107\105\100\106\076\001\002\000\040\020" +
    "\127\021\122\027\130\030\132\031\126\032\133\034\117" +
    "\035\120\046\313\065\121\066\124\072\131\073\116\075" +
    "\123\076\125\001\002\000\010\004\uffc9\014\uffc9\033\uffc9" +
    "\001\002\000\004\077\111\001\002\000\010\034\011\035" +
    "\013\102\012\001\002\000\014\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\064\uff97\001\002\000\006\100\207\101\321\001" +
    "\002\000\046\003\057\013\043\017\042\024\036\026\055" +
    "\034\011\035\013\041\022\044\071\045\034\047\044\050" +
    "\045\051\061\052\070\053\064\054\056\057\063\102\012" +
    "\001\002\000\010\034\011\035\013\102\012\001\002\000" +
    "\014\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\001\002" +
    "\000\014\060\326\061\330\062\324\063\325\064\327\001" +
    "\002\000\056\003\uff8c\006\uff8c\010\uff8c\012\uff8c\017\uff8c" +
    "\024\uff8c\026\uff8c\034\uff8c\035\uff8c\041\uff8c\044\uff8c\045" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\057\uff8c\100\uff8c\101\uff8c\102\uff8c\001\002\000\056\003" +
    "\uff8a\006\uff8a\010\uff8a\012\uff8a\017\uff8a\024\uff8a\026\uff8a" +
    "\034\uff8a\035\uff8a\041\uff8a\044\uff8a\045\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\057\uff8a\100\uff8a" +
    "\101\uff8a\102\uff8a\001\002\000\056\003\uff8b\006\uff8b\010" +
    "\uff8b\012\uff8b\017\uff8b\024\uff8b\026\uff8b\034\uff8b\035\uff8b" +
    "\041\uff8b\044\uff8b\045\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\057\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\001\002\000\056\003\uff89\006\uff89\010\uff89\012\uff89\017" +
    "\uff89\024\uff89\026\uff89\034\uff89\035\uff89\041\uff89\044\uff89" +
    "\045\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\057\uff89\100\uff89\101\uff89\102\uff89\001\002\000\056" +
    "\003\uff88\006\uff88\010\uff88\012\uff88\017\uff88\024\uff88\026" +
    "\uff88\034\uff88\035\uff88\041\uff88\044\uff88\045\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\057\uff88\100" +
    "\uff88\101\uff88\102\uff88\001\002\000\006\100\uff98\101\uff98" +
    "\001\002\000\016\003\uffa3\025\uffa3\040\uffa3\041\uffa3\055" +
    "\uffa3\056\uffa3\001\002\000\014\060\326\061\330\062\324" +
    "\063\325\064\327\001\002\000\006\100\uff96\101\uff96\001" +
    "\002\000\004\002\000\001\002\000\016\003\ufffc\025\ufffc" +
    "\040\ufffc\041\ufffc\055\ufffc\056\ufffc\001\002\000\004\057" +
    "\063\001\002\000\016\003\uffe5\025\uffe5\040\uffe5\041\uffe5" +
    "\055\uffe5\056\uffe5\001\002\000\010\034\011\035\013\102" +
    "\012\001\002\000\050\003\uff9e\006\uff9e\013\uff9e\017\uff9e" +
    "\024\uff9e\026\uff9e\034\uff9e\035\uff9e\041\uff9e\044\uff9e\045" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\057\uff9e\102\uff9e\001\002\000\010\034\011\035\013\102" +
    "\012\001\002\000\006\042\uffdf\101\uffdf\001\002\000\006" +
    "\042\346\101\347\001\002\000\014\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\001\002\000\010\034\011\035\013" +
    "\102\012\001\002\000\006\042\uffe0\101\uffe0\001\002\000" +
    "\014\060\326\061\330\062\324\063\325\064\327\001\002" +
    "\000\004\010\353\001\002\000\030\036\uffe2\057\uffe2\067" +
    "\uffe2\070\uffe2\073\uffe2\077\uffe2\102\uffe2\103\uffe2\104\uffe2" +
    "\105\uffe2\106\uffe2\001\002\000\030\036\114\057\063\067" +
    "\112\070\075\073\101\077\111\102\077\103\106\104\107" +
    "\105\100\106\076\001\002\000\130\003\uffe1\004\uffe1\005" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\127\021\122\022\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\130\030\132\031\126\032\133\033\uffe1\034\117" +
    "\035\120\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\065\121\066\124\072\131\073\116\075\123\076" +
    "\125\102\uffe1\001\002\000\010\034\011\035\013\102\012" +
    "\001\002\000\014\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\001\002\000\050\003\057\006\361\012\364\017\042" +
    "\024\036\026\055\034\011\035\013\041\022\044\071\045" +
    "\034\047\044\050\045\051\061\052\070\053\064\054\056" +
    "\057\063\102\012\001\002\000\004\077\uffa7\001\002\000" +
    "\046\003\057\012\365\017\042\024\036\026\055\034\011" +
    "\035\013\041\022\044\071\045\034\047\044\050\045\051" +
    "\061\052\070\053\064\054\056\057\063\102\012\001\002" +
    "\000\016\003\uffa5\025\uffa5\040\uffa5\041\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\016\003\uff9c\025\uff9c\040\uff9c\041\uff9c" +
    "\055\uff9c\056\uff9c\001\002\000\016\003\uff9d\025\uff9d\040" +
    "\uff9d\041\uff9d\055\uff9d\056\uff9d\001\002\000\004\077\111" +
    "\001\002\000\010\034\011\035\013\102\012\001\002\000" +
    "\006\100\207\101\321\001\002\000\046\003\057\012\364" +
    "\017\042\024\036\026\055\034\011\035\013\041\022\044" +
    "\071\045\034\047\044\050\045\051\061\052\070\053\064" +
    "\054\056\057\063\102\012\001\002\000\016\003\uffa6\025" +
    "\uffa6\040\uffa6\041\uffa6\055\uffa6\056\uffa6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\002\004\052\003\001\001\000\020\003" +
    "\027\014\025\015\020\017\022\020\016\063\014\064\030" +
    "\001\001\000\002\001\001\000\004\071\006\001\001\000" +
    "\004\051\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\355\001\001\000\002\001\001\000\004\073" +
    "\342\001\001\000\002\001\001\000\004\111\340\001\001" +
    "\000\004\072\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\025\015\335\017\022\020\016\063\014" +
    "\064\030\001\001\000\052\004\034\013\057\016\073\017" +
    "\045\022\051\023\036\024\066\025\031\031\046\034\065" +
    "\035\037\036\064\042\040\045\047\051\053\053\072\055" +
    "\071\061\061\065\050\066\052\001\001\000\002\001\001" +
    "\000\004\107\313\001\001\000\004\076\310\001\001\000" +
    "\046\013\057\016\073\017\045\022\051\023\166\024\066" +
    "\025\031\031\046\034\065\035\037\036\064\045\047\051" +
    "\053\053\072\055\071\061\061\065\050\066\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\265\001\001" +
    "\000\002\001\001\000\020\007\260\010\104\011\103\012" +
    "\107\013\112\065\050\067\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\256\001\001\000\010\032\236" +
    "\033\235\051\234\001\001\000\004\114\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\231\010\104\011\103\012\107\013" +
    "\112\065\050\067\101\001\001\000\002\001\001\000\016" +
    "\026\215\027\214\030\216\046\213\056\212\057\211\001" +
    "\001\000\020\007\102\010\104\011\103\012\107\013\112" +
    "\065\050\067\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\210\010\104\011\103\012\107\013\112\065" +
    "\050\067\101\001\001\000\020\007\205\010\104\011\103" +
    "\012\107\013\112\065\050\067\101\001\001\000\004\060" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\114" +
    "\010\104\011\103\012\107\013\112\065\050\067\101\001" +
    "\001\000\002\001\001\000\020\007\150\010\104\011\103" +
    "\012\107\013\112\065\050\067\101\001\001\000\020\007" +
    "\147\010\104\011\103\012\107\013\112\065\050\067\101" +
    "\001\001\000\020\007\146\010\104\011\103\012\107\013" +
    "\112\065\050\067\101\001\001\000\020\007\145\010\104" +
    "\011\103\012\107\013\112\065\050\067\101\001\001\000" +
    "\020\007\144\010\104\011\103\012\107\013\112\065\050" +
    "\067\101\001\001\000\020\007\143\010\104\011\103\012" +
    "\107\013\112\065\050\067\101\001\001\000\020\007\142" +
    "\010\104\011\103\012\107\013\112\065\050\067\101\001" +
    "\001\000\020\007\141\010\104\011\103\012\107\013\112" +
    "\065\050\067\101\001\001\000\020\007\140\010\104\011" +
    "\103\012\107\013\112\065\050\067\101\001\001\000\020" +
    "\007\137\010\104\011\103\012\107\013\112\065\050\067" +
    "\101\001\001\000\020\007\136\010\104\011\103\012\107" +
    "\013\112\065\050\067\101\001\001\000\020\007\135\010" +
    "\104\011\103\012\107\013\112\065\050\067\101\001\001" +
    "\000\020\007\134\010\104\011\103\012\107\013\112\065" +
    "\050\067\101\001\001\000\020\007\133\010\104\011\103" +
    "\012\107\013\112\065\050\067\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\154\013\057\016\073" +
    "\017\045\022\051\023\036\024\066\025\031\031\046\034" +
    "\065\035\037\036\064\040\153\045\047\047\163\050\156" +
    "\051\053\053\072\054\160\055\071\057\162\061\061\065" +
    "\050\066\052\001\001\000\002\001\001\000\052\013\057" +
    "\016\073\017\045\022\051\023\166\024\066\025\031\031" +
    "\046\034\065\035\037\036\064\045\047\051\053\053\072" +
    "\054\175\055\071\057\176\061\061\065\050\066\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\170\010\104\011\103\012\107\013\112\065" +
    "\050\067\101\001\001\000\002\001\001\000\052\004\164" +
    "\013\057\016\073\017\045\022\051\023\036\024\066\025" +
    "\031\031\046\034\065\035\037\036\064\040\165\045\047" +
    "\051\053\053\072\055\071\061\061\065\050\066\052\001" +
    "\001\000\002\001\001\000\046\013\057\016\073\017\045" +
    "\022\051\023\166\024\066\025\031\031\046\034\065\035" +
    "\037\036\064\045\047\051\053\053\072\055\071\061\061" +
    "\065\050\066\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\171\001\001\000\062" +
    "\004\154\013\057\016\073\017\045\022\051\023\036\024" +
    "\066\025\031\031\046\034\065\035\037\036\064\040\172" +
    "\045\047\047\174\050\173\051\053\053\072\054\160\055" +
    "\071\057\162\061\061\065\050\066\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\200\010\104\011\103\012\107\013\112\065\050\067\101" +
    "\001\001\000\052\004\164\013\057\016\073\017\045\022" +
    "\051\023\036\024\066\025\031\031\046\034\065\035\037" +
    "\036\064\040\177\045\047\051\053\053\072\055\071\061" +
    "\061\065\050\066\052\001\001\000\002\001\001\000\004" +
    "\060\201\001\001\000\062\004\154\013\057\016\073\017" +
    "\045\022\051\023\036\024\066\025\031\031\046\034\065" +
    "\035\037\036\064\040\202\045\047\047\204\050\203\051" +
    "\053\053\072\054\160\055\071\057\162\061\061\065\050" +
    "\066\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\227\001" +
    "\001\000\020\007\224\010\104\011\103\012\107\013\112" +
    "\065\050\067\101\001\001\000\002\001\001\000\012\030" +
    "\223\046\222\056\212\057\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\225\001\001\000\050\004\226\013\057\016\073\017" +
    "\045\022\051\023\036\024\066\025\031\031\046\034\065" +
    "\035\037\036\064\045\047\051\053\053\072\055\071\061" +
    "\061\065\050\066\052\001\001\000\046\013\057\016\073" +
    "\017\045\022\051\023\166\024\066\025\031\031\046\034" +
    "\065\035\037\036\064\045\047\051\053\053\072\055\071" +
    "\061\061\065\050\066\052\001\001\000\050\004\230\013" +
    "\057\016\073\017\045\022\051\023\036\024\066\025\031" +
    "\031\046\034\065\035\037\036\064\045\047\051\053\053" +
    "\072\055\071\061\061\065\050\066\052\001\001\000\046" +
    "\013\057\016\073\017\045\022\051\023\166\024\066\025" +
    "\031\031\046\034\065\035\037\036\064\045\047\051\053" +
    "\053\072\055\071\061\061\065\050\066\052\001\001\000" +
    "\002\001\001\000\004\051\233\001\001\000\002\001\001" +
    "\000\004\101\253\001\001\000\004\062\246\001\001\000" +
    "\002\001\001\000\004\077\240\001\001\000\052\004\241" +
    "\013\057\016\073\017\045\022\051\023\036\024\066\025" +
    "\031\031\046\034\065\035\037\036\064\043\243\045\047" +
    "\051\053\053\072\055\071\061\061\065\050\066\052\001" +
    "\001\000\046\013\057\016\073\017\045\022\051\023\166" +
    "\024\066\025\031\031\046\034\065\035\037\036\064\045" +
    "\047\051\053\053\072\055\071\061\061\065\050\066\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\247\010\104\011\103" +
    "\012\107\013\112\065\050\067\101\001\001\000\002\001" +
    "\001\000\004\100\251\001\001\000\020\007\252\010\104" +
    "\011\103\012\107\013\112\065\050\067\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\255\010\104" +
    "\011\103\012\107\013\112\065\050\067\101\001\001\000" +
    "\002\001\001\000\050\004\257\013\057\016\073\017\045" +
    "\022\051\023\036\024\066\025\031\031\046\034\065\035" +
    "\037\036\064\045\047\051\053\053\072\055\071\061\061" +
    "\065\050\066\052\001\001\000\046\013\057\016\073\017" +
    "\045\022\051\023\166\024\066\025\031\031\046\034\065" +
    "\035\037\036\064\045\047\051\053\053\072\055\071\061" +
    "\061\065\050\066\052\001\001\000\002\001\001\000\020" +
    "\007\264\010\104\011\103\012\107\013\112\065\050\067" +
    "\101\001\001\000\004\051\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\266\007\270\010\104\011" +
    "\103\012\107\013\112\065\050\067\101\070\267\001\001" +
    "\000\004\070\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\273\010\104\011\103" +
    "\012\107\013\112\065\050\067\101\001\001\000\002\001" +
    "\001\000\004\104\275\001\001\000\020\007\276\010\104" +
    "\011\103\012\107\013\112\065\050\067\101\001\001\000" +
    "\002\001\001\000\020\007\300\010\104\011\103\012\107" +
    "\013\112\065\050\067\101\001\001\000\002\001\001\000" +
    "\004\103\302\001\001\000\052\004\303\013\057\016\073" +
    "\017\045\022\051\023\036\024\066\025\031\031\046\034" +
    "\065\035\037\036\064\044\305\045\047\051\053\053\072" +
    "\055\071\061\061\065\050\066\052\001\001\000\046\013" +
    "\057\016\073\017\045\022\051\023\166\024\066\025\031" +
    "\031\046\034\065\035\037\036\064\045\047\051\053\053" +
    "\072\055\071\061\061\065\050\066\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\311\010\104\011\103\012\107\013\112" +
    "\065\050\067\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\314\001\001\000\006\006\316\051\315" +
    "\001\001\000\004\113\332\001\001\000\004\070\317\001" +
    "\001\000\052\004\034\013\057\016\073\017\045\022\051" +
    "\023\036\024\066\025\031\031\046\034\065\035\037\036" +
    "\064\042\331\045\047\051\053\053\072\055\071\061\061" +
    "\065\050\066\052\001\001\000\004\051\321\001\001\000" +
    "\004\112\322\001\001\000\004\037\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\337\065\050\001\001" +
    "\000\002\001\001\000\004\051\341\001\001\000\002\001" +
    "\001\000\006\021\344\051\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\350\001\001\000\004\051" +
    "\347\001\001\000\002\001\001\000\004\037\351\001\001" +
    "\000\002\001\001\000\004\075\353\001\001\000\020\007" +
    "\354\010\104\011\103\012\107\013\112\065\050\067\101" +
    "\001\001\000\002\001\001\000\004\051\356\001\001\000" +
    "\002\001\001\000\052\004\361\013\057\016\073\017\045" +
    "\022\051\023\036\024\066\025\031\031\046\034\065\035" +
    "\037\036\064\041\362\045\047\051\053\053\072\055\071" +
    "\061\061\065\050\066\052\001\001\000\004\106\365\001" +
    "\001\000\046\013\057\016\073\017\045\022\051\023\166" +
    "\024\066\025\031\031\046\034\065\035\037\036\064\045" +
    "\047\051\053\053\072\055\071\061\061\065\050\066\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\366\001\001\000\006\006\367\051\315" +
    "\001\001\000\004\070\370\001\001\000\052\004\361\013" +
    "\057\016\073\017\045\022\051\023\036\024\066\025\031" +
    "\031\046\034\065\035\037\036\064\041\371\045\047\051" +
    "\053\053\072\055\071\061\061\065\050\066\052\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s, WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left, sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BEGINCOLOR INSTSGLOBAL RW_end 
            {
              String RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(c2left,c2right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= BEGINCOLOR RW_end 
            {
              String RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(c2left,c2right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW3(c1left, c1right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGINCOLOR ::= RW_begin NT$0 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("BEGINCOLOR",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= ID_ASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= RW_return EXP 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= RW_back 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= RW_continue 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= RW_break 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(stleft,stright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CALLMAINFUNC ::= RW_start NT$1 CALLFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              String RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW1(insleft,insright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(aleft,aright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(eqleft,eqright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLID ::= RW_insert NT$2 LISTID1 RW_as NT$3 TYPE RW_equ NT$4 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTID1 ::= LISTID1 TK_comma IDS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTID1",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTID1 ::= IDS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTID1",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ID_ASIGN ::= LISTID2 TK_prompt EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ID_ASIGN",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTID2 ::= LISTID2 TK_comma IDS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTID2",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTID2 ::= IDS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTID2",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IFSTRUCT ::= IFCOLOR EXP THENCOLOR ELSEIFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IFSTRUCT ::= IFCOLOR EXP THENCOLOR ELSESTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFSTRUCT ::= IFCOLOR EXP THENCOLOR INSTIF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ifrleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ifrright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ifr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ifrleft,ifrright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFCOLOR",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSEIFSTRUCT ::= INSTRUCTIONS ELSEIFCOLOR EXP THENCOLOR ELSEIFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSEIFSTRUCT ::= INSTRUCTIONS ELSEIFCOLOR EXP THENCOLOR ELSESTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSEIFSTRUCT ::= INSTRUCTIONS ELSEIFCOLOR EXP THENCOLOR INSTIF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSEIFSTRUCT ::= ELSEIFCOLOR EXP THENCOLOR ELSEIFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSEIFSTRUCT ::= ELSEIFCOLOR EXP THENCOLOR ELSESTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSEIFSTRUCT ::= ELSEIFCOLOR EXP THENCOLOR INSTIF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSEIFCOLOR ::= RW_elseif 
            {
              String RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(elifleft,elifright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSEIFCOLOR",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSESTRUCT ::= INSTRUCTIONS ELSECOLOR INSTIF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSESTRUCT",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSESTRUCT ::= ELSECOLOR INSTIF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSESTRUCT",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTIF ::= INSTRUCTIONS RW_endif 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTIF",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTIF ::= RW_endif 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTIF",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCHSTRUCT ::= SWITCHCOLOR CASESDEFAULT RW_endswitch 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(edleft,edright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCHSTRUCT ::= SWITCHCOLOR RW_endswitch 
            {
              String RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ed = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(edleft,edright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$5 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCHCOLOR ::= RW_switch NT$5 EXP RW_do 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHCOLOR",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE ::= CASECOLOR EXP THENCOLOR INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE ::= CASECOLOR EXP THENCOLOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DEFAULT ::= ELSECOLOR THENCOLOR INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEFAULT ::= ELSECOLOR THENCOLOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSECOLOR ::= RW_else 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELSECOLOR",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // THENCOLOR ::= RW_then 
            {
              String RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String th = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(thleft, thright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("THENCOLOR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOOPFOR ::= FORCOLOR ARGSFOR RW_do NT$6 INST_FOR 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FORCOLOR ::= RW_for 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(fleft, fright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FORCOLOR",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$7 ::= 
            {
              String RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW3(incleft, incright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARGSFOR ::= INITIALIZE TOCOLOR EXP RW_incr NT$7 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARGSFOR ::= INITIALIZE TOCOLOR EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TOCOLOR ::= RW_to 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TOCOLOR",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$8 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INITIALIZE ::= IDS NT$8 TK_prompt EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$9 ::= 
            {
              String RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whleft, whright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft,dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LOOPWHILE ::= RW_while NT$9 EXP RW_do NT$10 INST_WHILE 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$11 ::= 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(uleft, uright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LOOPDOWHILE ::= INST_REPEAT RW_until NT$11 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INST_FOR ::= INSTRUCTIONS RW_endfor 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(efleft, efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INST_FOR ::= RW_endfor 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(efleft, efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INST_WHILE ::= INSTRUCTIONS RW_endwhile 
            {
              String RESULT =null;
		int ewleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ewright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ew = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ewleft, ewright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_WHILE",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INST_WHILE ::= RW_endwhile 
            {
              String RESULT =null;
		int ewleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ewright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ew = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ewleft, ewright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_WHILE",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$12 ::= 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INST_REPEAT ::= RW_repeat NT$12 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_REPEAT",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INST_REPEAT ::= RW_repeat 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_REPEAT",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$13 ::= 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLFUNC ::= FNCCOLOR TYPE RW_params NT$13 COLORLPAR LISTPARAMS COLORRPAR INST_FUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLFUNC ::= FNCCOLOR TYPE INST_FUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$14 ::= 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLFUNC ::= MTHCOLOR RW_params NT$14 COLORLPAR LISTPARAMS COLORRPAR INST_METH 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLFUNC ::= MTHCOLOR INST_METH 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$15 ::= 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW1(sleft, sright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FNCCOLOR ::= RW_func NT$15 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("FNCCOLOR",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$16 ::= 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW1(sleft, sright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$16",71, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MTHCOLOR ::= RW_meth NT$16 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("MTHCOLOR",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INST_FUNC ::= INSTRUCTIONS RW_endfunc 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft, efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FUNC",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INST_FUNC ::= RW_endfunc 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft, efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_FUNC",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INST_METH ::= INSTRUCTIONS RW_endmeth 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft, efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_METH",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INST_METH ::= RW_endmeth 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(efleft, efright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INST_METH",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$17 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$17",72, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTPARAMS ::= LISTPARAMS TK_comma IDS NT$17 TYPE 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$18 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$18",73, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTPARAMS ::= IDS NT$18 TYPE 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR LISTARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$19 ::= 
            {
              String RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(exleft, exright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$19",74, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IDCOLORUSEFNC ::= RW_exec NT$19 IDS 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORUSEFNC",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PRINT ::= PRINTCOLOR EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PRINTCOLOR ::= RW_println 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PRINTCOLOR ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TYPE ::= RW_str 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TYPE ::= RW_bool 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IDS ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IDS ::= RW_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IDS ::= RW_and 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= TK_str 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);       
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARITHMETICS ::= EXP RW_pow EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITHMETICS ::= EXP RW_mod EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RELATIONALS ::= EXP RW_equequ EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RELATIONALS ::= EXP RW_notequ EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RELATIONALS ::= EXP RW_lessequ EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RELATIONALS ::= EXP RW_moreequ EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RELATIONALS ::= EXP RW_less EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RELATIONALS ::= EXP RW_more EXP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LOGICS ::= EXP RW_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LOGICS ::= EXP RW_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LOGICS ::= RW_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
