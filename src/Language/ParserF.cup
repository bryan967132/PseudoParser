/* 1. Package e importaciones */
package Language;
import java_cup.runtime.*;
import Painter.WordPainter;

/* 2. Codigo para el parser, variables y metodos */

parser code 
{:
    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    @SuppressWarnings("deprecation")
    public ParserF(ScannerF s, WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left, sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}
:} 

/* 3. Terminales*/
terminal String RW_else, RW_elseif, RW_params, RW_incr, RW_equ, RW_endwhile, RW_endfunc, RW_endmeth, RW_endswitch;
terminal String RW_endfor, RW_endif, RW_println, RW_greaterequ, RW_lessequ, RW_until, RW_to, RW_break, RW_start;
terminal String RW_print, RW_greater, RW_less, RW_equequ, RW_notequ, RW_case, RW_or, RW_and, RW_not, RW_begin, RW_end;
terminal String RW_insert, RW_as, RW_then, RW_if, RW_switch, RW_do, RW_for, RW_while, RW_repeat, RW_return, RW_back, RW_continue;
terminal String RW_meth, RW_func, RW_exec, RW_int, RW_double, RW_str, RW_bool, RW_char, RW_pow, RW_mod, RW_true, RW_false;
terminal String TK_prompt, TK_plus, TK_minus, TK_uminus, TK_mult, TK_div, TK_lpar, TK_rpar, TK_comma;
terminal String TK_id, TK_int, TK_double, TK_str, TK_char;

/* 4. No Terminales*/
non terminal String INIT, INSTSGLOBAL, INSTRUCTIONS, LISTARGS, LISTPARAMS, EXP, ARITHMETICS, RELATIONALS, LOGICS, CALLFUNC;
non terminal String CALLMAINFUNC, INSTGLOBAL, PRINT, DECLID, DECLFUNC, LISTID1, LISTID2;
non terminal String INSTRUCTION, IFSTRUCT, SWITCHSTRUCT, CASESDEFAULT, CASES, CASE, LOOPFOR, ARGSFOR, INITIALIZE, LOOPWHILE, LOOPDOWHILE;
non terminal String IDASIGN, TYPE, INSTIF, INSTFUNC, INSTMETH, INSTFOR, INSTWHILE, INSTREPEAT, DEFAULT;
non terminal String ELSEIFSTRUCT, ELSESTRUCT, IDS;
non terminal String BEGINCOLOR, IFCOLOR, ELSEIFCOLOR, SWITCHCOLOR, CASECOLOR, ELSECOLOR, THENCOLOR;
non terminal String FORCOLOR, TOCOLOR, FNCCOLOR, MTHCOLOR, IDCOLORUSEFNC, PRINTCOLOR, COLORLPAR, COLORRPAR;

/* 5. Precedencias */
precedence left RW_or;
precedence left RW_and;
precedence right RW_not;
precedence left RW_equequ, RW_notequ;
precedence left RW_less, RW_lessequ, RW_greater, RW_greaterequ;
precedence left TK_plus, TK_minus;
precedence left TK_mult, TK_div, RW_mod;
precedence nonassoc RW_pow;
precedence right TK_uminus;

/* 6. Gramatica Libre de Contexto */

start with INIT;

INIT ::=
    BEGINCOLOR INSTSGLOBAL RW_end :c2 {:painter.RW3(c2left,c2right);:} |
    BEGINCOLOR RW_end :c2             {:painter.RW3(c2left,c2right);:} ;

BEGINCOLOR ::=
    RW_begin :c1 {:painter.RW3(c1left, c1right);:} IDS :id {:painter.RW5(idleft, idright);:} ;

INSTSGLOBAL ::=
    INSTSGLOBAL INSTGLOBAL |
    INSTGLOBAL             ;

INSTGLOBAL ::=
    CALLMAINFUNC |
    DECLID       |
    DECLFUNC     |
    error        ;

INSTRUCTIONS ::=
    INSTRUCTIONS INSTRUCTION |
    INSTRUCTION              ;

INSTRUCTION ::=
    DECLID           |
    IDASIGN          |
    IFSTRUCT         |
    SWITCHSTRUCT     |
    LOOPFOR          |
    LOOPWHILE        |
    LOOPDOWHILE      |
    CALLFUNC         |
    PRINT            |
    RW_return :d EXP {:painter.RW2(dleft, dright);:} |
    RW_back :d       {:painter.RW2(dleft, dright);:} |
    RW_continue :d   {:painter.RW2(dleft, dright);:} |
    RW_break :d      {:painter.RW2(dleft, dright);:} |
    error            ;

CALLMAINFUNC ::=
    RW_start :st {:painter.RW2(stleft,stright);:} CALLFUNC ;

DECLID ::=
    RW_insert :ins {:painter.RW1(insleft,insright);:} LISTID1 RW_as :a {:painter.RW2(aleft,aright);:} TYPE RW_equ :eq {:painter.RW2(eqleft,eqright);:} EXP ;

LISTID1 ::=
    LISTID1 TK_comma IDS :id {:painter.VARIABLE(idleft,idright);:} |
    IDS :id                 {:painter.VARIABLE(idleft,idright);:} ;

IDASIGN ::=
    LISTID2 TK_prompt EXP ;

LISTID2 ::=
    LISTID2 TK_comma IDS :id {:painter.USEVARIABLE(idleft,idright);:} |
    IDS :id                  {:painter.USEVARIABLE(idleft,idright);:} ;

IFSTRUCT ::=
    IFCOLOR EXP THENCOLOR ELSEIFSTRUCT |
    IFCOLOR EXP THENCOLOR ELSESTRUCT   |
    IFCOLOR EXP THENCOLOR INSTIF       ;

IFCOLOR ::=
    RW_if :ifr {:painter.RW2(ifrleft,ifrright);:} ;

ELSEIFSTRUCT ::=
    INSTRUCTIONS ELSEIFCOLOR EXP THENCOLOR ELSEIFSTRUCT |
    INSTRUCTIONS ELSEIFCOLOR EXP THENCOLOR ELSESTRUCT   |
    INSTRUCTIONS ELSEIFCOLOR EXP THENCOLOR INSTIF       |
    ELSEIFCOLOR EXP THENCOLOR ELSEIFSTRUCT              |
    ELSEIFCOLOR EXP THENCOLOR ELSESTRUCT                |
    ELSEIFCOLOR EXP THENCOLOR INSTIF                    ;

ELSEIFCOLOR ::=
    RW_elseif :elif {:painter.RW2(elifleft,elifright);:} ;

ELSESTRUCT ::=
    INSTRUCTIONS ELSECOLOR INSTIF |
    ELSECOLOR INSTIF              ;

INSTIF ::=
    INSTRUCTIONS RW_endif :d  {:painter.RW2(dleft,dright);:} |
    RW_endif :d               {:painter.RW2(dleft,dright);:} ;

SWITCHSTRUCT ::=
    SWITCHCOLOR CASESDEFAULT :b RW_endswitch :ed {:painter.RW2(edleft,edright);:} |
    SWITCHCOLOR RW_endswitch :ed                 {:painter.RW2(edleft,edright);:} ;

SWITCHCOLOR ::= 
    RW_switch :sw {:painter.RW2(swleft, swright);:} EXP RW_do :d {:painter.RW2(dleft, dright);:} ;

CASESDEFAULT ::=
    CASES DEFAULT |
    CASES         |
    DEFAULT       ;

CASES ::=
    CASES CASE |
    CASE       ;

CASE ::=
    CASECOLOR EXP THENCOLOR INSTRUCTIONS |
    CASECOLOR EXP THENCOLOR              ;

CASECOLOR ::=
    RW_case :c {:painter.RW2(cleft, cright);:} ;

DEFAULT ::=
    ELSECOLOR THENCOLOR INSTRUCTIONS |
    ELSECOLOR THENCOLOR              ;

ELSECOLOR ::=
    RW_else :el {:painter.RW2(elleft, elright);:} ;

THENCOLOR ::=
    RW_then :th {:painter.RW2(thleft, thright);:} ;

LOOPFOR ::=
    FORCOLOR ARGSFOR RW_do :d {:painter.RW2(dleft, dright);:} INSTFOR ;

FORCOLOR ::=
    RW_for :f {:painter.RW2(fleft, fright);:} ;

ARGSFOR ::=
    INITIALIZE TOCOLOR EXP RW_incr :inc {:painter.RW3(incleft, incright);:} EXP |
    INITIALIZE TOCOLOR EXP                                                     ;

TOCOLOR ::=
    RW_to:t {:painter.RW3(tleft, tright);:} ;

INITIALIZE ::=
    IDS :id {:painter.VARIABLE(idleft, idright);:} TK_prompt EXP ;

LOOPWHILE ::=
    RW_while :wh {:painter.RW2(whleft, whright);:} EXP RW_do :d {:painter.RW2(dleft,dright);:} INSTWHILE ;

LOOPDOWHILE ::=
    INSTREPEAT RW_until :u {:painter.RW2(uleft, uright);:} EXP ;

INSTFOR ::=
    INSTRUCTIONS RW_endfor :ef {:painter.RW2(efleft, efright);:} |
    RW_endfor :ef              {:painter.RW2(efleft, efright);:} ;

INSTWHILE ::=
    INSTRUCTIONS RW_endwhile :ew {:painter.RW2(ewleft, ewright);:} |
    RW_endwhile :ew              {:painter.RW2(ewleft, ewright);:} ;

INSTREPEAT ::=
    RW_repeat :r {:painter.RW2(rleft, rright);:} INSTRUCTIONS |
    RW_repeat :r {:painter.RW2(rleft, rright);:}              ;

DECLFUNC ::=
    FNCCOLOR TYPE RW_params :p {:painter.RW4(pleft, pright);:} COLORLPAR LISTPARAMS COLORRPAR INSTFUNC |
    FNCCOLOR TYPE INSTFUNC                                                                             |
    MTHCOLOR RW_params :p {:painter.RW4(pleft, pright);:} COLORLPAR LISTPARAMS COLORRPAR INSTMETH      |
    MTHCOLOR INSTMETH                                                                                  ;

FNCCOLOR ::=
    RW_func :s {:painter.RW1(sleft, sright);:} IDS :id {:painter.FNC(idleft, idright);:} ;

MTHCOLOR ::=
    RW_meth :s {:painter.RW1(sleft, sright);:} IDS :id {:painter.FNC(idleft, idright);:} ;

INSTFUNC ::=
    INSTRUCTIONS RW_endfunc :ef {:painter.RW1(efleft, efright);:} |
    RW_endfunc :ef              {:painter.RW1(efleft, efright);:} ;

INSTMETH ::=
    INSTRUCTIONS RW_endmeth :ef {:painter.RW1(efleft, efright);:} |
    RW_endmeth :ef              {:painter.RW1(efleft, efright);:} ;

LISTPARAMS ::=
    LISTPARAMS TK_comma IDS :id {:painter.VARIABLE(idleft, idright);:} TYPE |
    IDS :id {:painter.VARIABLE(idleft, idright);:} TYPE                     ;

CALLFUNC ::=
    IDCOLORUSEFNC COLORLPAR LISTARGS COLORRPAR |
    IDCOLORUSEFNC COLORLPAR COLORRPAR          ;

IDCOLORUSEFNC ::=
    RW_exec :ex {:painter.RW4(exleft, exright);:} IDS :id {:painter.USEFNC(idleft, idright);:} ;

LISTARGS ::=
    LISTARGS TK_comma EXP |
    EXP                   ;

PRINT ::=
    PRINTCOLOR EXP ;

PRINTCOLOR ::=
    RW_println :p {:painter.USEFNC(pleft, pright);:} |
    RW_print   :p {:painter.USEFNC(pleft, pright);:} ;

TYPE ::=
    RW_str    :tp {:painter.RW5(tpleft, tpright);:} |
    RW_int    :tp {:painter.RW1(tpleft, tpright);:} |
    RW_bool   :tp {:painter.RW1(tpleft, tpright);:} |
    RW_char   :tp {:painter.RW1(tpleft, tpright);:} |
    RW_double :tp {:painter.RW1(tpleft, tpright);:} ;

IDS ::=
    TK_id  :id {:RESULT = id;:} |
    RW_or  :id {:RESULT = id;:} |
    RW_and :id {:RESULT = id;:} ;

EXP ::=
    ARITHMETICS |
    RELATIONALS |
    LOGICS      |
    CALLFUNC    |
    TK_id       :tr          {:painter.USEVARIABLE(trleft, trright);:} |
    TK_str      :tr          {:painter.STRING(trleft, trright);     :} |
    TK_char     :tr          {:painter.CHAR(trleft, trright);       :} |
    TK_int      :tr          {:painter.NUMBER(trleft, trright);     :} |
    TK_double   :tr          {:painter.NUMBER(trleft, trright);     :} |
    RW_true     :tr          {:painter.RW3(trleft, trright);        :} |
    RW_false    :tr          {:painter.RW3(trleft, trright);        :} |
    COLORLPAR EXP :exp COLORRPAR ;

ARITHMETICS ::=
    EXP :e1 TK_plus  :s EXP :e2 |
    EXP :e1 TK_minus :s EXP :e2 |
    EXP :e1 TK_mult  :s EXP :e2 |
    EXP :e1 TK_div   :s EXP :e2 |
    EXP :e1 RW_pow   :s EXP :e2 |
    EXP :e1 RW_mod   :s EXP :e2 |
    TK_minus :s         EXP :e2 %prec TK_uminus ;

RELATIONALS ::=
    EXP :e1 RW_equequ  :s EXP :e2 |
    EXP :e1 RW_notequ  :s EXP :e2 |
    EXP :e1 RW_lessequ :s EXP :e2 |
    EXP :e1 RW_greaterequ :s EXP :e2 |
    EXP :e1 RW_less    :s EXP :e2 |
    EXP :e1 RW_greater    :s EXP :e2 ;

LOGICS ::=
    EXP RW_and EXP |
    EXP RW_or  EXP |
    RW_not     EXP ;

COLORLPAR ::=
    TK_lpar :l {:painter.BRKT(nIB, lleft, lright); nIB ++;:} ;

COLORRPAR ::=
    TK_rpar :r {:nIB --; painter.BRKT(nIB, rleft, rright);:} ;