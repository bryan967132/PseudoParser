/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Language;
import java_cup.runtime.Symbol;
import Painter.WordPainter;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Language/ScannerF.jflex</tt>
 */
public class ScannerF implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  5,  8,  8,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  9,  0, 49,  0,  0,  4, 46, 47, 13, 45, 48, 44, 11, 12, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0,  0, 42,  0,  0,  0, 
     0,  2, 39, 38, 37, 36, 41,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2, 40,  2,  2,  2,  2,  0,  6,  0,  0,  3, 
     0, 23,  2, 19, 14, 15, 29, 31, 34, 24, 35,  2, 17, 26, 20, 18, 
    25, 33, 22, 27, 21, 30, 28,  2,  2, 32,  2, 50,  0, 51,  0,  0, 
     0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\2\1\1\1\4"+
    "\1\5\1\6\2\3\1\7\10\3\1\10\7\3\1\1"+
    "\1\11\1\12\1\13\1\14\1\15\5\0\1\16\1\0"+
    "\1\17\1\0\4\3\1\0\2\3\1\20\13\3\1\21"+
    "\11\3\1\0\1\22\1\23\1\0\1\24\2\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\25\12\3\1\0\1\17"+
    "\1\0\2\3\1\0\2\3\1\26\1\0\1\3\1\27"+
    "\10\3\1\30\6\3\1\0\12\3\1\0\2\3\1\0"+
    "\2\3\3\0\16\3\1\31\4\0\1\3\1\32\1\33"+
    "\6\3\1\34\1\0\2\3\1\0\2\3\3\0\1\3"+
    "\1\35\2\3\1\36\1\37\2\3\1\0\1\3\1\0"+
    "\1\40\1\41\1\0\1\3\4\0\1\42\1\0\1\3"+
    "\1\43\1\3\1\44\3\3\1\0\1\45\1\3\1\0"+
    "\2\3\3\0\2\3\1\46\2\3\1\47\1\3\4\0"+
    "\1\3\5\0\1\50\1\51\3\3\1\0\1\3\1\0"+
    "\1\52\1\53\3\0\1\3\1\54\1\55\1\56\1\57"+
    "\4\0\1\60\1\61\4\0\1\62\1\63\1\3\1\0"+
    "\1\3\3\0\1\64\1\65\2\0\1\66\1\0\1\67"+
    "\2\0\1\70\1\0\1\71\10\0\1\72\7\0\1\73"+
    "\3\0\1\74\1\0\1\75\5\0\1\76\7\0\1\77"+
    "\1\100\1\101\2\0\1\102\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\64\0\u0104\0\u0138"+
    "\0\u016c\0\64\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\234\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\64\0\64"+
    "\0\64\0\64\0\64\0\u057c\0\u05b0\0\u05e4\0\u0104\0\u0618"+
    "\0\64\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\234\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\234"+
    "\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0548\0\64\0\64\0\u0c64\0\u064c\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\64\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\64\0\u1554\0\u1588\0\234\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\234\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\234"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\234\0\234\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\234\0\u21b8\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c"+
    "\0\234\0\u23c0\0\u23f4\0\234\0\234\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\234\0\234\0\u252c\0\u2560\0\u2594\0\u25c8"+
    "\0\u25fc\0\u2630\0\64\0\u2664\0\u2698\0\234\0\u26cc\0\234"+
    "\0\u2700\0\u2734\0\u2768\0\u279c\0\234\0\u27d0\0\u2804\0\u2838"+
    "\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\234\0\u29a4"+
    "\0\u29d8\0\64\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10"+
    "\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\234\0\234\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\234\0\234\0\u2d80"+
    "\0\u2db4\0\u2de8\0\u2e1c\0\234\0\234\0\u2e50\0\234\0\u2e84"+
    "\0\u2eb8\0\u2eec\0\u2f20\0\234\0\64\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\234\0\234\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4"+
    "\0\u3128\0\64\0\234\0\u315c\0\u3190\0\64\0\u31c4\0\64"+
    "\0\u31f8\0\u322c\0\64\0\u3260\0\234\0\u3294\0\u32c8\0\u32fc"+
    "\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\64\0\u3434\0\u3468"+
    "\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\64\0\u35a0\0\u35d4"+
    "\0\u3608\0\64\0\u363c\0\64\0\u3670\0\u36a4\0\u36d8\0\u370c"+
    "\0\u3740\0\64\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878"+
    "\0\u38ac\0\64\0\64\0\64\0\u38e0\0\u3914\0\64\0\64"+
    "\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\2\1\3"+
    "\1\0\1\7\1\10\1\2\1\11\1\12\1\13\1\14"+
    "\1\3\1\4\1\15\1\16\1\17\1\4\1\20\1\4"+
    "\1\21\1\22\1\23\1\24\1\4\1\25\2\4\1\26"+
    "\1\4\1\27\1\4\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\2\1\37\1\40\1\41\1\42\1\43"+
    "\3\2\65\0\1\3\5\0\1\3\10\0\1\3\45\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\31\4\12\0"+
    "\4\44\2\0\1\45\52\44\1\46\2\44\5\47\1\0"+
    "\1\50\2\47\1\51\52\47\12\0\1\10\1\52\64\0"+
    "\1\53\1\54\50\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\55\1\0\7\4\1\56\21\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\57\16\4\1\60"+
    "\6\4\14\0\2\4\6\0\1\4\3\0\2\4\1\61"+
    "\31\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\62\13\4\1\63\13\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\64\27\4\14\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\65\1\0\31\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\3\4"+
    "\1\66\5\4\1\67\4\4\1\70\12\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\4\1\71\4\4"+
    "\1\72\22\4\14\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\73\1\0\1\4\1\74\4\4\1\75\1\76\21\4"+
    "\14\0\2\4\6\0\1\4\3\0\1\4\1\77\1\0"+
    "\7\4\1\100\21\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\7\4\1\101\5\4\1\102\13\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\6\4\1\103"+
    "\22\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\3\4\1\104\25\4\14\0\2\4\6\0\1\4\3\0"+
    "\1\4\1\105\1\0\31\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\6\4\1\106\22\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\4\1\107\27\4"+
    "\14\0\2\4\6\0\1\4\3\0\1\4\1\110\1\0"+
    "\31\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\111\22\4\13\0\1\112\3\0\1\112\1\0"+
    "\2\112\7\0\1\112\32\0\1\112\1\113\13\0\1\114"+
    "\57\0\5\44\1\0\1\44\2\0\53\44\4\0\1\114"+
    "\55\0\1\115\1\0\5\47\1\0\1\47\2\0\53\47"+
    "\12\0\1\116\51\0\5\53\1\0\1\53\1\0\54\53"+
    "\15\54\1\117\46\54\2\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\120\4\4\1\121\24\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\14\4\1\122\14\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\123\4\4\1\124"+
    "\24\4\14\0\2\4\6\0\1\4\3\0\1\4\1\125"+
    "\1\0\31\4\45\0\1\126\32\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\3\4\1\127\5\4\1\130\17\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\6\4"+
    "\1\131\22\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\4\4\1\132\3\4\1\133\20\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\7\4\1\134\6\4"+
    "\1\135\12\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\10\4\1\136\20\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\15\4\1\137\13\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\4\4\1\140\24\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\5\4"+
    "\1\141\23\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\3\4\1\142\1\143\24\4\14\0\2\4\6\0"+
    "\1\4\3\0\1\144\1\4\1\0\31\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\17\4\1\145\11\4"+
    "\14\0\2\4\6\0\1\4\3\0\1\4\1\146\1\0"+
    "\31\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\16\4\1\147\12\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\3\4\1\150\25\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\151\25\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\2\4\1\152"+
    "\7\4\1\153\16\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\4\4\1\154\24\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\2\4\1\155\26\4\14\0"+
    "\2\4\6\0\1\4\3\0\1\156\1\4\1\0\5\4"+
    "\1\157\23\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\1\4\1\160\27\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\5\4\1\161\23\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\162\30\4\24\0"+
    "\1\163\51\0\14\54\1\164\1\117\46\54\21\0\1\165"+
    "\44\0\2\4\6\0\1\4\3\0\1\4\1\166\1\0"+
    "\31\4\14\0\2\4\6\0\1\4\3\0\1\4\1\167"+
    "\1\0\31\4\35\0\1\170\42\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\171\27\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\2\4\1\172\26\4"+
    "\42\0\1\173\35\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\174\4\4\1\175\24\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\176\27\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\3\4\1\177\25\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\200\27\4\14\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\201\1\0\31\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\2\4\1\202\26\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\5\4\1\203\23\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\5\4\1\204"+
    "\23\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\205\22\4\14\0\2\4\6\0\1\4\3\0"+
    "\1\4\1\206\1\0\31\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\6\4\1\207\22\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\4\1\210\27\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\211\27\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\15\4\1\212\13\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\213\27\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\3\4\1\214\25\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\15\4"+
    "\1\215\13\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\216\31\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\2\4\1\217\26\4\14\0\2\4\6\0\1\4"+
    "\3\0\1\4\1\220\1\0\31\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\4\4\1\221\24\4\14\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\222\1\0\31\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\7\4"+
    "\1\223\21\4\14\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\224\1\0\31\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\6\4\1\225\22\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\1\226\30\4\14\0\2\4"+
    "\6\0\1\4\3\0\1\227\1\4\1\0\31\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\12\4\1\230"+
    "\16\4\24\0\1\163\50\0\1\44\22\0\1\231\43\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\3\4\1\232"+
    "\25\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\233\23\4\41\0\1\234\36\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\235\25\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\15\4\1\236"+
    "\13\4\42\0\1\237\1\240\2\0\1\241\31\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\7\4\1\242\21\4"+
    "\14\0\2\4\6\0\1\4\3\0\1\243\1\4\1\0"+
    "\31\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\244\23\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\4\4\1\245\24\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\7\4\1\246\21\4\14\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\247\1\0\31\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\7\4"+
    "\1\250\21\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\1\251\30\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\3\4\1\252\25\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\5\4\1\253\23\4\14\0"+
    "\2\4\6\0\1\4\3\0\1\254\1\4\1\0\31\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\1\255"+
    "\30\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\256\23\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\4\4\1\257\24\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\260\25\4\43\0"+
    "\1\261\1\262\1\263\1\0\1\264\30\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\7\4\1\265\21\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\5\4\1\266"+
    "\23\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\267\22\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\5\4\1\270\23\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\11\4\1\271\17\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\3\4\1\272"+
    "\25\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\2\4\1\273\26\4\14\0\2\4\6\0\1\4\3\0"+
    "\1\4\1\274\1\0\31\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\6\4\1\275\22\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\4\1\276\27\4"+
    "\32\0\1\277\45\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\300\1\0\31\4\14\0\2\4\6\0\1\4\3\0"+
    "\1\4\1\301\1\0\31\4\45\0\1\302\32\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\2\4\1\303\26\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\4\4"+
    "\1\304\24\4\36\0\1\305\66\0\1\306\63\0\1\307"+
    "\36\0\2\4\6\0\1\4\3\0\2\4\1\0\3\4"+
    "\1\310\25\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\1\4\1\311\27\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\3\4\1\312\25\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\7\4\1\313\21\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\314\4\4\1\315\22\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\12\4\1\316\16\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\11\4\1\317\17\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\320\31\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\2\4"+
    "\1\321\26\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\322\31\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\1\4\1\323\27\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\324\27\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\325\31\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\5\4\1\326\23\4"+
    "\41\0\1\327\53\0\1\330\10\0\1\331\52\0\1\332"+
    "\10\0\1\333\71\0\1\334\27\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\335\27\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\4\1\336\27\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\6\4"+
    "\1\337\22\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\6\4\1\340\22\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\4\4\1\341\24\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\6\4\1\342\22\4"+
    "\14\0\2\4\6\0\1\4\3\0\1\343\1\4\1\0"+
    "\31\4\35\0\1\344\42\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\5\4\1\345\23\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\346\25\4\34\0"+
    "\1\347\43\0\2\4\6\0\1\4\3\0\1\4\1\350"+
    "\1\0\31\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\6\4\1\351\22\4\35\0\1\352\66\0\1\353"+
    "\56\0\1\354\44\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\15\4\1\355\13\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\6\4\1\356\22\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\5\4\1\357\23\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\6\4"+
    "\1\360\22\4\14\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\7\4\1\361\21\4\41\0\1\362\36\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\7\4\1\363\21\4"+
    "\42\0\1\364\10\0\1\365\52\0\1\366\10\0\1\367"+
    "\24\0\2\4\6\0\1\4\3\0\2\4\1\0\6\4"+
    "\1\370\22\4\40\0\1\371\62\0\1\372\55\0\1\373"+
    "\103\0\1\374\50\0\1\375\41\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\3\4\1\376\25\4\14\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\377\30\4\14\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\u0100\1\0\31\4"+
    "\14\0\2\4\6\0\1\4\3\0\2\4\1\0\3\4"+
    "\1\u0101\25\4\14\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\u0102\1\0\31\4\34\0\1\u0103\43\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\4\4\1\u0104\24\4\32\0"+
    "\1\u0105\45\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\12\4\1\u0106\16\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\5\4\1\u0107\23\4\40\0\1\u0108\64\0"+
    "\1\u0109\56\0\1\u010a\43\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\6\4\1\u010b\22\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\5\4\1\u010c\23\4\14\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\5\4\1\u010d"+
    "\23\4\14\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\u010e\23\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\6\4\1\u010f\22\4\51\0\1\u0110\62\0"+
    "\1\u0111\64\0\1\u0112\62\0\1\u0113\27\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\12\4\1\u0114\16\4\41\0"+
    "\1\u0115\56\0\1\u0116\65\0\1\u0117\75\0\1\u0118\50\0"+
    "\1\u0119\42\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\u011a\23\4\14\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\u011b\27\4\14\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\5\4\1\u011c\23\4\36\0"+
    "\1\u011d\41\0\2\4\6\0\1\4\3\0\1\4\1\u011e"+
    "\1\0\31\4\30\0\1\u011f\64\0\1\u0120\76\0\1\u0121"+
    "\57\0\1\u0122\37\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\5\4\1\u0123\23\4\14\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\u0124\31\4\50\0\1\u0125\44\0\1\u0126"+
    "\102\0\1\u0127\44\0\1\u0128\62\0\1\u0129\72\0\1\u012a"+
    "\62\0\1\u012b\67\0\1\u012c\35\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\u012d\27\4\37\0\1\u012e"+
    "\40\0\2\4\6\0\1\4\3\0\2\4\1\u012f\31\4"+
    "\31\0\1\u0130\76\0\1\u0131\50\0\1\u0132\70\0\1\u0133"+
    "\66\0\1\u0134\63\0\1\u0135\56\0\1\u0136\67\0\1\u0137"+
    "\57\0\1\u0138\67\0\1\u0139\53\0\1\u013a\65\0\1\u013b"+
    "\62\0\1\u013c\71\0\1\u013d\57\0\1\u013e\63\0\1\u013f"+
    "\63\0\1\u0140\71\0\1\u0141\60\0\1\u0142\66\0\1\u0143"+
    "\53\0\1\u0144\77\0\1\u0145\54\0\1\u0146\65\0\1\u0147"+
    "\55\0\1\u0148\63\0\1\u0149\76\0\1\u014a\56\0\1\u014b"+
    "\54\0\1\u014c\71\0\1\u014d\60\0\1\u014e\102\0\1\u014f"+
    "\63\0\1\u0150\52\0\1\u0151\61\0\1\u0152\57\0\1\u0153"+
    "\74\0\1\u0154\66\0\1\u0155\63\0\1\u0156\47\0\1\u0157"+
    "\60\0\1\u0158\63\0\1\u0159\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\1\11\24\1\5\11"+
    "\5\0\1\11\1\0\1\1\1\0\4\1\1\0\30\1"+
    "\1\0\2\11\1\0\1\1\2\0\2\1\1\0\2\1"+
    "\1\0\34\1\1\0\1\11\1\0\2\1\1\0\2\1"+
    "\1\11\1\0\21\1\1\0\12\1\1\0\2\1\1\0"+
    "\2\1\3\0\17\1\4\0\12\1\1\0\2\1\1\0"+
    "\2\1\3\0\10\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\4\0\1\11\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\3\0\5\1\1\11\1\1\4\0\1\1\5\0"+
    "\5\1\1\0\1\1\1\0\2\1\3\0\5\1\4\0"+
    "\1\1\1\11\4\0\3\1\1\0\1\1\3\0\1\11"+
    "\1\1\2\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\1\10\0\1\11\7\0\1\11\3\0\1\11\1\0"+
    "\1\11\5\0\1\11\7\0\3\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    WordPainter painter;
    public ScannerF(java.io.Reader in,WordPainter painter) {
        yychar = 0;
        this.zzReader = in;
        this.painter = painter;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerF(java.io.Reader in) {
      yychar = 0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(TOK.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { painter.ERROR(yychar,yylength());
            } 
            // fall through
          case 69: break;
          case 2: 
            { 
            } 
            // fall through
          case 70: break;
          case 3: 
            { return new Symbol(TOK.TK_id,        yychar, yylength(), yytext());
            } 
            // fall through
          case 71: break;
          case 4: 
            { return new Symbol(TOK.TK_int,       yychar, yylength(), yytext());
            } 
            // fall through
          case 72: break;
          case 5: 
            { return new Symbol(TOK.TK_div,       yychar, yylength(), yytext());
            } 
            // fall through
          case 73: break;
          case 6: 
            { return new Symbol(TOK.TK_mult,      yychar, yylength(), yytext());
            } 
            // fall through
          case 74: break;
          case 7: 
            { return new Symbol(TOK.RW_or,        yychar, yylength(), yytext());
            } 
            // fall through
          case 75: break;
          case 8: 
            { return new Symbol(TOK.RW_and,       yychar, yylength(), yytext());
            } 
            // fall through
          case 76: break;
          case 9: 
            { return new Symbol(TOK.TK_minus,     yychar, yylength(), yytext());
            } 
            // fall through
          case 77: break;
          case 10: 
            { return new Symbol(TOK.TK_plus,      yychar, yylength(), yytext());
            } 
            // fall through
          case 78: break;
          case 11: 
            { return new Symbol(TOK.TK_lpar,      yychar, yylength(), yytext());
            } 
            // fall through
          case 79: break;
          case 12: 
            { return new Symbol(TOK.TK_rpar,      yychar, yylength(), yytext());
            } 
            // fall through
          case 80: break;
          case 13: 
            { return new Symbol(TOK.TK_comma,     yychar, yylength(), yytext());
            } 
            // fall through
          case 81: break;
          case 14: 
            { return new Symbol(TOK.TK_str,       yychar, yylength(), yytext());
            } 
            // fall through
          case 82: break;
          case 15: 
            { painter.COMMENT(yychar,yylength());
            } 
            // fall through
          case 83: break;
          case 16: 
            { return new Symbol(TOK.RW_not,       yychar, yylength(), yytext());
            } 
            // fall through
          case 84: break;
          case 17: 
            { return new Symbol(TOK.RW_if,        yychar, yylength(), yytext());
            } 
            // fall through
          case 85: break;
          case 18: 
            { return new Symbol(TOK.TK_prompt,    yychar, yylength(), yytext());
            } 
            // fall through
          case 86: break;
          case 19: 
            { return new Symbol(TOK.TK_char,      yychar, yylength(), yytext());
            } 
            // fall through
          case 87: break;
          case 20: 
            { return new Symbol(TOK.TK_double,    yychar, yylength(), yytext());
            } 
            // fall through
          case 88: break;
          case 21: 
            { return new Symbol(TOK.RW_end,       yychar, yylength(), yytext());
            } 
            // fall through
          case 89: break;
          case 22: 
            { return new Symbol(TOK.RW_elseif,    yychar, yylength(), yytext());
            } 
            // fall through
          case 90: break;
          case 23: 
            { return new Symbol(TOK.RW_as,        yychar, yylength(), yytext());
            } 
            // fall through
          case 91: break;
          case 24: 
            { return new Symbol(TOK.RW_for,       yychar, yylength(), yytext());
            } 
            // fall through
          case 92: break;
          case 25: 
            { return new Symbol(TOK.RW_switch,    yychar, yylength(), yytext());
            } 
            // fall through
          case 93: break;
          case 26: 
            { return new Symbol(TOK.RW_do,        yychar, yylength(), yytext());
            } 
            // fall through
          case 94: break;
          case 27: 
            { return new Symbol(TOK.RW_to,        yychar, yylength(), yytext());
            } 
            // fall through
          case 95: break;
          case 28: 
            { return new Symbol(TOK.RW_false,     yychar, yylength(), yytext());
            } 
            // fall through
          case 96: break;
          case 29: 
            { return new Symbol(TOK.RW_until,     yychar, yylength(), yytext());
            } 
            // fall through
          case 97: break;
          case 30: 
            { return new Symbol(TOK.RW_begin,     yychar, yylength(), yytext());
            } 
            // fall through
          case 98: break;
          case 31: 
            { return new Symbol(TOK.RW_start,     yychar, yylength(), yytext());
            } 
            // fall through
          case 99: break;
          case 32: 
            { return new Symbol(TOK.RW_meth,      yychar, yylength(), yytext());
            } 
            // fall through
          case 100: break;
          case 33: 
            { return new Symbol(TOK.RW_mod,       yychar, yylength(), yytext());
            } 
            // fall through
          case 101: break;
          case 34: 
            { return new Symbol(TOK.RW_endif,     yychar, yylength(), yytext());
            } 
            // fall through
          case 102: break;
          case 35: 
            { return new Symbol(TOK.RW_int,       yychar, yylength(), yytext());
            } 
            // fall through
          case 103: break;
          case 36: 
            { return new Symbol(TOK.RW_str,       yychar, yylength(), yytext());
            } 
            // fall through
          case 104: break;
          case 37: 
            { return new Symbol(TOK.RW_break,     yychar, yylength(), yytext());
            } 
            // fall through
          case 105: break;
          case 38: 
            { return new Symbol(TOK.RW_repeat,    yychar, yylength(), yytext());
            } 
            // fall through
          case 106: break;
          case 39: 
            { return new Symbol(TOK.RW_equequ,    yychar, yylength(), yytext());
            } 
            // fall through
          case 107: break;
          case 40: 
            { return new Symbol(TOK.RW_func,      yychar, yylength(), yytext());
            } 
            // fall through
          case 108: break;
          case 41: 
            { return new Symbol(TOK.RW_double,    yychar, yylength(), yytext());
            } 
            // fall through
          case 109: break;
          case 42: 
            { return new Symbol(TOK.RW_then,      yychar, yylength(), yytext());
            } 
            // fall through
          case 110: break;
          case 43: 
            { return new Symbol(TOK.RW_exec,      yychar, yylength(), yytext());
            } 
            // fall through
          case 111: break;
          case 44: 
            { return new Symbol(TOK.RW_return,    yychar, yylength(), yytext());
            } 
            // fall through
          case 112: break;
          case 45: 
            { return new Symbol(TOK.RW_insert,    yychar, yylength(), yytext());
            } 
            // fall through
          case 113: break;
          case 46: 
            { return new Symbol(TOK.RW_print,     yychar, yylength(), yytext());
            } 
            // fall through
          case 114: break;
          case 47: 
            { return new Symbol(TOK.RW_pow,       yychar, yylength(), yytext());
            } 
            // fall through
          case 115: break;
          case 48: 
            { return new Symbol(TOK.RW_while,     yychar, yylength(), yytext());
            } 
            // fall through
          case 116: break;
          case 49: 
            { return new Symbol(TOK.RW_endfor,    yychar, yylength(), yytext());
            } 
            // fall through
          case 117: break;
          case 50: 
            { return new Symbol(TOK.RW_char,      yychar, yylength(), yytext());
            } 
            // fall through
          case 118: break;
          case 51: 
            { return new Symbol(TOK.RW_bool,      yychar, yylength(), yytext());
            } 
            // fall through
          case 119: break;
          case 52: 
            { return new Symbol(TOK.RW_equ,       yychar, yylength(), yytext());
            } 
            // fall through
          case 120: break;
          case 53: 
            { return new Symbol(TOK.RW_continue,  yychar, yylength(), yytext());
            } 
            // fall through
          case 121: break;
          case 54: 
            { return new Symbol(TOK.RW_less,      yychar, yylength(), yytext());
            } 
            // fall through
          case 122: break;
          case 55: 
            { return new Symbol(TOK.RW_more,      yychar, yylength(), yytext());
            } 
            // fall through
          case 123: break;
          case 56: 
            { return new Symbol(TOK.RW_endswitch, yychar, yylength(), yytext());
            } 
            // fall through
          case 124: break;
          case 57: 
            { return new Symbol(TOK.RW_true,      yychar, yylength(), yytext());
            } 
            // fall through
          case 125: break;
          case 58: 
            { return new Symbol(TOK.RW_endmeth,   yychar, yylength(), yytext());
            } 
            // fall through
          case 126: break;
          case 59: 
            { return new Symbol(TOK.RW_println,   yychar, yylength(), yytext());
            } 
            // fall through
          case 127: break;
          case 60: 
            { return new Symbol(TOK.RW_endfunc,   yychar, yylength(), yytext());
            } 
            // fall through
          case 128: break;
          case 61: 
            { return new Symbol(TOK.RW_notequ,    yychar, yylength(), yytext());
            } 
            // fall through
          case 129: break;
          case 62: 
            { return new Symbol(TOK.RW_endwhile,  yychar, yylength(), yytext());
            } 
            // fall through
          case 130: break;
          case 63: 
            { return new Symbol(TOK.RW_case,      yychar, yylength(), yytext());
            } 
            // fall through
          case 131: break;
          case 64: 
            { return new Symbol(TOK.RW_incr,      yychar, yylength(), yytext());
            } 
            // fall through
          case 132: break;
          case 65: 
            { return new Symbol(TOK.RW_params,    yychar, yylength(), yytext());
            } 
            // fall through
          case 133: break;
          case 66: 
            { return new Symbol(TOK.RW_else,      yychar, yylength(), yytext());
            } 
            // fall through
          case 134: break;
          case 67: 
            { return new Symbol(TOK.RW_lessequ,   yychar, yylength(), yytext());
            } 
            // fall through
          case 135: break;
          case 68: 
            { return new Symbol(TOK.RW_moreequ,   yychar, yylength(), yytext());
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
