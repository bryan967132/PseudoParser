/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Language;
import java_cup.runtime.Symbol;
import Painter.WordPainter;

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Language/ScannerF.jflex</tt>
 */
public class ScannerF implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  5,  8,  8,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16, 47,  9,  0, 51,  0,  0,  4, 48, 49, 13, 44, 50, 43, 11, 12, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0,  0, 41, 46, 45,  0, 
     0,  2, 38, 37, 36, 35, 40,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2, 39,  2,  2,  2,  2,  0,  6,  0,  0,  3, 
     0, 23,  2, 19, 14, 15, 29, 31, 32, 24, 34,  2, 17, 26, 20, 18, 
    25,  2, 22, 27, 21, 30, 28,  2,  2, 33,  2, 52,  0, 53,  0,  0, 
     0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\2\1\1\1\4"+
    "\1\5\1\6\2\3\1\7\11\3\1\10\6\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\1\1\16\1\17\1\20"+
    "\5\0\1\21\1\0\1\22\1\0\3\3\1\0\2\3"+
    "\1\23\11\3\1\24\11\3\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\0\1\32\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\33\12\3\1\0\1\22\1\0\1\3"+
    "\1\0\2\3\1\34\1\0\1\3\1\35\10\3\1\36"+
    "\4\3\1\0\12\3\1\0\1\3\1\0\2\3\3\0"+
    "\14\3\1\37\4\0\1\3\1\40\1\41\6\3\1\42"+
    "\1\0\1\3\1\0\2\3\3\0\1\3\1\43\3\3"+
    "\1\44\1\45\3\3\1\46\1\47\1\3\4\0\1\50"+
    "\1\0\1\3\1\51\1\3\1\52\3\3\1\0\1\53"+
    "\1\0\2\3\3\0\2\3\1\54\5\3\5\0\1\55"+
    "\1\56\3\3\2\0\1\57\1\60\3\0\1\3\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\4\0\1\70"+
    "\1\71\1\3\4\0\1\72\1\73\3\0\1\74\1\0"+
    "\1\75\5\0\1\76\6\0\1\77\1\0\1\100\4\0"+
    "\1\101\5\0\1\102\1\103\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\u017a\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\242\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\66\0\66"+
    "\0\u05b2\0\66\0\u05e8\0\66\0\66\0\66\0\u061e\0\u0654"+
    "\0\u068a\0\u010e\0\u06c0\0\66\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\242\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\242"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\66\0\66\0\66\0\66\0\66\0\u0cde"+
    "\0\u06f6\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u140a\0\66\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\66\0\u154e\0\u1584\0\242\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\242\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\242\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\242"+
    "\0\242\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\242"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\242\0\u2304\0\u233a\0\u2370\0\242\0\242\0\u23a6"+
    "\0\u23dc\0\u2412\0\242\0\242\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\66\0\u2556\0\u258c\0\242\0\u25c2\0\242\0\u25f8"+
    "\0\u262e\0\u2664\0\u269a\0\242\0\u26d0\0\u2706\0\u273c\0\u2772"+
    "\0\u27a8\0\u27de\0\u2814\0\u284a\0\242\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\242"+
    "\0\242\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\242\0\242"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\242\0\242\0\242\0\u2c82"+
    "\0\242\0\242\0\66\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\242"+
    "\0\242\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\66\0\242"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\66\0\u2f40\0\242\0\u2f76\0\u2fac"+
    "\0\u2fe2\0\u3018\0\u304e\0\66\0\u3084\0\u30ba\0\u30f0\0\u3126"+
    "\0\u315c\0\u3192\0\66\0\u31c8\0\66\0\u31fe\0\u3234\0\u326a"+
    "\0\u32a0\0\66\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\66"+
    "\0\66\0\66\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\2\1\3"+
    "\1\0\1\7\1\10\1\2\1\11\1\12\1\13\1\14"+
    "\1\3\1\4\1\15\1\16\1\17\1\4\1\20\1\4"+
    "\1\21\1\22\1\23\1\24\1\4\1\25\2\4\1\26"+
    "\1\27\1\4\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\2\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\3\2\67\0\1\3\5\0\1\3\10\0"+
    "\1\3\47\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\30\4\15\0\4\47\2\0\1\50\54\47\1\51\2\47"+
    "\5\52\1\0\1\53\2\52\1\54\54\52\12\0\1\10"+
    "\1\55\66\0\1\56\1\57\52\0\2\4\6\0\1\4"+
    "\3\0\1\4\1\60\1\0\30\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\61\15\4\1\62"+
    "\6\4\17\0\2\4\6\0\1\4\3\0\2\4\1\63"+
    "\30\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\64\13\4\1\65\12\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\66\26\4\17\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\67\1\0\30\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\3\4"+
    "\1\70\5\4\1\71\16\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\72\4\4\1\73\21\4"+
    "\17\0\2\4\6\0\1\4\3\0\1\4\1\74\1\0"+
    "\1\4\1\75\5\4\1\76\20\4\17\0\2\4\6\0"+
    "\1\4\3\0\1\4\1\77\1\0\7\4\1\100\20\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\7\4"+
    "\1\101\5\4\1\102\12\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\6\4\1\103\21\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\3\4\1\104\24\4"+
    "\17\0\2\4\6\0\1\4\3\0\1\4\1\105\1\0"+
    "\30\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\106\21\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\107\26\4\17\0\2\4\6\0"+
    "\1\4\3\0\1\4\1\110\1\0\30\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\6\4\1\111\21\4"+
    "\16\0\1\112\3\0\1\112\1\0\2\112\7\0\1\112"+
    "\31\0\1\112\1\113\2\0\1\114\65\0\1\115\65\0"+
    "\1\116\13\0\1\117\61\0\5\47\1\0\1\47\2\0"+
    "\55\47\4\0\1\117\57\0\1\120\1\0\5\52\1\0"+
    "\1\52\2\0\55\52\12\0\1\121\53\0\5\56\1\0"+
    "\1\56\1\0\56\56\15\57\1\122\50\57\2\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\123\4\4\1\124\23\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\125\4\4"+
    "\1\126\23\4\17\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\127\1\0\30\4\50\0\1\130\34\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\131\5\4\1\132"+
    "\16\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\133\21\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\4\4\1\134\3\4\1\135\5\4\1\136"+
    "\11\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\7\4\1\137\6\4\1\140\11\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\10\4\1\141\17\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\4\4\1\142"+
    "\23\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\143\22\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\4\4\1\144\23\4\17\0\2\4\6\0"+
    "\1\4\3\0\1\145\1\4\1\0\30\4\17\0\2\4"+
    "\6\0\1\4\3\0\1\4\1\146\1\0\30\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\16\4\1\147"+
    "\11\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\3\4\1\150\24\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\3\4\1\151\24\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\2\4\1\152\7\4\1\153"+
    "\15\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\4\4\1\154\23\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\2\4\1\155\25\4\17\0\2\4\6\0"+
    "\1\4\3\0\1\156\1\4\1\0\5\4\1\157\22\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\160\26\4\17\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\5\4\1\161\22\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\162\27\4\16\0\1\112\3\0"+
    "\1\112\1\0\2\112\7\0\1\112\31\0\1\112\1\113"+
    "\24\0\1\163\53\0\14\57\1\164\1\122\50\57\21\0"+
    "\1\165\46\0\2\4\6\0\1\4\3\0\1\4\1\166"+
    "\1\0\30\4\40\0\1\167\44\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\170\26\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\2\4\1\171\25\4"+
    "\45\0\1\172\37\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\173\4\4\1\174\23\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\175\26\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\3\4\1\176\24\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\177\26\4\17\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\200\1\0\30\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\5\4\1\201\22\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\2\4\1\202\25\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\5\4\1\203"+
    "\22\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\204\22\4\17\0\2\4\6\0\1\4\3\0"+
    "\1\4\1\205\1\0\30\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\6\4\1\206\21\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\1\4\1\207\26\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\15\4"+
    "\1\210\12\4\17\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\3\4\1\211\24\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\15\4\1\212\12\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\213\30\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\2\4\1\214\25\4"+
    "\17\0\2\4\6\0\1\4\3\0\1\4\1\215\1\0"+
    "\30\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\4\4\1\216\23\4\17\0\2\4\6\0\1\4\3\0"+
    "\1\4\1\217\1\0\30\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\7\4\1\220\20\4\17\0\2\4"+
    "\6\0\1\4\3\0\1\4\1\221\1\0\30\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\6\4\1\222"+
    "\21\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\1\223\27\4\17\0\2\4\6\0\1\4\3\0\1\224"+
    "\1\4\1\0\30\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\12\4\1\225\15\4\27\0\1\163\52\0"+
    "\1\47\22\0\1\226\45\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\3\4\1\227\24\4\44\0\1\230\40\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\3\4\1\231"+
    "\24\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\15\4\1\232\12\4\45\0\1\233\1\234\2\0\1\235"+
    "\33\0\2\4\6\0\1\4\3\0\2\4\1\0\7\4"+
    "\1\236\20\4\17\0\2\4\6\0\1\4\3\0\1\237"+
    "\1\4\1\0\30\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\5\4\1\240\22\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\4\4\1\241\23\4\17\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\242\1\0\30\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\7\4"+
    "\1\243\20\4\17\0\2\4\6\0\1\4\3\0\1\4"+
    "\1\244\1\0\30\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\7\4\1\245\20\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\246\24\4\17\0"+
    "\2\4\6\0\1\4\3\0\1\247\1\4\1\0\30\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\1\250"+
    "\27\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\4\4\1\251\23\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\3\4\1\252\24\4\46\0\1\253\1\254"+
    "\1\255\1\0\1\256\32\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\7\4\1\257\20\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\5\4\1\260\22\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\6\4\1\261"+
    "\21\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\5\4\1\262\22\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\11\4\1\263\16\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\264\24\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\2\4\1\265"+
    "\25\4\17\0\2\4\6\0\1\4\3\0\1\4\1\266"+
    "\1\0\30\4\17\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\6\4\1\267\21\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\1\4\1\270\26\4\35\0\1\271"+
    "\47\0\2\4\6\0\1\4\3\0\1\4\1\272\1\0"+
    "\30\4\50\0\1\273\34\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\2\4\1\274\25\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\4\4\1\275\23\4\41\0"+
    "\1\276\70\0\1\277\65\0\1\300\40\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\301\24\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\1\4\1\302"+
    "\26\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\3\4\1\303\24\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\7\4\1\304\20\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\12\4\1\305\15\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\1\4\1\306"+
    "\4\4\1\307\21\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\12\4\1\310\15\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\11\4\1\311\16\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\2\4\1\312"+
    "\25\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\1\4\1\313\26\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\314\26\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\5\4\1\315\22\4\44\0"+
    "\1\316\55\0\1\317\10\0\1\320\54\0\1\321\10\0"+
    "\1\322\73\0\1\323\31\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\1\4\1\324\26\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\1\4\1\325\26\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\6\4\1\326"+
    "\21\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\327\21\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\4\4\1\330\23\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\6\4\1\331\21\4\17\0"+
    "\2\4\6\0\1\4\3\0\1\332\1\4\1\0\30\4"+
    "\40\0\1\333\44\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\5\4\1\334\22\4\37\0\1\335\45\0\2\4"+
    "\6\0\1\4\3\0\1\4\1\336\1\0\30\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\6\4\1\337"+
    "\21\4\40\0\1\340\70\0\1\341\60\0\1\342\46\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\15\4\1\343"+
    "\12\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\6\4\1\344\21\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\5\4\1\345\22\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\6\4\1\346\21\4\17\0"+
    "\2\4\6\0\1\4\3\0\2\4\1\0\6\4\1\347"+
    "\21\4\17\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\7\4\1\350\20\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\7\4\1\351\20\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\6\4\1\352\21\4\43\0"+
    "\1\353\64\0\1\354\57\0\1\355\105\0\1\356\52\0"+
    "\1\357\43\0\2\4\6\0\1\4\3\0\2\4\1\0"+
    "\3\4\1\360\24\4\17\0\2\4\6\0\1\4\3\0"+
    "\2\4\1\0\1\361\27\4\17\0\2\4\6\0\1\4"+
    "\3\0\1\4\1\362\1\0\30\4\17\0\2\4\6\0"+
    "\1\4\3\0\2\4\1\0\3\4\1\363\24\4\17\0"+
    "\2\4\6\0\1\4\3\0\1\4\1\364\1\0\30\4"+
    "\37\0\1\365\63\0\1\366\47\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\12\4\1\367\15\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\5\4\1\370\22\4"+
    "\43\0\1\371\66\0\1\372\60\0\1\373\45\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\6\4\1\374\21\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\5\4"+
    "\1\375\22\4\17\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\5\4\1\376\22\4\17\0\2\4\6\0\1\4"+
    "\3\0\2\4\1\0\5\4\1\377\22\4\17\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\5\4\1\u0100\22\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\6\4"+
    "\1\u0101\21\4\17\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\12\4\1\u0102\15\4\44\0\1\u0103\60\0\1\u0104"+
    "\67\0\1\u0105\77\0\1\u0106\52\0\1\u0107\44\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\5\4\1\u0108\22\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\u0109\26\4\17\0\2\4\6\0\1\4\3\0\2\4"+
    "\1\0\5\4\1\u010a\22\4\41\0\1\u010b\57\0\1\u010c"+
    "\66\0\1\u010d\100\0\1\u010e\61\0\1\u010f\41\0\2\4"+
    "\6\0\1\4\3\0\2\4\1\0\5\4\1\u0110\22\4"+
    "\17\0\2\4\6\0\1\4\3\0\2\4\1\u0111\30\4"+
    "\33\0\1\u0112\74\0\1\u0113\64\0\1\u0114\71\0\1\u0115"+
    "\37\0\2\4\6\0\1\4\3\0\2\4\1\0\1\4"+
    "\1\u0116\26\4\42\0\1\u0117\57\0\1\u0118\100\0\1\u0119"+
    "\52\0\1\u011a\72\0\1\u011b\63\0\1\u011c\71\0\1\u011d"+
    "\61\0\1\u011e\71\0\1\u011f\57\0\1\u0120\64\0\1\u0121"+
    "\73\0\1\u0122\61\0\1\u0123\73\0\1\u0124\62\0\1\u0125"+
    "\70\0\1\u0126\71\0\1\u0127\56\0\1\u0128\67\0\1\u0129"+
    "\72\0\1\u012a\60\0\1\u012b\56\0\1\u012c\73\0\1\u012d"+
    "\62\0\1\u012e\73\0\1\u012f\63\0\1\u0130\61\0\1\u0131"+
    "\76\0\1\u0132\54\0\1\u0133\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13284];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\1\11\24\1\2\11"+
    "\1\1\1\11\1\1\3\11\5\0\1\11\1\0\1\1"+
    "\1\0\3\1\1\0\26\1\1\0\5\11\1\0\1\1"+
    "\2\0\1\1\1\0\2\1\1\0\32\1\1\0\1\11"+
    "\1\0\1\1\1\0\2\1\1\11\1\0\17\1\1\0"+
    "\12\1\1\0\1\1\1\0\2\1\3\0\15\1\4\0"+
    "\12\1\1\0\1\1\1\0\2\1\3\0\15\1\4\0"+
    "\1\11\1\0\7\1\1\0\1\1\1\0\2\1\3\0"+
    "\10\1\5\0\5\1\2\0\2\1\3\0\7\1\1\11"+
    "\4\0\3\1\4\0\1\11\1\1\3\0\1\11\1\0"+
    "\1\1\5\0\1\11\6\0\1\11\1\0\1\11\4\0"+
    "\1\11\5\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    WordPainter painter;
    public ScannerF(String input, WordPainter painter) {
        yychar = 0;
        this.zzReader = new java.io.BufferedReader(
            new java.io.StringReader(input)
        );
        this.painter = painter;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerF(java.io.Reader in) {
      yychar = 0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(TOK.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { painter.ERROR(yychar,yylength());
            } 
            // fall through
          case 70: break;
          case 2: 
            { 
            } 
            // fall through
          case 71: break;
          case 3: 
            { return new Symbol(TOK.TK_id,        yychar, yylength(), yytext());
            } 
            // fall through
          case 72: break;
          case 4: 
            { return new Symbol(TOK.TK_int,       yychar, yylength(), yytext());
            } 
            // fall through
          case 73: break;
          case 5: 
            { return new Symbol(TOK.TK_div,       yychar, yylength(), yytext());
            } 
            // fall through
          case 74: break;
          case 6: 
            { return new Symbol(TOK.TK_mult,      yychar, yylength(), yytext());
            } 
            // fall through
          case 75: break;
          case 7: 
            { return new Symbol(TOK.RW_or,        yychar, yylength(), yytext());
            } 
            // fall through
          case 76: break;
          case 8: 
            { return new Symbol(TOK.RW_and,       yychar, yylength(), yytext());
            } 
            // fall through
          case 77: break;
          case 9: 
            { return new Symbol(TOK.RW_less,      yychar, yylength(), yytext());
            } 
            // fall through
          case 78: break;
          case 10: 
            { return new Symbol(TOK.TK_minus,     yychar, yylength(), yytext());
            } 
            // fall through
          case 79: break;
          case 11: 
            { return new Symbol(TOK.TK_plus,      yychar, yylength(), yytext());
            } 
            // fall through
          case 80: break;
          case 12: 
            { return new Symbol(TOK.RW_more,      yychar, yylength(), yytext());
            } 
            // fall through
          case 81: break;
          case 13: 
            { return new Symbol(TOK.RW_equequ,    yychar, yylength(), yytext());
            } 
            // fall through
          case 82: break;
          case 14: 
            { return new Symbol(TOK.TK_lpar,      yychar, yylength(), yytext());
            } 
            // fall through
          case 83: break;
          case 15: 
            { return new Symbol(TOK.TK_rpar,      yychar, yylength(), yytext());
            } 
            // fall through
          case 84: break;
          case 16: 
            { return new Symbol(TOK.TK_comma,     yychar, yylength(), yytext());
            } 
            // fall through
          case 85: break;
          case 17: 
            { return new Symbol(TOK.TK_str,       yychar, yylength(), yytext());
            } 
            // fall through
          case 86: break;
          case 18: 
            { painter.COMMENT(yychar,yylength());
            } 
            // fall through
          case 87: break;
          case 19: 
            { return new Symbol(TOK.RW_not,       yychar, yylength(), yytext());
            } 
            // fall through
          case 88: break;
          case 20: 
            { return new Symbol(TOK.RW_if,        yychar, yylength(), yytext());
            } 
            // fall through
          case 89: break;
          case 21: 
            { return new Symbol(TOK.TK_prompt,    yychar, yylength(), yytext());
            } 
            // fall through
          case 90: break;
          case 22: 
            { return new Symbol(TOK.RW_lessequ,   yychar, yylength(), yytext());
            } 
            // fall through
          case 91: break;
          case 23: 
            { return new Symbol(TOK.RW_moreequ,   yychar, yylength(), yytext());
            } 
            // fall through
          case 92: break;
          case 24: 
            { return new Symbol(TOK.RW_notequ,    yychar, yylength(), yytext());
            } 
            // fall through
          case 93: break;
          case 25: 
            { return new Symbol(TOK.TK_char,      yychar, yylength(), yytext());
            } 
            // fall through
          case 94: break;
          case 26: 
            { return new Symbol(TOK.TK_double,    yychar, yylength(), yytext());
            } 
            // fall through
          case 95: break;
          case 27: 
            { return new Symbol(TOK.RW_end,       yychar, yylength(), yytext());
            } 
            // fall through
          case 96: break;
          case 28: 
            { return new Symbol(TOK.RW_elseif,    yychar, yylength(), yytext());
            } 
            // fall through
          case 97: break;
          case 29: 
            { return new Symbol(TOK.RW_as,        yychar, yylength(), yytext());
            } 
            // fall through
          case 98: break;
          case 30: 
            { return new Symbol(TOK.RW_for,       yychar, yylength(), yytext());
            } 
            // fall through
          case 99: break;
          case 31: 
            { return new Symbol(TOK.RW_switch,    yychar, yylength(), yytext());
            } 
            // fall through
          case 100: break;
          case 32: 
            { return new Symbol(TOK.RW_do,        yychar, yylength(), yytext());
            } 
            // fall through
          case 101: break;
          case 33: 
            { return new Symbol(TOK.RW_to,        yychar, yylength(), yytext());
            } 
            // fall through
          case 102: break;
          case 34: 
            { return new Symbol(TOK.RW_false,     yychar, yylength(), yytext());
            } 
            // fall through
          case 103: break;
          case 35: 
            { return new Symbol(TOK.RW_until,     yychar, yylength(), yytext());
            } 
            // fall through
          case 104: break;
          case 36: 
            { return new Symbol(TOK.RW_begin,     yychar, yylength(), yytext());
            } 
            // fall through
          case 105: break;
          case 37: 
            { return new Symbol(TOK.RW_start,     yychar, yylength(), yytext());
            } 
            // fall through
          case 106: break;
          case 38: 
            { return new Symbol(TOK.RW_meth,      yychar, yylength(), yytext());
            } 
            // fall through
          case 107: break;
          case 39: 
            { return new Symbol(TOK.RW_mod,       yychar, yylength(), yytext());
            } 
            // fall through
          case 108: break;
          case 40: 
            { return new Symbol(TOK.RW_endif,     yychar, yylength(), yytext());
            } 
            // fall through
          case 109: break;
          case 41: 
            { return new Symbol(TOK.RW_int,       yychar, yylength(), yytext());
            } 
            // fall through
          case 110: break;
          case 42: 
            { return new Symbol(TOK.RW_str,       yychar, yylength(), yytext());
            } 
            // fall through
          case 111: break;
          case 43: 
            { return new Symbol(TOK.RW_break,     yychar, yylength(), yytext());
            } 
            // fall through
          case 112: break;
          case 44: 
            { return new Symbol(TOK.RW_repeat,    yychar, yylength(), yytext());
            } 
            // fall through
          case 113: break;
          case 45: 
            { return new Symbol(TOK.RW_func,      yychar, yylength(), yytext());
            } 
            // fall through
          case 114: break;
          case 46: 
            { return new Symbol(TOK.RW_double,    yychar, yylength(), yytext());
            } 
            // fall through
          case 115: break;
          case 47: 
            { return new Symbol(TOK.RW_then,      yychar, yylength(), yytext());
            } 
            // fall through
          case 116: break;
          case 48: 
            { return new Symbol(TOK.RW_exec,      yychar, yylength(), yytext());
            } 
            // fall through
          case 117: break;
          case 49: 
            { return new Symbol(TOK.RW_return,    yychar, yylength(), yytext());
            } 
            // fall through
          case 118: break;
          case 50: 
            { return new Symbol(TOK.RW_back,      yychar, yylength(), yytext());
            } 
            // fall through
          case 119: break;
          case 51: 
            { return new Symbol(TOK.RW_insert,    yychar, yylength(), yytext());
            } 
            // fall through
          case 120: break;
          case 52: 
            { return new Symbol(TOK.RW_print,     yychar, yylength(), yytext());
            } 
            // fall through
          case 121: break;
          case 53: 
            { return new Symbol(TOK.RW_pow,       yychar, yylength(), yytext());
            } 
            // fall through
          case 122: break;
          case 54: 
            { return new Symbol(TOK.RW_while,     yychar, yylength(), yytext());
            } 
            // fall through
          case 123: break;
          case 55: 
            { return new Symbol(TOK.RW_endfor,    yychar, yylength(), yytext());
            } 
            // fall through
          case 124: break;
          case 56: 
            { return new Symbol(TOK.RW_char,      yychar, yylength(), yytext());
            } 
            // fall through
          case 125: break;
          case 57: 
            { return new Symbol(TOK.RW_bool,      yychar, yylength(), yytext());
            } 
            // fall through
          case 126: break;
          case 58: 
            { return new Symbol(TOK.RW_equ,       yychar, yylength(), yytext());
            } 
            // fall through
          case 127: break;
          case 59: 
            { return new Symbol(TOK.RW_continue,  yychar, yylength(), yytext());
            } 
            // fall through
          case 128: break;
          case 60: 
            { return new Symbol(TOK.RW_endswitch, yychar, yylength(), yytext());
            } 
            // fall through
          case 129: break;
          case 61: 
            { return new Symbol(TOK.RW_true,      yychar, yylength(), yytext());
            } 
            // fall through
          case 130: break;
          case 62: 
            { return new Symbol(TOK.RW_endmeth,   yychar, yylength(), yytext());
            } 
            // fall through
          case 131: break;
          case 63: 
            { return new Symbol(TOK.RW_println,   yychar, yylength(), yytext());
            } 
            // fall through
          case 132: break;
          case 64: 
            { return new Symbol(TOK.RW_endfunc,   yychar, yylength(), yytext());
            } 
            // fall through
          case 133: break;
          case 65: 
            { return new Symbol(TOK.RW_endwhile,  yychar, yylength(), yytext());
            } 
            // fall through
          case 134: break;
          case 66: 
            { return new Symbol(TOK.RW_case,      yychar, yylength(), yytext());
            } 
            // fall through
          case 135: break;
          case 67: 
            { return new Symbol(TOK.RW_incr,      yychar, yylength(), yytext());
            } 
            // fall through
          case 136: break;
          case 68: 
            { return new Symbol(TOK.RW_params,    yychar, yylength(), yytext());
            } 
            // fall through
          case 137: break;
          case 69: 
            { return new Symbol(TOK.RW_else,      yychar, yylength(), yytext());
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
