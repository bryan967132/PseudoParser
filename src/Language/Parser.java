
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.*;
import Classes.Abstracts.*;
import Classes.Expressions.*;
import Classes.Instructions.*;
import Classes.Utils.Parameter;
import Classes.Utils.Type;
import Classes.Utils.ElseIf;
import Classes.Utils.Error;
import Classes.Utils.TypeError;
import Classes.Utils.Outs;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\003\004\000\002\003\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\004\004\000\002\004\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\014\004\000\002\017\010\000\002\033\005\000\002\021" +
    "\005\000\002\021\003\000\002\020\012\000\002\020\006" +
    "\000\002\020\011\000\002\020\005\000\002\036\004\000" +
    "\002\036\003\000\002\037\004\000\002\037\003\000\002" +
    "\006\006\000\002\006\004\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\044\007\000\002\044\007" +
    "\000\002\044\007\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\045\005\000\002\045\004\000\002" +
    "\035\004\000\002\035\003\000\002\024\007\000\002\024" +
    "\006\000\002\025\004\000\002\025\003\000\002\025\003" +
    "\000\002\026\004\000\002\026\003\000\002\027\006\000" +
    "\002\027\005\000\002\043\005\000\002\043\004\000\002" +
    "\030\014\000\002\030\012\000\002\031\006\000\002\032" +
    "\005\000\002\040\004\000\002\040\003\000\002\041\004" +
    "\000\002\041\003\000\002\042\004\000\002\042\003\000" +
    "\002\016\004\000\002\016\004\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\004\000\002\013\007\000" +
    "\002\013\006\000\002\005\005\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\037\005\001\002\000\004\002\325\001" +
    "\002\000\010\034\007\035\011\102\010\001\002\000\016" +
    "\003\022\025\017\040\012\041\016\055\020\056\014\001" +
    "\002\000\102\003\uffaf\006\uffaf\013\uffaf\017\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\044\uffaf\045\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\071\uffaf\077\uffaf\101\uffaf" +
    "\102\uffaf\001\002\000\102\003\uffb0\006\uffb0\013\uffb0\017" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\034\uffb0\035\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\071\uffb0\077" +
    "\uffb0\101\uffb0\102\uffb0\001\002\000\102\003\uffae\006\uffae" +
    "\013\uffae\017\uffae\024\uffae\025\uffae\026\uffae\034\uffae\035" +
    "\uffae\040\uffae\041\uffae\042\uffae\044\uffae\045\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae" +
    "\071\uffae\077\uffae\101\uffae\102\uffae\001\002\000\004\002" +
    "\uffff\001\002\000\016\003\ufffa\025\ufffa\040\ufffa\041\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\010\034\007\035\011\102" +
    "\010\001\002\000\016\003\ufffd\025\ufffd\040\ufffd\041\ufffd" +
    "\055\ufffd\056\ufffd\001\002\000\010\034\007\035\011\102" +
    "\010\001\002\000\004\057\047\001\002\000\010\034\007" +
    "\035\011\102\010\001\002\000\016\003\ufffc\025\ufffc\040" +
    "\ufffc\041\ufffc\055\ufffc\056\ufffc\001\002\000\016\003\ufff9" +
    "\025\ufff9\040\ufff9\041\ufff9\055\ufff9\056\ufff9\001\002\000" +
    "\016\003\022\025\017\040\025\041\016\055\020\056\014" +
    "\001\002\000\016\003\ufffb\025\ufffb\040\ufffb\041\ufffb\055" +
    "\ufffb\056\ufffb\001\002\000\004\002\000\001\002\000\016" +
    "\003\ufffe\025\ufffe\040\ufffe\041\ufffe\055\ufffe\056\ufffe\001" +
    "\002\000\050\003\055\006\052\013\064\017\061\024\065" +
    "\026\031\034\007\035\011\041\016\044\053\045\050\047" +
    "\044\050\046\051\032\052\043\053\045\054\056\057\047" +
    "\102\010\001\002\000\016\003\uffe0\025\uffe0\040\uffe0\041" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\030\036\070\057\047" +
    "\067\076\070\075\073\067\077\077\102\102\103\066\104" +
    "\072\105\073\106\074\001\002\000\046\003\055\017\061" +
    "\022\uffb8\024\065\026\031\034\007\035\011\041\016\044" +
    "\053\045\050\047\044\050\046\051\032\052\043\053\045" +
    "\054\056\057\047\102\010\001\002\000\070\003\ufff1\004" +
    "\ufff1\005\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\022\ufff1\024\ufff1\026\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\041\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\057\ufff1\102\ufff1\001" +
    "\002\000\070\003\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\024" +
    "\ufff6\026\ufff6\033\ufff6\034\ufff6\035\ufff6\041\ufff6\044\ufff6" +
    "\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\057\ufff6\102\ufff6\001\002\000\070\003\ufff0\004\ufff0" +
    "\005\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\022\ufff0\024\ufff0\026\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\057\ufff0\102\ufff0\001\002" +
    "\000\070\003\ufff3\004\ufff3\005\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\022\ufff3\024\ufff3" +
    "\026\ufff3\033\ufff3\034\ufff3\035\ufff3\041\ufff3\044\ufff3\045" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\057\ufff3\102\ufff3\001\002\000\070\003\ufff4\004\ufff4\005" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\022\ufff4\024\ufff4\026\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\057\ufff4\102\ufff4\001\002\000" +
    "\004\022\300\001\002\000\006\071\274\101\275\001\002" +
    "\000\046\003\055\013\273\017\061\024\065\026\031\034" +
    "\007\035\011\041\016\044\053\045\050\047\044\050\046" +
    "\051\032\052\043\053\045\054\056\057\047\102\010\001" +
    "\002\000\030\036\070\057\047\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\010\034\007\035\011\102\010\001\002\000\070" +
    "\003\uffec\004\uffec\005\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\022\uffec\024\uffec\026\uffec" +
    "\033\uffec\034\uffec\035\uffec\041\uffec\044\uffec\045\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\057\uffec" +
    "\102\uffec\001\002\000\030\036\070\057\047\067\076\070" +
    "\075\073\067\077\077\102\102\103\066\104\072\105\073" +
    "\106\074\001\002\000\010\034\007\035\011\102\010\001" +
    "\002\000\030\036\070\057\047\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\070\003\ufff7\004\ufff7\005\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7\024" +
    "\ufff7\026\ufff7\033\ufff7\034\ufff7\035\ufff7\041\ufff7\044\ufff7" +
    "\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\057\ufff7\102\ufff7\001\002\000\004\077\177\001\002" +
    "\000\030\036\070\057\047\067\076\070\075\073\067\077" +
    "\077\102\102\103\066\104\072\105\073\106\074\001\002" +
    "\000\070\003\uffee\004\uffee\005\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\022\uffee\024\uffee" +
    "\026\uffee\033\uffee\034\uffee\035\uffee\041\uffee\044\uffee\045" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\057\uffee\102\uffee\001\002\000\070\003\uffe9\004\uffe9\005" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\022\uffe9\024\uffe9\026\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\041\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\057\uffe9\102\uffe9\001\002\000" +
    "\070\003\uffeb\004\uffeb\005\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\022\uffeb\024\uffeb\026" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb\044\uffeb\045\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\057" +
    "\uffeb\102\uffeb\001\002\000\070\003\ufff5\004\ufff5\005\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\022\ufff5\024\ufff5\026\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\041\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\057\ufff5\102\ufff5\001\002\000\010" +
    "\042\uffe4\071\uffe4\101\uffe4\001\002\000\030\036\070\057" +
    "\047\067\076\070\075\073\067\077\077\102\102\103\066" +
    "\104\072\105\073\106\074\001\002\000\070\003\ufff2\004" +
    "\ufff2\005\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\022\ufff2\024\ufff2\026\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2\102\ufff2\001" +
    "\002\000\070\003\uffef\004\uffef\005\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\022\uffef\024" +
    "\uffef\026\uffef\033\uffef\034\uffef\035\uffef\041\uffef\044\uffef" +
    "\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\057\uffef\102\uffef\001\002\000\016\003\uffdc\025\uffdc" +
    "\040\uffdc\041\uffdc\055\uffdc\056\uffdc\001\002\000\070\003" +
    "\uffea\004\uffea\005\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\022\uffea\024\uffea\026\uffea\033" +
    "\uffea\034\uffea\035\uffea\041\uffea\044\uffea\045\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea\102" +
    "\uffea\001\002\000\144\003\uffa6\004\uffa6\005\uffa6\007\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\065\uffa6\066\uffa6\072\uffa6" +
    "\073\uffa6\075\uffa6\076\uffa6\100\uffa6\101\uffa6\102\uffa6\001" +
    "\002\000\030\036\070\057\047\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\030\036\070\057\047\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\144\003\uffaa\004\uffaa\005\uffaa\007\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\065\uffaa\066\uffaa\072\uffaa\073\uffaa" +
    "\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\001\002\000" +
    "\144\003\uffa5\004\uffa5\005\uffa5\007\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\040" +
    "\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\065\uffa5\066\uffa5\072\uffa5\073\uffa5\075\uffa5" +
    "\076\uffa5\100\uffa5\101\uffa5\102\uffa5\001\002\000\144\003" +
    "\uffa8\004\uffa8\005\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\040\uffa8\041" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\065\uffa8\066\uffa8\072\uffa8\073\uffa8\075\uffa8\076\uffa8" +
    "\100\uffa8\101\uffa8\102\uffa8\001\002\000\144\003\uffa7\004" +
    "\uffa7\005\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\040\uffa7\041\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\065" +
    "\uffa7\066\uffa7\072\uffa7\073\uffa7\075\uffa7\076\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\001\002\000\144\003\uffa3\004\uffa3\005" +
    "\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\040\uffa3\041\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\065\uffa3\066" +
    "\uffa3\072\uffa3\073\uffa3\075\uffa3\076\uffa3\100\uffa3\101\uffa3" +
    "\102\uffa3\001\002\000\144\003\uffa4\004\uffa4\005\uffa4\007" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\040\uffa4\041\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\065\uffa4\066\uffa4\072" +
    "\uffa4\073\uffa4\075\uffa4\076\uffa4\100\uffa4\101\uffa4\102\uffa4" +
    "\001\002\000\030\036\070\057\047\067\076\070\075\073" +
    "\067\077\077\102\102\103\066\104\072\105\073\106\074" +
    "\001\002\000\144\003\uffad\004\uffad\005\uffad\007\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\040\uffad\041\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\065\uffad\066\uffad\072\uffad\073" +
    "\uffad\075\uffad\076\uffad\100\uffad\101\uffad\102\uffad\001\002" +
    "\000\144\003\uffac\004\uffac\005\uffac\007\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\040\uffac\041\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\065\uffac\066\uffac\072\uffac\073\uffac\075" +
    "\uffac\076\uffac\100\uffac\101\uffac\102\uffac\001\002\000\144" +
    "\003\uffa9\004\uffa9\005\uffa9\007\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\040\uffa9" +
    "\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\065\uffa9\066\uffa9\072\uffa9\073\uffa9\075\uffa9\076" +
    "\uffa9\100\uffa9\101\uffa9\102\uffa9\001\002\000\120\003\uffb7" +
    "\004\uffb7\005\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\106\021\113\022\uffb7\024\uffb7" +
    "\026\uffb7\027\107\030\120\031\117\032\122\033\uffb7\034" +
    "\110\035\111\041\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\057\uffb7\065\112\066" +
    "\115\072\121\073\105\075\114\076\116\102\uffb7\001\002" +
    "\000\144\003\uffab\004\uffab\005\uffab\007\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\040\uffab\041\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\065\uffab\066\uffab\072\uffab\073\uffab\075" +
    "\uffab\076\uffab\100\uffab\101\uffab\102\uffab\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\144" +
    "\003\uff99\004\uff99\005\uff99\007\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\106\021\113" +
    "\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\107\030" +
    "\120\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\040\uff99" +
    "\041\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\065\112\066\115\072\121\073\105\075\114\076" +
    "\116\100\uff99\101\uff99\102\uff99\001\002\000\144\003\uffa1" +
    "\004\uffa1\005\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\065\112\066\115\072\uffa1\073\uffa1\075\114\076\116\100" +
    "\uffa1\101\uffa1\102\uffa1\001\002\000\144\003\uff96\004\uff96" +
    "\005\uff96\007\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\040\uff96\041\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\065\112" +
    "\066\115\072\121\073\105\075\114\076\116\100\uff96\101" +
    "\uff96\102\uff96\001\002\000\144\003\uff9a\004\uff9a\005\uff9a" +
    "\007\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\106\021\113\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\107\030\120\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\040\uff9a\041\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\065\112\066\115" +
    "\072\121\073\105\075\114\076\116\100\uff9a\101\uff9a\102" +
    "\uff9a\001\002\000\144\003\uff9e\004\uff9e\005\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\040\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\065\112\066\uff9e\072\uff9e" +
    "\073\uff9e\075\uff9e\076\uff9e\100\uff9e\101\uff9e\102\uff9e\001" +
    "\002\000\144\003\uff9c\004\uff9c\005\uff9c\007\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\040\uff9c\041\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\057\uff9c\065\112\066\uff9c\072\uff9c\073\uff9c" +
    "\075\uff9c\076\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002\000" +
    "\144\003\uff9f\004\uff9f\005\uff9f\007\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\040" +
    "\uff9f\041\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\065\112\066\uff9f\072\uff9f\073\uff9f\075\uff9f" +
    "\076\uff9f\100\uff9f\101\uff9f\102\uff9f\001\002\000\144\003" +
    "\uff98\004\uff98\005\uff98\007\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\040\uff98\041" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057" +
    "\uff98\065\112\066\115\072\121\073\105\075\114\076\116" +
    "\100\uff98\101\uff98\102\uff98\001\002\000\142\003\uff9d\004" +
    "\uff9d\005\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\040\uff9d\041\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\066" +
    "\uff9d\072\uff9d\073\uff9d\075\uff9d\076\uff9d\100\uff9d\101\uff9d" +
    "\102\uff9d\001\002\000\144\003\uff94\004\uff94\005\uff94\007" +
    "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94" +
    "\017\uff94\020\106\021\113\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\107\030\120\031\117\032\122\033\uff94" +
    "\034\uff94\035\uff94\040\uff94\041\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\065\112\066\115\072" +
    "\121\073\105\075\114\076\116\100\uff94\101\uff94\102\uff94" +
    "\001\002\000\144\003\uff93\004\uff93\005\uff93\007\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\106\021\113\022\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\027\107\030\120\031\117\032\122\033\uff93\034\uff93" +
    "\035\111\040\uff93\041\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\065\112\066\115\072\121\073" +
    "\105\075\114\076\116\100\uff93\101\uff93\102\uff93\001\002" +
    "\000\144\003\uff95\004\uff95\005\uff95\007\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\040\uff95\041\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\065\112\066\115\072\121\073\105\075" +
    "\114\076\116\100\uff95\101\uff95\102\uff95\001\002\000\144" +
    "\003\uff97\004\uff97\005\uff97\007\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\040\uff97" +
    "\041\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\065\112\066\115\072\121\073\105\075\114\076" +
    "\116\100\uff97\101\uff97\102\uff97\001\002\000\144\003\uffa0" +
    "\004\uffa0\005\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\040\uffa0\041\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\065\112\066\115\072\uffa0\073\uffa0\075\114\076\116\100" +
    "\uffa0\101\uffa0\102\uffa0\001\002\000\040\020\106\021\113" +
    "\027\107\030\120\031\117\032\122\034\110\035\111\065" +
    "\112\066\115\072\121\073\105\075\114\076\116\100\142" +
    "\001\002\000\144\003\uffa2\004\uffa2\005\uffa2\007\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\040\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\065\uffa2\066\uffa2\072\uffa2\073" +
    "\uffa2\075\uffa2\076\uffa2\100\uffa2\101\uffa2\102\uffa2\001\002" +
    "\000\144\003\uff92\004\uff92\005\uff92\007\uff92\011\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\106" +
    "\021\113\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\107\030\120\031\117\032\122\033\uff92\034\uff92\035\uff92" +
    "\040\uff92\041\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\065\112\066\115\072\121\073\105\075" +
    "\114\076\116\100\uff92\101\uff92\102\uff92\001\002\000\144" +
    "\003\uff9b\004\uff9b\005\uff9b\007\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\040\uff9b" +
    "\041\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\065\uff9b\066\uff9b\072\uff9b\073\uff9b\075\uff9b\076" +
    "\uff9b\100\uff9b\101\uff9b\102\uff9b\001\002\000\040\020\106" +
    "\021\113\027\107\030\120\031\117\032\122\034\110\035" +
    "\111\043\146\065\112\066\115\072\121\073\105\075\114" +
    "\076\116\001\002\000\052\003\055\004\153\005\155\016" +
    "\151\017\061\024\065\026\031\034\007\035\011\041\016" +
    "\044\053\045\050\047\044\050\046\051\032\052\043\053" +
    "\045\054\056\057\047\102\010\001\002\000\052\003\055" +
    "\004\170\005\167\016\165\017\061\024\065\026\031\034" +
    "\007\035\011\041\016\044\053\045\050\047\044\050\046" +
    "\051\032\052\043\053\045\054\056\057\047\102\010\001" +
    "\002\000\070\003\uffd7\004\uffd7\005\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\024" +
    "\uffd7\026\uffd7\033\uffd7\034\uffd7\035\uffd7\041\uffd7\044\uffd7" +
    "\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\057\uffd7\102\uffd7\001\002\000\070\003\uffcd\004\uffcd" +
    "\005\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\022\uffcd\024\uffcd\026\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\041\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\057\uffcd\102\uffcd\001\002" +
    "\000\070\003\uffd9\004\uffd9\005\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9" +
    "\026\uffd9\033\uffd9\034\uffd9\035\uffd9\041\uffd9\044\uffd9\045" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\057\uffd9\102\uffd9\001\002\000\046\003\055\016\151\017" +
    "\061\024\065\026\031\034\007\035\011\041\016\044\053" +
    "\045\050\047\044\050\046\051\032\052\043\053\045\054" +
    "\056\057\047\102\010\001\002\000\070\003\uffd8\004\uffd8" +
    "\005\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\022\uffd8\024\uffd8\026\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\057\uffd8\102\uffd8\001\002" +
    "\000\030\036\070\057\047\067\076\070\075\073\067\077" +
    "\077\102\102\103\066\104\072\105\073\106\074\001\002" +
    "\000\040\020\106\021\113\027\107\030\120\031\117\032" +
    "\122\034\110\035\111\043\157\065\112\066\115\072\121" +
    "\073\105\075\114\076\116\001\002\000\052\003\055\004" +
    "\153\005\155\016\151\017\061\024\065\026\031\034\007" +
    "\035\011\041\016\044\053\045\050\047\044\050\046\051" +
    "\032\052\043\053\045\054\056\057\047\102\010\001\002" +
    "\000\070\003\uffd1\004\uffd1\005\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\024\uffd1" +
    "\026\uffd1\033\uffd1\034\uffd1\035\uffd1\041\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\057\uffd1\102\uffd1\001\002\000\070\003\uffd3\004\uffd3\005" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\022\uffd3\024\uffd3\026\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\057\uffd3\102\uffd3\001\002\000" +
    "\070\003\uffd2\004\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\022\uffd2\024\uffd2\026" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2\044\uffd2\045\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\057" +
    "\uffd2\102\uffd2\001\002\000\070\003\uffcf\004\uffcf\005\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\022\uffcf\024\uffcf\026\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\041\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\057\uffcf\102\uffcf\001\002\000\046" +
    "\003\055\016\165\017\061\024\065\026\031\034\007\035" +
    "\011\041\016\044\053\045\050\047\044\050\046\051\032" +
    "\052\043\053\045\054\056\057\047\102\010\001\002\000" +
    "\070\003\uffce\004\uffce\005\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\022\uffce\024\uffce\026" +
    "\uffce\033\uffce\034\uffce\035\uffce\041\uffce\044\uffce\045\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\057" +
    "\uffce\102\uffce\001\002\000\070\003\ufff8\004\ufff8\005\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\022\ufff8\024\ufff8\026\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\041\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\057\ufff8\102\ufff8\001\002\000\030" +
    "\036\070\057\047\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\046" +
    "\003\055\016\151\017\061\024\065\026\031\034\007\035" +
    "\011\041\016\044\053\045\050\047\044\050\046\051\032" +
    "\052\043\053\045\054\056\057\047\102\010\001\002\000" +
    "\070\003\uffd0\004\uffd0\005\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\024\uffd0\026" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0\044\uffd0\045\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\057" +
    "\uffd0\102\uffd0\001\002\000\040\020\106\021\113\027\107" +
    "\030\120\031\117\032\122\034\110\035\111\043\173\065" +
    "\112\066\115\072\121\073\105\075\114\076\116\001\002" +
    "\000\052\003\055\004\153\005\155\016\151\017\061\024" +
    "\065\026\031\034\007\035\011\041\016\044\053\045\050" +
    "\047\044\050\046\051\032\052\043\053\045\054\056\057" +
    "\047\102\010\001\002\000\070\003\uffd4\004\uffd4\005\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\022\uffd4\024\uffd4\026\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\041\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\057\uffd4\102\uffd4\001\002\000\070" +
    "\003\uffd6\004\uffd6\005\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024\uffd6\026\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\041\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\057\uffd6" +
    "\102\uffd6\001\002\000\070\003\uffd5\004\uffd5\005\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\022\uffd5\024\uffd5\026\uffd5\033\uffd5\034\uffd5\035\uffd5\041" +
    "\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\057\uffd5\102\uffd5\001\002\000\010\034" +
    "\007\035\011\102\010\001\002\000\014\060\207\061\211" +
    "\062\205\063\206\064\210\001\002\000\006\100\202\101" +
    "\203\001\002\000\046\003\055\013\064\017\061\024\065" +
    "\026\031\034\007\035\011\041\016\044\053\045\050\047" +
    "\044\050\046\051\032\052\043\053\045\054\056\057\047" +
    "\102\010\001\002\000\010\034\007\035\011\102\010\001" +
    "\002\000\014\060\207\061\211\062\205\063\206\064\210" +
    "\001\002\000\056\003\uffb5\006\uffb5\010\uffb5\012\uffb5\017" +
    "\uffb5\024\uffb5\026\uffb5\034\uffb5\035\uffb5\041\uffb5\044\uffb5" +
    "\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\057\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000\056" +
    "\003\uffb2\006\uffb2\010\uffb2\012\uffb2\017\uffb2\024\uffb2\026" +
    "\uffb2\034\uffb2\035\uffb2\041\uffb2\044\uffb2\045\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\001\002\000\056\003\uffb4\006\uffb4" +
    "\010\uffb4\012\uffb4\017\uffb4\024\uffb4\026\uffb4\034\uffb4\035" +
    "\uffb4\041\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\057\uffb4\100\uffb4\101\uffb4\102" +
    "\uffb4\001\002\000\056\003\uffb3\006\uffb3\010\uffb3\012\uffb3" +
    "\017\uffb3\024\uffb3\026\uffb3\034\uffb3\035\uffb3\041\uffb3\044" +
    "\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\057\uffb3\100\uffb3\101\uffb3\102\uffb3\001\002\000" +
    "\056\003\uffb1\006\uffb1\010\uffb1\012\uffb1\017\uffb1\024\uffb1" +
    "\026\uffb1\034\uffb1\035\uffb1\041\uffb1\044\uffb1\045\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\057\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\001\002\000\006\100\uffdb\101" +
    "\uffdb\001\002\000\016\003\uffe1\025\uffe1\040\uffe1\041\uffe1" +
    "\055\uffe1\056\uffe1\001\002\000\006\100\uffda\101\uffda\001" +
    "\002\000\040\020\106\021\113\027\107\030\120\031\117" +
    "\032\122\034\110\035\111\046\216\065\112\066\115\072" +
    "\121\073\105\075\114\076\116\001\002\000\010\004\220" +
    "\014\221\033\223\001\002\000\004\014\uffc8\001\002\000" +
    "\004\043\234\001\002\000\070\003\uffcb\004\uffcb\005\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\022\uffcb\024\uffcb\026\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\057\uffcb\102\uffcb\001\002\000\010" +
    "\004\220\014\uffc9\033\223\001\002\000\030\036\070\057" +
    "\047\067\076\070\075\073\067\077\077\102\102\103\066" +
    "\104\072\105\073\106\074\001\002\000\004\014\226\001" +
    "\002\000\010\004\uffc6\014\uffc6\033\uffc6\001\002\000\070" +
    "\003\uffcc\004\uffcc\005\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\024\uffcc\026\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\041\uffcc\044\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\057\uffcc" +
    "\102\uffcc\001\002\000\040\020\106\021\113\027\107\030" +
    "\120\031\117\032\122\034\110\035\111\043\230\065\112" +
    "\066\115\072\121\073\105\075\114\076\116\001\002\000" +
    "\052\003\055\004\uffc4\014\uffc4\017\061\024\065\026\031" +
    "\033\uffc4\034\007\035\011\041\016\044\053\045\050\047" +
    "\044\050\046\051\032\052\043\053\045\054\056\057\047" +
    "\102\010\001\002\000\052\003\055\004\uffc5\014\uffc5\017" +
    "\061\024\065\026\031\033\uffc5\034\007\035\011\041\016" +
    "\044\053\045\050\047\044\050\046\051\032\052\043\053" +
    "\045\054\056\057\047\102\010\001\002\000\004\014\uffca" +
    "\001\002\000\010\004\uffc7\014\uffc7\033\uffc7\001\002\000" +
    "\046\003\055\014\uffc2\017\061\024\065\026\031\034\007" +
    "\035\011\041\016\044\053\045\050\047\044\050\046\051" +
    "\032\052\043\053\045\054\056\057\047\102\010\001\002" +
    "\000\046\003\055\014\uffc3\017\061\024\065\026\031\034" +
    "\007\035\011\041\016\044\053\045\050\047\044\050\046" +
    "\051\032\052\043\053\045\054\056\057\047\102\010\001" +
    "\002\000\004\077\237\001\002\000\032\036\070\057\047" +
    "\067\076\070\075\073\067\077\077\100\242\102\102\103" +
    "\066\104\072\105\073\106\074\001\002\000\006\100\243" +
    "\101\244\001\002\000\042\020\106\021\113\027\107\030" +
    "\120\031\117\032\122\034\110\035\111\065\112\066\115" +
    "\072\121\073\105\075\114\076\116\100\uff8e\101\uff8e\001" +
    "\002\000\144\003\uff90\004\uff90\005\uff90\007\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90" +
    "\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\040\uff90\041\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\065\uff90\066\uff90\072\uff90\073\uff90" +
    "\075\uff90\076\uff90\100\uff90\101\uff90\102\uff90\001\002\000" +
    "\144\003\uff91\004\uff91\005\uff91\007\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\040" +
    "\uff91\041\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\057\uff91\065\uff91\066\uff91\072\uff91\073\uff91\075\uff91" +
    "\076\uff91\100\uff91\101\uff91\102\uff91\001\002\000\030\036" +
    "\070\057\047\067\076\070\075\073\067\077\077\102\102" +
    "\103\066\104\072\105\073\106\074\001\002\000\042\020" +
    "\106\021\113\027\107\030\120\031\117\032\122\034\110" +
    "\035\111\065\112\066\115\072\121\073\105\075\114\076" +
    "\116\100\uff8f\101\uff8f\001\002\000\040\020\106\021\113" +
    "\027\107\030\120\031\117\032\122\034\110\035\111\046" +
    "\247\065\112\066\115\072\121\073\105\075\114\076\116" +
    "\001\002\000\046\003\055\011\252\017\061\024\065\026" +
    "\031\034\007\035\011\041\016\044\053\045\050\047\044" +
    "\050\046\051\032\052\043\053\045\054\056\057\047\102" +
    "\010\001\002\000\046\003\055\011\253\017\061\024\065" +
    "\026\031\034\007\035\011\041\016\044\053\045\050\047" +
    "\044\050\046\051\032\052\043\053\045\054\056\057\047" +
    "\102\010\001\002\000\070\003\uffbf\004\uffbf\005\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\022\uffbf\024\uffbf\026\uffbf\033\uffbf\034\uffbf\035\uffbf\041" +
    "\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\057\uffbf\102\uffbf\001\002\000\070\003" +
    "\uffba\004\uffba\005\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\022\uffba\024\uffba\026\uffba\033" +
    "\uffba\034\uffba\035\uffba\041\uffba\044\uffba\045\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\057\uffba\102" +
    "\uffba\001\002\000\070\003\uffbb\004\uffbb\005\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\022" +
    "\uffbb\024\uffbb\026\uffbb\033\uffbb\034\uffbb\035\uffbb\041\uffbb" +
    "\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\057\uffbb\102\uffbb\001\002\000\004\071\255" +
    "\001\002\000\030\036\070\057\047\067\076\070\075\073" +
    "\067\077\077\102\102\103\066\104\072\105\073\106\074" +
    "\001\002\000\040\020\106\021\113\023\257\027\107\030" +
    "\120\031\117\032\122\034\110\035\111\065\112\066\115" +
    "\072\121\073\105\075\114\076\116\001\002\000\030\036" +
    "\070\057\047\067\076\070\075\073\067\077\077\102\102" +
    "\103\066\104\072\105\073\106\074\001\002\000\042\007" +
    "\261\020\106\021\113\027\107\030\120\031\117\032\122" +
    "\034\110\035\111\046\262\065\112\066\115\072\121\073" +
    "\105\075\114\076\116\001\002\000\030\036\070\057\047" +
    "\067\076\070\075\073\067\077\077\102\102\103\066\104" +
    "\072\105\073\106\074\001\002\000\046\003\055\015\265" +
    "\017\061\024\065\026\031\034\007\035\011\041\016\044" +
    "\053\045\050\047\044\050\046\051\032\052\043\053\045" +
    "\054\056\057\047\102\010\001\002\000\070\003\uffc0\004" +
    "\uffc0\005\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\022\uffc0\024\uffc0\026\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\041\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\057\uffc0\102\uffc0\001" +
    "\002\000\046\003\055\015\266\017\061\024\065\026\031" +
    "\034\007\035\011\041\016\044\053\045\050\047\044\050" +
    "\046\051\032\052\043\053\045\054\056\057\047\102\010" +
    "\001\002\000\070\003\uffbc\004\uffbc\005\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc" +
    "\024\uffbc\026\uffbc\033\uffbc\034\uffbc\035\uffbc\041\uffbc\044" +
    "\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\057\uffbc\102\uffbc\001\002\000\070\003\uffbd\004" +
    "\uffbd\005\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\022\uffbd\024\uffbd\026\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\041\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\057\uffbd\102\uffbd\001" +
    "\002\000\040\020\106\021\113\027\107\030\120\031\117" +
    "\032\122\034\110\035\111\046\270\065\112\066\115\072" +
    "\121\073\105\075\114\076\116\001\002\000\046\003\055" +
    "\015\265\017\061\024\065\026\031\034\007\035\011\041" +
    "\016\044\053\045\050\047\044\050\046\051\032\052\043" +
    "\053\045\054\056\057\047\102\010\001\002\000\070\003" +
    "\uffc1\004\uffc1\005\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\022\uffc1\024\uffc1\026\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\041\uffc1\044\uffc1\045\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\057\uffc1\102" +
    "\uffc1\001\002\000\120\003\uffed\004\uffed\005\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\106\021\113\022\uffed\024\uffed\026\uffed\027\107\030\120" +
    "\031\117\032\122\033\uffed\034\110\035\111\041\uffed\044" +
    "\uffed\045\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\057\uffed\065\112\066\115\072\121\073\105\075" +
    "\114\076\116\102\uffed\001\002\000\016\003\uffdd\025\uffdd" +
    "\040\uffdd\041\uffdd\055\uffdd\056\uffdd\001\002\000\030\036" +
    "\070\057\047\067\076\070\075\073\067\077\077\102\102" +
    "\103\066\104\072\105\073\106\074\001\002\000\010\034" +
    "\007\035\011\102\010\001\002\000\010\042\uffe5\071\uffe5" +
    "\101\uffe5\001\002\000\120\003\uffe6\004\uffe6\005\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\106\021\113\022\uffe6\024\uffe6\026\uffe6\027\107\030" +
    "\120\031\117\032\122\033\uffe6\034\110\035\111\041\uffe6" +
    "\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\057\uffe6\065\112\066\115\072\121\073\105" +
    "\075\114\076\116\102\uffe6\001\002\000\030\036\070\057" +
    "\047\067\076\070\075\073\067\077\077\102\102\103\066" +
    "\104\072\105\073\106\074\001\002\000\120\003\uffbe\004" +
    "\uffbe\005\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\106\021\113\022\uffbe\024\uffbe\026" +
    "\uffbe\027\107\030\120\031\117\032\122\033\uffbe\034\110" +
    "\035\111\041\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\057\uffbe\065\112\066\115" +
    "\072\121\073\105\075\114\076\116\102\uffbe\001\002\000" +
    "\046\003\055\017\061\022\uffb9\024\065\026\031\034\007" +
    "\035\011\041\016\044\053\045\050\047\044\050\046\051" +
    "\032\052\043\053\045\054\056\057\047\102\010\001\002" +
    "\000\120\003\uffb6\004\uffb6\005\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\106\021\113" +
    "\022\uffb6\024\uffb6\026\uffb6\027\107\030\120\031\117\032" +
    "\122\033\uffb6\034\110\035\111\041\uffb6\044\uffb6\045\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\057" +
    "\uffb6\065\112\066\115\072\121\073\105\075\114\076\116" +
    "\102\uffb6\001\002\000\016\003\uffe8\025\uffe8\040\uffe8\041" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\006\042\306\101\275" +
    "\001\002\000\014\060\207\061\211\062\205\063\206\064" +
    "\210\001\002\000\004\010\310\001\002\000\030\036\070" +
    "\057\047\067\076\070\075\073\067\077\077\102\102\103" +
    "\066\104\072\105\073\106\074\001\002\000\130\003\uffe7" +
    "\004\uffe7\005\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\106\021\113\022\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\107\030\120\031\117\032\122\033" +
    "\uffe7\034\110\035\111\040\uffe7\041\uffe7\044\uffe7\045\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\065\112\066\115\072\121\073\105" +
    "\075\114\076\116\102\uffe7\001\002\000\014\060\207\061" +
    "\211\062\205\063\206\064\210\001\002\000\050\003\055" +
    "\006\315\012\316\017\061\024\065\026\031\034\007\035" +
    "\011\041\016\044\053\045\050\047\044\050\046\051\032" +
    "\052\043\053\045\054\056\057\047\102\010\001\002\000" +
    "\046\003\055\012\324\017\061\024\065\026\031\034\007" +
    "\035\011\041\016\044\053\045\050\047\044\050\046\051" +
    "\032\052\043\053\045\054\056\057\047\102\010\001\002" +
    "\000\004\077\320\001\002\000\016\003\uffde\025\uffde\040" +
    "\uffde\041\uffde\055\uffde\056\uffde\001\002\000\016\003\uffe2" +
    "\025\uffe2\040\uffe2\041\uffe2\055\uffe2\056\uffe2\001\002\000" +
    "\010\034\007\035\011\102\010\001\002\000\006\100\322" +
    "\101\203\001\002\000\046\003\055\012\316\017\061\024" +
    "\065\026\031\034\007\035\011\041\016\044\053\045\050" +
    "\047\044\050\046\051\032\052\043\053\045\054\056\057" +
    "\047\102\010\001\002\000\016\003\uffe3\025\uffe3\040\uffe3" +
    "\041\uffe3\055\uffe3\056\uffe3\001\002\000\016\003\uffdf\025" +
    "\uffdf\040\uffdf\041\uffdf\055\uffdf\056\uffdf\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\046\005\001\001\000\014\003\022\014\020\015\014" +
    "\017\023\020\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\311\001\001\000\002\001\001\000\006\021" +
    "\304\046\057\001\001\000\004\013\303\001\001\000\004" +
    "\046\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\020\015\025\017\023\020\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\041\013\062\016\053\017\033\021\040\022\050\023\036" +
    "\024\035\030\061\031\032\032\034\033\056\037\027\042" +
    "\037\046\057\001\001\000\002\001\001\000\014\007\302" +
    "\010\077\011\100\012\103\013\070\001\001\000\036\004" +
    "\301\013\062\016\053\017\033\021\040\022\050\023\036" +
    "\024\035\030\061\031\032\032\034\033\056\042\037\046" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\013\062\016\053\017\033" +
    "\021\040\022\165\023\036\024\035\030\061\031\032\032" +
    "\034\033\056\042\037\046\057\001\001\000\014\007\271" +
    "\010\077\011\100\012\103\013\070\001\001\000\004\046" +
    "\253\001\001\000\002\001\001\000\014\007\245\010\077" +
    "\011\100\012\103\013\070\001\001\000\004\046\235\001" +
    "\001\000\014\007\214\010\077\011\100\012\103\013\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\144\010\077\011\100\012\103\013\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\102\010\077\011\100" +
    "\012\103\013\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\143\010\077\011\100\012\103\013\070\001" +
    "\001\000\014\007\142\010\077\011\100\012\103\013\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\140\010\077\011\100\012\103\013\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\137\010" +
    "\077\011\100\012\103\013\070\001\001\000\014\007\136" +
    "\010\077\011\100\012\103\013\070\001\001\000\014\007" +
    "\135\010\077\011\100\012\103\013\070\001\001\000\014" +
    "\007\134\010\077\011\100\012\103\013\070\001\001\000" +
    "\014\007\133\010\077\011\100\012\103\013\070\001\001" +
    "\000\014\007\132\010\077\011\100\012\103\013\070\001" +
    "\001\000\014\007\131\010\077\011\100\012\103\013\070" +
    "\001\001\000\014\007\130\010\077\011\100\012\103\013" +
    "\070\001\001\000\014\007\127\010\077\011\100\012\103" +
    "\013\070\001\001\000\014\007\126\010\077\011\100\012" +
    "\103\013\070\001\001\000\014\007\125\010\077\011\100" +
    "\012\103\013\070\001\001\000\014\007\124\010\077\011" +
    "\100\012\103\013\070\001\001\000\014\007\123\010\077" +
    "\011\100\012\103\013\070\001\001\000\014\007\122\010" +
    "\077\011\100\012\103\013\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\146\013\062" +
    "\016\053\017\033\021\040\022\050\023\036\024\035\030" +
    "\061\031\032\032\034\033\056\035\147\042\037\044\151" +
    "\045\153\046\057\001\001\000\034\013\062\016\053\017" +
    "\033\021\040\022\165\023\036\024\035\030\061\031\032" +
    "\032\034\033\056\042\037\046\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\163" +
    "\013\062\016\053\017\033\021\040\022\050\023\036\024" +
    "\035\030\061\031\032\032\034\033\056\035\162\042\037" +
    "\046\057\001\001\000\002\001\001\000\014\007\155\010" +
    "\077\011\100\012\103\013\070\001\001\000\002\001\001" +
    "\000\044\004\146\013\062\016\053\017\033\021\040\022" +
    "\050\023\036\024\035\030\061\031\032\032\034\033\056" +
    "\035\157\042\037\044\160\045\161\046\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\013\062\016\053\017\033\021\040\022" +
    "\165\023\036\024\035\030\061\031\032\032\034\033\056" +
    "\042\037\046\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\171\010\077\011\100\012\103\013\070" +
    "\001\001\000\040\004\163\013\062\016\053\017\033\021" +
    "\040\022\050\023\036\024\035\030\061\031\032\032\034" +
    "\033\056\035\170\042\037\046\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\146\013\062\016\053" +
    "\017\033\021\040\022\050\023\036\024\035\030\061\031" +
    "\032\032\034\033\056\035\173\042\037\044\174\045\175" +
    "\046\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\200\046\177\001\001\000\004" +
    "\034\213\001\001\000\002\001\001\000\040\004\041\013" +
    "\062\016\053\017\033\021\040\022\050\023\036\024\035" +
    "\030\061\031\032\032\034\033\056\037\212\042\037\046" +
    "\057\001\001\000\004\046\203\001\001\000\004\034\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\223\026\221\027\224\043\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\232\043\231\001\001\000\014\007\226\010\077\011\100" +
    "\012\103\013\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\230" +
    "\013\062\016\053\017\033\021\040\022\050\023\036\024" +
    "\035\030\061\031\032\032\034\033\056\042\037\046\057" +
    "\001\001\000\034\013\062\016\053\017\033\021\040\022" +
    "\165\023\036\024\035\030\061\031\032\032\034\033\056" +
    "\042\037\046\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\234\013\062\016\053\017\033\021\040" +
    "\022\050\023\036\024\035\030\061\031\032\032\034\033" +
    "\056\042\037\046\057\001\001\000\034\013\062\016\053" +
    "\017\033\021\040\022\165\023\036\024\035\030\061\031" +
    "\032\032\034\033\056\042\037\046\057\001\001\000\002" +
    "\001\001\000\016\005\237\007\240\010\077\011\100\012" +
    "\103\013\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\244\010" +
    "\077\011\100\012\103\013\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\247\013\062\016\053\017" +
    "\033\021\040\022\050\023\036\024\035\030\061\031\032" +
    "\032\034\033\056\041\250\042\037\046\057\001\001\000" +
    "\034\013\062\016\053\017\033\021\040\022\165\023\036" +
    "\024\035\030\061\031\032\032\034\033\056\042\037\046" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\255\010\077\011" +
    "\100\012\103\013\070\001\001\000\002\001\001\000\014" +
    "\007\257\010\077\011\100\012\103\013\070\001\001\000" +
    "\002\001\001\000\014\007\266\010\077\011\100\012\103" +
    "\013\070\001\001\000\040\004\263\013\062\016\053\017" +
    "\033\021\040\022\050\023\036\024\035\030\061\031\032" +
    "\032\034\033\056\040\262\042\037\046\057\001\001\000" +
    "\002\001\001\000\034\013\062\016\053\017\033\021\040" +
    "\022\165\023\036\024\035\030\061\031\032\032\034\033" +
    "\056\042\037\046\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\263\013\062\016" +
    "\053\017\033\021\040\022\050\023\036\024\035\030\061" +
    "\031\032\032\034\033\056\040\270\042\037\046\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\276\010\077\011\100\012\103\013\070\001" +
    "\001\000\004\046\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\300\010\077\011\100\012\103\013" +
    "\070\001\001\000\002\001\001\000\034\013\062\016\053" +
    "\017\033\021\040\022\165\023\036\024\035\030\061\031" +
    "\032\032\034\033\056\042\037\046\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\306\001\001\000\002\001\001\000\014\007\310\010\077" +
    "\011\100\012\103\013\070\001\001\000\002\001\001\000" +
    "\004\034\312\001\001\000\040\004\313\013\062\016\053" +
    "\017\033\021\040\022\050\023\036\024\035\030\061\031" +
    "\032\032\034\033\056\036\316\042\037\046\057\001\001" +
    "\000\034\013\062\016\053\017\033\021\040\022\165\023" +
    "\036\024\035\030\061\031\032\032\034\033\056\042\037" +
    "\046\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\320\046\177\001\001\000\002" +
    "\001\001\000\040\004\313\013\062\016\053\017\033\021" +
    "\040\022\050\023\036\024\035\030\061\031\032\032\034" +
    "\033\056\036\322\042\037\046\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String fileName;
    @SuppressWarnings("deprecation")
    public Parser(Scanner s) {
        super(s);
    }
    public void syntax_error(Symbol sym) {
        Outs.errors.add(new Error(sym.left, sym.right, TypeError.SYNTAX, "No se esperaba «" + sym.value + "»"));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        Outs.errors.add(new Error(sym.left, sym.right, TypeError.SYNTAX, "No se esperaba (0) «" + sym.value + "»"));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_begin IDS INSTSGLOBAL RW_end 
            {
              ArrayList<Instruction> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		fileName = fn; RESULT = ins;              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_begin IDS RW_end 
            {
              ArrayList<Instruction> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		fileName = fn; RESULT = new ArrayList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> insts = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		insts.add(inst); RESULT = insts;              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(inst));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= INITVAR 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= DECLFUNC 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= error 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Statement> RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> insts = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		insts.add(inst); RESULT = insts;              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Statement> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(inst));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= INITVAR 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= ASSIGN 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= IF 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= SWITCH 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= FOR 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= WHILE 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= DOWHILE 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= CALLFUNC 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression inst = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= PRINT 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= RW_return EXP 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Return(rleft, rright, exp);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= RW_back 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Return(rleft, rright, null);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= RW_continue 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Continue(instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= RW_break 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Break(instleft, instright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CALLMAINFUNC ::= RW_start CALLFUNC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fnc = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MainMethod(sleft, sright, fnc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INITVAR ::= RW_insert LISTID RW_as TYPE RW_equ EXP 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitVar(ileft, iright, ids, exp, t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITVAR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASSIGN ::= LISTID TK_prompt EXP 
            {
              Instruction RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(idsleft, idsright, ids, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTID ::= LISTID TK_comma IDS 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ls; RESULT.add(id);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTID ::= IDS 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLFUNC ::= RW_func IDS TYPE RW_params TK_lpar LISTPARAMS TK_rpar INSTFUNC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, l,                 b ,t);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLFUNC ::= RW_func IDS TYPE INSTFUNC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, new ArrayList<>(), b ,t);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLFUNC ::= RW_meth IDS RW_params TK_lpar LISTPARAMS TK_rpar INSTMETH 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, l,                 b ,Type.NULL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLFUNC ::= RW_meth IDS INSTMETH 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, new ArrayList<>(), b ,Type.NULL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTFUNC ::= INSTRUCTIONS RW_endfunc 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFUNC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTFUNC ::= RW_endfunc 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFUNC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTMETH ::= INSTRUCTIONS RW_endmeth 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTMETH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTMETH ::= RW_endmeth 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTMETH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTPARAMS ::= LISTPARAMS TK_comma IDS TYPE 
            {
              ArrayList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(new Parameter(idleft, idright, id, t));                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTPARAMS ::= IDS TYPE 
            {
              ArrayList<Parameter> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new Parameter(idleft, idright, id, t)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= RW_if EXP RW_then ELSEIF 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIf b1 = (ElseIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, new Block(b1left, b1right, b1.instructions), b1._if);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= RW_if EXP RW_then ELSE 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIf b1 = (ElseIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, new Block(b1left, b1right, b1.instructions), b1._if);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= RW_if EXP RW_then INSTIF 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, b1, null);                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSEIF ::= INSTRUCTIONS RW_elseif EXP RW_then ELSEIF 
            {
              ElseIf RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> b1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIf b2 = (ElseIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(b1, new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSEIF ::= INSTRUCTIONS RW_elseif EXP RW_then ELSE 
            {
              ElseIf RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> b1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIf b2 = (ElseIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(b1, new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSEIF ::= INSTRUCTIONS RW_elseif EXP RW_then INSTIF 
            {
              ElseIf RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> b1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(b1, new If(rleft, rright, cn, b2, null));                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSEIF ::= RW_elseif EXP RW_then ELSEIF 
            {
              ElseIf RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIf b2 = (ElseIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(new ArrayList<>(), new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSEIF ::= RW_elseif EXP RW_then ELSE 
            {
              ElseIf RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIf b2 = (ElseIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(new ArrayList<>(), new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSEIF ::= RW_elseif EXP RW_then INSTIF 
            {
              ElseIf RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(new ArrayList<>(), new If(rleft, rright, cn, b2, null));                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= INSTRUCTIONS RW_else INSTIF 
            {
              ElseIf RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Statement> ins = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block insif = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(ins, insif);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE ::= RW_else INSTIF 
            {
              ElseIf RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block insif = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIf(new ArrayList<>(), insif);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTIF ::= INSTRUCTIONS RW_endif 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTIF ::= RW_endif 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCH ::= RW_switch EXP RW_do CASESDEFAULT RW_endswitch 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(sleft, sright, exp, (ArrayList<Case>) b[0], (Block) b[1]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= RW_switch EXP RW_do RW_endswitch 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Switch(sleft, sright, exp, null, null);                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASESDEFAULT ::= CASES DEFAULT 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> c = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASESDEFAULT ::= CASES 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> c = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASESDEFAULT ::= DEFAULT 
            {
              Object[] RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {null, d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASES ::= CASES CASE 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(c);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASES ::= CASE 
            {
              ArrayList<Statement> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(c));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE ::= RW_case EXP RW_then INSTRUCTIONS 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> b = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(cleft, cright, exp, new Block(bleft, bright, b));                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASE ::= RW_case EXP RW_then 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Case(cleft, cright, exp, new Block(cleft, cright, new ArrayList<>()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFAULT ::= RW_else RW_then INSTRUCTIONS 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> b = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(dleft, dright, b);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEFAULT ::= RW_else RW_then 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(dleft, dright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= RW_for IDS TK_prompt EXP RW_to EXP RW_incr EXP RW_do INSTFOR 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression v2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression v3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(fleft, fright, id, v1, v2, v3,   b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FOR ::= RW_for IDS TK_prompt EXP RW_to EXP RW_do INSTFOR 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression v2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(fleft, fright, id, v1, v2, null, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= RW_while EXP RW_do INSTWHILE 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(wleft, wright, exp, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DOWHILE ::= INSTREPEAT RW_until EXP 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DoWhile(dleft, dright, exp, d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTFOR ::= INSTRUCTIONS RW_endfor 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTFOR ::= RW_endfor 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTWHILE ::= INSTRUCTIONS RW_endwhile 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTWHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTWHILE ::= RW_endwhile 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTWHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTREPEAT ::= RW_repeat INSTRUCTIONS 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTREPEAT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTREPEAT ::= RW_repeat 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTREPEAT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRINT ::= RW_println EXP 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Print(pleft, pright, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRINT ::= RW_print EXP 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Print(pleft, pright, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE ::= RW_str 
            {
              Type RESULT =null;
		RESULT = Type.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE ::= RW_int 
            {
              Type RESULT =null;
		RESULT = Type.INT;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE ::= RW_char 
            {
              Type RESULT =null;
		RESULT = Type.CHAR;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPE ::= RW_bool 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPE ::= RW_double 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IDS ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IDS ::= RW_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IDS ::= RW_and 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= ARITHMETICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= RELATIONALS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= LOGICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= CALLFUNC 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= TK_id 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AccessVar(idleft, idright, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= TK_str 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= TK_char 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.CHAR);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= TK_int 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.INT);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= TK_double 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= RW_true 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= RW_false 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= TK_lpar EXP TK_rpar 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		exp.isGrp = true; RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARITHMETICS ::= EXP TK_div EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARITHMETICS ::= EXP RW_pow EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARITHMETICS ::= EXP RW_mod EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARITHMETICS ::= TK_minus EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(sleft, sright, null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RELATIONALS ::= EXP RW_equequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RELATIONALS ::= EXP RW_notequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RELATIONALS ::= EXP RW_lessequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RELATIONALS ::= EXP RW_greaterequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RELATIONALS ::= EXP RW_less EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RELATIONALS ::= EXP RW_greater EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOGICS ::= EXP RW_and EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOGICS ::= EXP RW_or EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOGICS ::= RW_not EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(sleft, sright, null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CALLFUNC ::= RW_exec IDS TK_lpar LISTARGS TK_rpar 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunction(exleft, exright, id, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CALLFUNC ::= RW_exec IDS TK_lpar TK_rpar 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallFunction(exleft, exright, id, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              ArrayList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(e1);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LISTARGS ::= EXP 
            {
              ArrayList<Expression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(e1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
