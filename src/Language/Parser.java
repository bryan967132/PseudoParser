
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.*;
import Classes.Abstracts.*;
import Classes.Expressions.*;
import Classes.Instructions.*;
import Classes.Utils.Parameter;
import Classes.Utils.Type;
import Classes.Utils.ElseIfStruct;
import Classes.Utils.Error;
import Classes.Utils.TypeError;
import Classes.Utils.Outs;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\003\004\000\002\003\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\004\004\000\002\004\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\014\004\000\002\017\010\000\002\033\005\000\002\021" +
    "\005\000\002\021\003\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\006\000\002\044\006\000\002" +
    "\044\006\000\002\045\005\000\002\045\004\000\002\035" +
    "\004\000\002\035\003\000\002\024\007\000\002\024\006" +
    "\000\002\025\004\000\002\025\003\000\002\025\003\000" +
    "\002\026\004\000\002\026\003\000\002\027\006\000\002" +
    "\027\005\000\002\043\005\000\002\043\004\000\002\030" +
    "\014\000\002\030\012\000\002\031\006\000\002\032\005" +
    "\000\002\040\004\000\002\040\003\000\002\041\004\000" +
    "\002\041\003\000\002\042\004\000\002\042\003\000\002" +
    "\020\012\000\002\020\006\000\002\020\011\000\002\020" +
    "\005\000\002\036\004\000\002\036\003\000\002\037\004" +
    "\000\002\037\003\000\002\006\006\000\002\006\004\000" +
    "\002\013\007\000\002\013\006\000\002\005\005\000\002" +
    "\005\003\000\002\016\004\000\002\016\004\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\037\005\001\002\000\004\002\325\001" +
    "\002\000\010\034\006\035\011\102\010\001\002\000\102" +
    "\003\uffab\006\uffab\013\uffab\017\uffab\024\uffab\025\uffab\026" +
    "\uffab\034\uffab\035\uffab\040\uffab\041\uffab\042\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\071\uffab\077\uffab\101\uffab\102\uffab\001" +
    "\002\000\016\003\023\025\020\040\012\041\016\055\021" +
    "\056\014\001\002\000\102\003\uffac\006\uffac\013\uffac\017" +
    "\uffac\024\uffac\025\uffac\026\uffac\034\uffac\035\uffac\040\uffac" +
    "\041\uffac\042\uffac\044\uffac\045\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\071\uffac\077" +
    "\uffac\101\uffac\102\uffac\001\002\000\102\003\uffaa\006\uffaa" +
    "\013\uffaa\017\uffaa\024\uffaa\025\uffaa\026\uffaa\034\uffaa\035" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\071\uffaa\077\uffaa\101\uffaa\102\uffaa\001\002\000\004\002" +
    "\uffff\001\002\000\016\003\ufffa\025\ufffa\040\ufffa\041\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\010\034\006\035\011\102" +
    "\010\001\002\000\016\003\ufffd\025\ufffd\040\ufffd\041\ufffd" +
    "\055\ufffd\056\ufffd\001\002\000\010\034\006\035\011\102" +
    "\010\001\002\000\016\003\ufffb\025\ufffb\040\ufffb\041\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\004\057\046\001\002\000" +
    "\010\034\006\035\011\102\010\001\002\000\016\003\ufffc" +
    "\025\ufffc\040\ufffc\041\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\016\003\ufff9\025\ufff9\040\ufff9\041\ufff9\055\ufff9\056\ufff9" +
    "\001\002\000\016\003\023\025\020\040\025\041\016\055" +
    "\021\056\014\001\002\000\004\002\000\001\002\000\016" +
    "\003\ufffe\025\ufffe\040\ufffe\041\ufffe\055\ufffe\056\ufffe\001" +
    "\002\000\050\003\056\006\051\013\064\017\062\024\065" +
    "\026\031\034\006\035\011\041\016\044\052\045\047\047" +
    "\041\050\044\051\032\052\042\053\043\054\057\057\046" +
    "\102\010\001\002\000\016\003\uffbe\025\uffbe\040\uffbe\041" +
    "\uffbe\055\uffbe\056\uffbe\001\002\000\030\036\071\057\046" +
    "\067\076\070\075\073\067\077\077\102\102\103\066\104" +
    "\072\105\073\106\074\001\002\000\046\003\056\017\062" +
    "\022\uffc2\024\065\026\031\034\006\035\011\041\016\044" +
    "\052\045\047\047\041\050\044\051\032\052\042\053\043" +
    "\054\057\057\046\102\010\001\002\000\070\003\ufff1\004" +
    "\ufff1\005\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\022\ufff1\024\ufff1\026\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\041\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\057\ufff1\102\ufff1\001" +
    "\002\000\004\022\300\001\002\000\006\071\274\101\275" +
    "\001\002\000\070\003\ufff3\004\ufff3\005\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\022\ufff3" +
    "\024\ufff3\026\ufff3\033\ufff3\034\ufff3\035\ufff3\041\ufff3\044" +
    "\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\057\ufff3\102\ufff3\001\002\000\046\003\056\013" +
    "\273\017\062\024\065\026\031\034\006\035\011\041\016" +
    "\044\052\045\047\047\041\050\044\051\032\052\042\053" +
    "\043\054\057\057\046\102\010\001\002\000\070\003\ufff0" +
    "\004\ufff0\005\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\022\ufff0\024\ufff0\026\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\057\ufff0\102\ufff0" +
    "\001\002\000\010\034\006\035\011\102\010\001\002\000" +
    "\030\036\071\057\046\067\076\070\075\073\067\077\077" +
    "\102\102\103\066\104\072\105\073\106\074\001\002\000" +
    "\070\003\uffec\004\uffec\005\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\022\uffec\024\uffec\026" +
    "\uffec\033\uffec\034\uffec\035\uffec\041\uffec\044\uffec\045\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\057" +
    "\uffec\102\uffec\001\002\000\030\036\071\057\046\067\076" +
    "\070\075\073\067\077\077\102\102\103\066\104\072\105" +
    "\073\106\074\001\002\000\070\003\ufff4\004\ufff4\005\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\041\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\057\ufff4\102\ufff4\001\002\000\010" +
    "\034\006\035\011\102\010\001\002\000\030\036\071\057" +
    "\046\067\076\070\075\073\067\077\077\102\102\103\066" +
    "\104\072\105\073\106\074\001\002\000\070\003\ufff7\004" +
    "\ufff7\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\022\ufff7\024\ufff7\026\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\102\ufff7\001" +
    "\002\000\004\077\177\001\002\000\030\036\071\057\046" +
    "\067\076\070\075\073\067\077\077\102\102\103\066\104" +
    "\072\105\073\106\074\001\002\000\070\003\ufff2\004\ufff2" +
    "\005\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\022\ufff2\024\ufff2\026\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2\102\ufff2\001\002" +
    "\000\070\003\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\024\ufff6" +
    "\026\ufff6\033\ufff6\034\ufff6\035\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\057\ufff6\102\ufff6\001\002\000\070\003\uffee\004\uffee\005" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\022\uffee\024\uffee\026\uffee\033\uffee\034\uffee\035" +
    "\uffee\041\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\057\uffee\102\uffee\001\002\000" +
    "\070\003\uffe9\004\uffe9\005\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\022\uffe9\024\uffe9\026" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\041\uffe9\044\uffe9\045\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057" +
    "\uffe9\102\uffe9\001\002\000\070\003\uffeb\004\uffeb\005\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\022\uffeb\024\uffeb\026\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\057\uffeb\102\uffeb\001\002\000\010" +
    "\042\uffe4\071\uffe4\101\uffe4\001\002\000\070\003\ufff5\004" +
    "\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\022\ufff5\024\ufff5\026\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\041\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\057\ufff5\102\ufff5\001" +
    "\002\000\030\036\071\057\046\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\070\003\uffef\004\uffef\005\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\022\uffef\024" +
    "\uffef\026\uffef\033\uffef\034\uffef\035\uffef\041\uffef\044\uffef" +
    "\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\057\uffef\102\uffef\001\002\000\016\003\uffba\025\uffba" +
    "\040\uffba\041\uffba\055\uffba\056\uffba\001\002\000\070\003" +
    "\uffea\004\uffea\005\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\022\uffea\024\uffea\026\uffea\033" +
    "\uffea\034\uffea\035\uffea\041\uffea\044\uffea\045\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea\102" +
    "\uffea\001\002\000\144\003\uffa2\004\uffa2\005\uffa2\007\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\040\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\065\uffa2\066\uffa2\072\uffa2" +
    "\073\uffa2\075\uffa2\076\uffa2\100\uffa2\101\uffa2\102\uffa2\001" +
    "\002\000\030\036\071\057\046\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\144\003\uffa6\004\uffa6\005\uffa6\007\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\065\uffa6\066\uffa6\072\uffa6\073\uffa6" +
    "\075\uffa6\076\uffa6\100\uffa6\101\uffa6\102\uffa6\001\002\000" +
    "\030\036\071\057\046\067\076\070\075\073\067\077\077" +
    "\102\102\103\066\104\072\105\073\106\074\001\002\000" +
    "\144\003\uffa1\004\uffa1\005\uffa1\007\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\040" +
    "\uffa1\041\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\065\uffa1\066\uffa1\072\uffa1\073\uffa1\075\uffa1" +
    "\076\uffa1\100\uffa1\101\uffa1\102\uffa1\001\002\000\144\003" +
    "\uffa4\004\uffa4\005\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\040\uffa4\041" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\065\uffa4\066\uffa4\072\uffa4\073\uffa4\075\uffa4\076\uffa4" +
    "\100\uffa4\101\uffa4\102\uffa4\001\002\000\144\003\uffa3\004" +
    "\uffa3\005\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\040\uffa3\041\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\065" +
    "\uffa3\066\uffa3\072\uffa3\073\uffa3\075\uffa3\076\uffa3\100\uffa3" +
    "\101\uffa3\102\uffa3\001\002\000\144\003\uff9f\004\uff9f\005" +
    "\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\065\uff9f\066" +
    "\uff9f\072\uff9f\073\uff9f\075\uff9f\076\uff9f\100\uff9f\101\uff9f" +
    "\102\uff9f\001\002\000\144\003\uffa0\004\uffa0\005\uffa0\007" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\040\uffa0\041\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\055\uffa0\056\uffa0\057\uffa0\065\uffa0\066\uffa0\072" +
    "\uffa0\073\uffa0\075\uffa0\076\uffa0\100\uffa0\101\uffa0\102\uffa0" +
    "\001\002\000\030\036\071\057\046\067\076\070\075\073" +
    "\067\077\077\102\102\103\066\104\072\105\073\106\074" +
    "\001\002\000\144\003\uffa9\004\uffa9\005\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\065\uffa9\066\uffa9\072\uffa9\073" +
    "\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9\001\002" +
    "\000\144\003\uffa8\004\uffa8\005\uffa8\007\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\040\uffa8\041\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\065\uffa8\066\uffa8\072\uffa8\073\uffa8\075" +
    "\uffa8\076\uffa8\100\uffa8\101\uffa8\102\uffa8\001\002\000\144" +
    "\003\uffa5\004\uffa5\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\040\uffa5" +
    "\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\065\uffa5\066\uffa5\072\uffa5\073\uffa5\075\uffa5\076" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\001\002\000\120\003\uffb3" +
    "\004\uffb3\005\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\106\021\113\022\uffb3\024\uffb3" +
    "\026\uffb3\027\107\030\121\031\117\032\122\033\uffb3\034" +
    "\110\035\111\041\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\057\uffb3\065\112\066" +
    "\114\072\120\073\105\075\116\076\115\102\uffb3\001\002" +
    "\000\144\003\uffa7\004\uffa7\005\uffa7\007\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\040\uffa7\041\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\065\uffa7\066\uffa7\072\uffa7\073\uffa7\075" +
    "\uffa7\076\uffa7\100\uffa7\101\uffa7\102\uffa7\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\144" +
    "\003\uff95\004\uff95\005\uff95\007\uff95\011\uff95\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\106\021\113" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\107\030" +
    "\121\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\040\uff95" +
    "\041\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95" +
    "\057\uff95\065\112\066\114\072\120\073\105\075\116\076" +
    "\115\100\uff95\101\uff95\102\uff95\001\002\000\144\003\uff92" +
    "\004\uff92\005\uff92\007\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\040\uff92\041\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\065\112\066\114\072\120\073\105\075\116\076\115\100" +
    "\uff92\101\uff92\102\uff92\001\002\000\144\003\uff9d\004\uff9d" +
    "\005\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\040\uff9d\041\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\065\112" +
    "\066\114\072\uff9d\073\uff9d\075\116\076\115\100\uff9d\101" +
    "\uff9d\102\uff9d\001\002\000\144\003\uff96\004\uff96\005\uff96" +
    "\007\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\106\021\113\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\107\030\121\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\040\uff96\041\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\065\112\066\114" +
    "\072\120\073\105\075\116\076\115\100\uff96\101\uff96\102" +
    "\uff96\001\002\000\144\003\uff9b\004\uff9b\005\uff9b\007\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\040\uff9b\041\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\065\112\066\uff9b\072\uff9b" +
    "\073\uff9b\075\uff9b\076\uff9b\100\uff9b\101\uff9b\102\uff9b\001" +
    "\002\000\144\003\uff9a\004\uff9a\005\uff9a\007\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\040\uff9a\041\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\065\112\066\uff9a\072\uff9a\073\uff9a" +
    "\075\uff9a\076\uff9a\100\uff9a\101\uff9a\102\uff9a\001\002\000" +
    "\144\003\uff98\004\uff98\005\uff98\007\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\040" +
    "\uff98\041\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\057\uff98\065\112\066\uff98\072\uff98\073\uff98\075\uff98" +
    "\076\uff98\100\uff98\101\uff98\102\uff98\001\002\000\144\003" +
    "\uff94\004\uff94\005\uff94\007\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\040\uff94\041" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057" +
    "\uff94\065\112\066\114\072\120\073\105\075\116\076\115" +
    "\100\uff94\101\uff94\102\uff94\001\002\000\142\003\uff99\004" +
    "\uff99\005\uff99\007\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\040\uff99\041\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\066" +
    "\uff99\072\uff99\073\uff99\075\uff99\076\uff99\100\uff99\101\uff99" +
    "\102\uff99\001\002\000\144\003\uff90\004\uff90\005\uff90\007" +
    "\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\106\021\113\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\107\030\121\031\117\032\122\033\uff90" +
    "\034\uff90\035\uff90\040\uff90\041\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\065\112\066\114\072" +
    "\120\073\105\075\116\076\115\100\uff90\101\uff90\102\uff90" +
    "\001\002\000\144\003\uff8f\004\uff8f\005\uff8f\007\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\020\106\021\113\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\107\030\121\031\117\032\122\033\uff8f\034\uff8f" +
    "\035\111\040\uff8f\041\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\055\uff8f\056\uff8f\057\uff8f\065\112\066\114\072\120\073" +
    "\105\075\116\076\115\100\uff8f\101\uff8f\102\uff8f\001\002" +
    "\000\144\003\uff91\004\uff91\005\uff91\007\uff91\011\uff91\012" +
    "\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\065\112\066\114\072\120\073\105\075" +
    "\116\076\115\100\uff91\101\uff91\102\uff91\001\002\000\144" +
    "\003\uff93\004\uff93\005\uff93\007\uff93\011\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\040\uff93" +
    "\041\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\065\112\066\114\072\120\073\105\075\116\076" +
    "\115\100\uff93\101\uff93\102\uff93\001\002\000\144\003\uff9c" +
    "\004\uff9c\005\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\040\uff9c\041\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\065\112\066\114\072\uff9c\073\uff9c\075\116\076\115\100" +
    "\uff9c\101\uff9c\102\uff9c\001\002\000\040\020\106\021\113" +
    "\027\107\030\121\031\117\032\122\034\110\035\111\065" +
    "\112\066\114\072\120\073\105\075\116\076\115\100\142" +
    "\001\002\000\144\003\uff9e\004\uff9e\005\uff9e\007\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\040\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\065\uff9e\066\uff9e\072\uff9e\073" +
    "\uff9e\075\uff9e\076\uff9e\100\uff9e\101\uff9e\102\uff9e\001\002" +
    "\000\144\003\uff8e\004\uff8e\005\uff8e\007\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\106" +
    "\021\113\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\107\030\121\031\117\032\122\033\uff8e\034\uff8e\035\uff8e" +
    "\040\uff8e\041\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\057\uff8e\065\112\066\114\072\120\073\105\075" +
    "\116\076\115\100\uff8e\101\uff8e\102\uff8e\001\002\000\144" +
    "\003\uff97\004\uff97\005\uff97\007\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\040\uff97" +
    "\041\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\065\uff97\066\uff97\072\uff97\073\uff97\075\uff97\076" +
    "\uff97\100\uff97\101\uff97\102\uff97\001\002\000\040\020\106" +
    "\021\113\027\107\030\121\031\117\032\122\034\110\035" +
    "\111\043\146\065\112\066\114\072\120\073\105\075\116" +
    "\076\115\001\002\000\052\003\056\004\153\005\154\016" +
    "\151\017\062\024\065\026\031\034\006\035\011\041\016" +
    "\044\052\045\047\047\041\050\044\051\032\052\042\053" +
    "\043\054\057\057\046\102\010\001\002\000\052\003\056" +
    "\004\170\005\167\016\165\017\062\024\065\026\031\034" +
    "\006\035\011\041\016\044\052\045\047\047\041\050\044" +
    "\051\032\052\042\053\043\054\057\057\046\102\010\001" +
    "\002\000\070\003\uffe1\004\uffe1\005\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\022\uffe1\024" +
    "\uffe1\026\uffe1\033\uffe1\034\uffe1\035\uffe1\041\uffe1\044\uffe1" +
    "\045\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\057\uffe1\102\uffe1\001\002\000\070\003\uffd7\004\uffd7" +
    "\005\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\022\uffd7\024\uffd7\026\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\057\uffd7\102\uffd7\001\002" +
    "\000\070\003\uffe2\004\uffe2\005\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\022\uffe2\024\uffe2" +
    "\026\uffe2\033\uffe2\034\uffe2\035\uffe2\041\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\057\uffe2\102\uffe2\001\002\000\046\003\056\016\151\017" +
    "\062\024\065\026\031\034\006\035\011\041\016\044\052" +
    "\045\047\047\041\050\044\051\032\052\042\053\043\054" +
    "\057\057\046\102\010\001\002\000\030\036\071\057\046" +
    "\067\076\070\075\073\067\077\077\102\102\103\066\104" +
    "\072\105\073\106\074\001\002\000\070\003\uffe3\004\uffe3" +
    "\005\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\022\uffe3\024\uffe3\026\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\041\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\057\uffe3\102\uffe3\001\002" +
    "\000\040\020\106\021\113\027\107\030\121\031\117\032" +
    "\122\034\110\035\111\043\157\065\112\066\114\072\120" +
    "\073\105\075\116\076\115\001\002\000\052\003\056\004" +
    "\153\005\154\016\151\017\062\024\065\026\031\034\006" +
    "\035\011\041\016\044\052\045\047\047\041\050\044\051" +
    "\032\052\042\053\043\054\057\057\046\102\010\001\002" +
    "\000\070\003\uffdb\004\uffdb\005\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb\024\uffdb" +
    "\026\uffdb\033\uffdb\034\uffdb\035\uffdb\041\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\057\uffdb\102\uffdb\001\002\000\070\003\uffdc\004\uffdc\005" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\022\uffdc\024\uffdc\026\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\057\uffdc\102\uffdc\001\002\000" +
    "\070\003\uffdd\004\uffdd\005\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022\uffdd\024\uffdd\026" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\041\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\057" +
    "\uffdd\102\uffdd\001\002\000\070\003\uffd9\004\uffd9\005\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\022\uffd9\024\uffd9\026\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\057\uffd9\102\uffd9\001\002\000\046" +
    "\003\056\016\165\017\062\024\065\026\031\034\006\035" +
    "\011\041\016\044\052\045\047\047\041\050\044\051\032" +
    "\052\042\053\043\054\057\057\046\102\010\001\002\000" +
    "\070\003\uffd8\004\uffd8\005\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\024\uffd8\026" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\057" +
    "\uffd8\102\uffd8\001\002\000\070\003\ufff8\004\ufff8\005\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\022\ufff8\024\ufff8\026\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\041\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\057\ufff8\102\ufff8\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\046" +
    "\003\056\016\151\017\062\024\065\026\031\034\006\035" +
    "\011\041\016\044\052\045\047\047\041\050\044\051\032" +
    "\052\042\053\043\054\057\057\046\102\010\001\002\000" +
    "\070\003\uffda\004\uffda\005\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\024\uffda\026" +
    "\uffda\033\uffda\034\uffda\035\uffda\041\uffda\044\uffda\045\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\057" +
    "\uffda\102\uffda\001\002\000\040\020\106\021\113\027\107" +
    "\030\121\031\117\032\122\034\110\035\111\043\173\065" +
    "\112\066\114\072\120\073\105\075\116\076\115\001\002" +
    "\000\052\003\056\004\153\005\154\016\151\017\062\024" +
    "\065\026\031\034\006\035\011\041\016\044\052\045\047" +
    "\047\041\050\044\051\032\052\042\053\043\054\057\057" +
    "\046\102\010\001\002\000\070\003\uffde\004\uffde\005\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\022\uffde\024\uffde\026\uffde\033\uffde\034\uffde\035\uffde" +
    "\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\057\uffde\102\uffde\001\002\000\070" +
    "\003\uffdf\004\uffdf\005\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\022\uffdf\024\uffdf\026\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\041\uffdf\044\uffdf\045\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\057\uffdf" +
    "\102\uffdf\001\002\000\070\003\uffe0\004\uffe0\005\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\022\uffe0\024\uffe0\026\uffe0\033\uffe0\034\uffe0\035\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\057\uffe0\102\uffe0\001\002\000\010\034" +
    "\006\035\011\102\010\001\002\000\014\060\207\061\211" +
    "\062\205\063\206\064\210\001\002\000\006\100\202\101" +
    "\203\001\002\000\046\003\056\013\064\017\062\024\065" +
    "\026\031\034\006\035\011\041\016\044\052\045\047\047" +
    "\041\050\044\051\032\052\042\053\043\054\057\057\046" +
    "\102\010\001\002\000\010\034\006\035\011\102\010\001" +
    "\002\000\014\060\207\061\211\062\205\063\206\064\210" +
    "\001\002\000\056\003\uffb1\006\uffb1\010\uffb1\012\uffb1\017" +
    "\uffb1\024\uffb1\026\uffb1\034\uffb1\035\uffb1\041\uffb1\044\uffb1" +
    "\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\057\uffb1\100\uffb1\101\uffb1\102\uffb1\001\002\000\056" +
    "\003\uffae\006\uffae\010\uffae\012\uffae\017\uffae\024\uffae\026" +
    "\uffae\034\uffae\035\uffae\041\uffae\044\uffae\045\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\057\uffae\100" +
    "\uffae\101\uffae\102\uffae\001\002\000\056\003\uffb0\006\uffb0" +
    "\010\uffb0\012\uffb0\017\uffb0\024\uffb0\026\uffb0\034\uffb0\035" +
    "\uffb0\041\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\057\uffb0\100\uffb0\101\uffb0\102" +
    "\uffb0\001\002\000\056\003\uffaf\006\uffaf\010\uffaf\012\uffaf" +
    "\017\uffaf\024\uffaf\026\uffaf\034\uffaf\035\uffaf\041\uffaf\044" +
    "\uffaf\045\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\057\uffaf\100\uffaf\101\uffaf\102\uffaf\001\002\000" +
    "\056\003\uffad\006\uffad\010\uffad\012\uffad\017\uffad\024\uffad" +
    "\026\uffad\034\uffad\035\uffad\041\uffad\044\uffad\045\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\057\uffad" +
    "\100\uffad\101\uffad\102\uffad\001\002\000\006\100\uffb9\101" +
    "\uffb9\001\002\000\016\003\uffbf\025\uffbf\040\uffbf\041\uffbf" +
    "\055\uffbf\056\uffbf\001\002\000\006\100\uffb8\101\uffb8\001" +
    "\002\000\040\020\106\021\113\027\107\030\121\031\117" +
    "\032\122\034\110\035\111\046\216\065\112\066\114\072" +
    "\120\073\105\075\116\076\115\001\002\000\010\004\221" +
    "\014\220\033\223\001\002\000\004\014\uffd2\001\002\000" +
    "\070\003\uffd5\004\uffd5\005\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\024\uffd5\026" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\041\uffd5\044\uffd5\045\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\057" +
    "\uffd5\102\uffd5\001\002\000\004\043\234\001\002\000\010" +
    "\004\221\014\uffd3\033\223\001\002\000\030\036\071\057" +
    "\046\067\076\070\075\073\067\077\077\102\102\103\066" +
    "\104\072\105\073\106\074\001\002\000\004\014\226\001" +
    "\002\000\010\004\uffd0\014\uffd0\033\uffd0\001\002\000\070" +
    "\003\uffd6\004\uffd6\005\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024\uffd6\026\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\041\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\057\uffd6" +
    "\102\uffd6\001\002\000\040\020\106\021\113\027\107\030" +
    "\121\031\117\032\122\034\110\035\111\043\230\065\112" +
    "\066\114\072\120\073\105\075\116\076\115\001\002\000" +
    "\052\003\056\004\uffce\014\uffce\017\062\024\065\026\031" +
    "\033\uffce\034\006\035\011\041\016\044\052\045\047\047" +
    "\041\050\044\051\032\052\042\053\043\054\057\057\046" +
    "\102\010\001\002\000\052\003\056\004\uffcf\014\uffcf\017" +
    "\062\024\065\026\031\033\uffcf\034\006\035\011\041\016" +
    "\044\052\045\047\047\041\050\044\051\032\052\042\053" +
    "\043\054\057\057\046\102\010\001\002\000\004\014\uffd4" +
    "\001\002\000\010\004\uffd1\014\uffd1\033\uffd1\001\002\000" +
    "\046\003\056\014\uffcc\017\062\024\065\026\031\034\006" +
    "\035\011\041\016\044\052\045\047\047\041\050\044\051" +
    "\032\052\042\053\043\054\057\057\046\102\010\001\002" +
    "\000\046\003\056\014\uffcd\017\062\024\065\026\031\034" +
    "\006\035\011\041\016\044\052\045\047\047\041\050\044" +
    "\051\032\052\042\053\043\054\057\057\046\102\010\001" +
    "\002\000\004\077\237\001\002\000\032\036\071\057\046" +
    "\067\076\070\075\073\067\077\077\100\242\102\102\103" +
    "\066\104\072\105\073\106\074\001\002\000\006\100\243" +
    "\101\244\001\002\000\042\020\106\021\113\027\107\030" +
    "\121\031\117\032\122\034\110\035\111\065\112\066\114" +
    "\072\120\073\105\075\116\076\115\100\uffb4\101\uffb4\001" +
    "\002\000\144\003\uffb6\004\uffb6\005\uffb6\007\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\065\uffb6\066\uffb6\072\uffb6\073\uffb6" +
    "\075\uffb6\076\uffb6\100\uffb6\101\uffb6\102\uffb6\001\002\000" +
    "\144\003\uffb7\004\uffb7\005\uffb7\007\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040" +
    "\uffb7\041\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\065\uffb7\066\uffb7\072\uffb7\073\uffb7\075\uffb7" +
    "\076\uffb7\100\uffb7\101\uffb7\102\uffb7\001\002\000\030\036" +
    "\071\057\046\067\076\070\075\073\067\077\077\102\102" +
    "\103\066\104\072\105\073\106\074\001\002\000\042\020" +
    "\106\021\113\027\107\030\121\031\117\032\122\034\110" +
    "\035\111\065\112\066\114\072\120\073\105\075\116\076" +
    "\115\100\uffb5\101\uffb5\001\002\000\040\020\106\021\113" +
    "\027\107\030\121\031\117\032\122\034\110\035\111\046" +
    "\247\065\112\066\114\072\120\073\105\075\116\076\115" +
    "\001\002\000\046\003\056\011\252\017\062\024\065\026" +
    "\031\034\006\035\011\041\016\044\052\045\047\047\041" +
    "\050\044\051\032\052\042\053\043\054\057\057\046\102" +
    "\010\001\002\000\046\003\056\011\253\017\062\024\065" +
    "\026\031\034\006\035\011\041\016\044\052\045\047\047" +
    "\041\050\044\051\032\052\042\053\043\054\057\057\046" +
    "\102\010\001\002\000\070\003\uffc9\004\uffc9\005\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\022\uffc9\024\uffc9\026\uffc9\033\uffc9\034\uffc9\035\uffc9\041" +
    "\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\057\uffc9\102\uffc9\001\002\000\070\003" +
    "\uffc4\004\uffc4\005\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\022\uffc4\024\uffc4\026\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\041\uffc4\044\uffc4\045\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\057\uffc4\102" +
    "\uffc4\001\002\000\070\003\uffc5\004\uffc5\005\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\022" +
    "\uffc5\024\uffc5\026\uffc5\033\uffc5\034\uffc5\035\uffc5\041\uffc5" +
    "\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\054\uffc5\057\uffc5\102\uffc5\001\002\000\120\003\uffed" +
    "\004\uffed\005\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\106\021\113\022\uffed\024\uffed" +
    "\026\uffed\027\107\030\121\031\117\032\122\033\uffed\034" +
    "\110\035\111\041\uffed\044\uffed\045\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\057\uffed\065\112\066" +
    "\114\072\120\073\105\075\116\076\115\102\uffed\001\002" +
    "\000\004\071\256\001\002\000\030\036\071\057\046\067" +
    "\076\070\075\073\067\077\077\102\102\103\066\104\072" +
    "\105\073\106\074\001\002\000\040\020\106\021\113\023" +
    "\260\027\107\030\121\031\117\032\122\034\110\035\111" +
    "\065\112\066\114\072\120\073\105\075\116\076\115\001" +
    "\002\000\030\036\071\057\046\067\076\070\075\073\067" +
    "\077\077\102\102\103\066\104\072\105\073\106\074\001" +
    "\002\000\042\007\262\020\106\021\113\027\107\030\121" +
    "\031\117\032\122\034\110\035\111\046\263\065\112\066" +
    "\114\072\120\073\105\075\116\076\115\001\002\000\030" +
    "\036\071\057\046\067\076\070\075\073\067\077\077\102" +
    "\102\103\066\104\072\105\073\106\074\001\002\000\046" +
    "\003\056\015\266\017\062\024\065\026\031\034\006\035" +
    "\011\041\016\044\052\045\047\047\041\050\044\051\032" +
    "\052\042\053\043\054\057\057\046\102\010\001\002\000" +
    "\070\003\uffca\004\uffca\005\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\022\uffca\024\uffca\026" +
    "\uffca\033\uffca\034\uffca\035\uffca\041\uffca\044\uffca\045\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\057" +
    "\uffca\102\uffca\001\002\000\046\003\056\015\267\017\062" +
    "\024\065\026\031\034\006\035\011\041\016\044\052\045" +
    "\047\047\041\050\044\051\032\052\042\053\043\054\057" +
    "\057\046\102\010\001\002\000\070\003\uffc6\004\uffc6\005" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\022\uffc6\024\uffc6\026\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\041\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\057\uffc6\102\uffc6\001\002\000" +
    "\070\003\uffc7\004\uffc7\005\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\022\uffc7\024\uffc7\026" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\041\uffc7\044\uffc7\045\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\057" +
    "\uffc7\102\uffc7\001\002\000\040\020\106\021\113\027\107" +
    "\030\121\031\117\032\122\034\110\035\111\046\271\065" +
    "\112\066\114\072\120\073\105\075\116\076\115\001\002" +
    "\000\046\003\056\015\266\017\062\024\065\026\031\034" +
    "\006\035\011\041\016\044\052\045\047\047\041\050\044" +
    "\051\032\052\042\053\043\054\057\057\046\102\010\001" +
    "\002\000\070\003\uffcb\004\uffcb\005\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\024" +
    "\uffcb\026\uffcb\033\uffcb\034\uffcb\035\uffcb\041\uffcb\044\uffcb" +
    "\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\057\uffcb\102\uffcb\001\002\000\016\003\uffbb\025\uffbb" +
    "\040\uffbb\041\uffbb\055\uffbb\056\uffbb\001\002\000\030\036" +
    "\071\057\046\067\076\070\075\073\067\077\077\102\102" +
    "\103\066\104\072\105\073\106\074\001\002\000\010\034" +
    "\006\035\011\102\010\001\002\000\010\042\uffe5\071\uffe5" +
    "\101\uffe5\001\002\000\120\003\uffe6\004\uffe6\005\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\106\021\113\022\uffe6\024\uffe6\026\uffe6\027\107\030" +
    "\121\031\117\032\122\033\uffe6\034\110\035\111\041\uffe6" +
    "\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\057\uffe6\065\112\066\114\072\120\073\105" +
    "\075\116\076\115\102\uffe6\001\002\000\030\036\071\057" +
    "\046\067\076\070\075\073\067\077\077\102\102\103\066" +
    "\104\072\105\073\106\074\001\002\000\120\003\uffc8\004" +
    "\uffc8\005\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\106\021\113\022\uffc8\024\uffc8\026" +
    "\uffc8\027\107\030\121\031\117\032\122\033\uffc8\034\110" +
    "\035\111\041\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\057\uffc8\065\112\066\114" +
    "\072\120\073\105\075\116\076\115\102\uffc8\001\002\000" +
    "\046\003\056\017\062\022\uffc3\024\065\026\031\034\006" +
    "\035\011\041\016\044\052\045\047\047\041\050\044\051" +
    "\032\052\042\053\043\054\057\057\046\102\010\001\002" +
    "\000\120\003\uffb2\004\uffb2\005\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\106\021\113" +
    "\022\uffb2\024\uffb2\026\uffb2\027\107\030\121\031\117\032" +
    "\122\033\uffb2\034\110\035\111\041\uffb2\044\uffb2\045\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057" +
    "\uffb2\065\112\066\114\072\120\073\105\075\116\076\115" +
    "\102\uffb2\001\002\000\016\003\uffe8\025\uffe8\040\uffe8\041" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\006\042\306\101\275" +
    "\001\002\000\014\060\207\061\211\062\205\063\206\064" +
    "\210\001\002\000\004\010\310\001\002\000\030\036\071" +
    "\057\046\067\076\070\075\073\067\077\077\102\102\103" +
    "\066\104\072\105\073\106\074\001\002\000\130\003\uffe7" +
    "\004\uffe7\005\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\106\021\113\022\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\107\030\121\031\117\032\122\033" +
    "\uffe7\034\110\035\111\040\uffe7\041\uffe7\044\uffe7\045\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\065\112\066\114\072\120\073\105" +
    "\075\116\076\115\102\uffe7\001\002\000\014\060\207\061" +
    "\211\062\205\063\206\064\210\001\002\000\050\003\056" +
    "\006\315\012\316\017\062\024\065\026\031\034\006\035" +
    "\011\041\016\044\052\045\047\047\041\050\044\051\032" +
    "\052\042\053\043\054\057\057\046\102\010\001\002\000" +
    "\046\003\056\012\324\017\062\024\065\026\031\034\006" +
    "\035\011\041\016\044\052\045\047\047\041\050\044\051" +
    "\032\052\042\053\043\054\057\057\046\102\010\001\002" +
    "\000\004\077\320\001\002\000\016\003\uffbc\025\uffbc\040" +
    "\uffbc\041\uffbc\055\uffbc\056\uffbc\001\002\000\016\003\uffc0" +
    "\025\uffc0\040\uffc0\041\uffc0\055\uffc0\056\uffc0\001\002\000" +
    "\010\034\006\035\011\102\010\001\002\000\006\100\322" +
    "\101\203\001\002\000\046\003\056\012\316\017\062\024" +
    "\065\026\031\034\006\035\011\041\016\044\052\045\047" +
    "\047\041\050\044\051\032\052\042\053\043\054\057\057" +
    "\046\102\010\001\002\000\016\003\uffc1\025\uffc1\040\uffc1" +
    "\041\uffc1\055\uffc1\056\uffc1\001\002\000\016\003\uffbd\025" +
    "\uffbd\040\uffbd\041\uffbd\055\uffbd\056\uffbd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\046\006\001\001\000\002\001\001\000\014\003\023" +
    "\014\021\015\014\017\016\020\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\311\001\001\000\002\001\001\000\006\021" +
    "\304\046\057\001\001\000\002\001\001\000\004\013\303" +
    "\001\001\000\004\046\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\021\015\025\017\016\020\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\036\013\062\016\054\017\053\021\034\022\047\023\044" +
    "\024\035\030\052\031\032\032\037\033\060\037\027\042" +
    "\033\046\057\001\001\000\002\001\001\000\014\007\302" +
    "\010\077\011\100\012\103\013\067\001\001\000\036\004" +
    "\301\013\062\016\054\017\053\021\034\022\047\023\044" +
    "\024\035\030\052\031\032\032\037\033\060\042\033\046" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\013\062\016\054\017" +
    "\053\021\034\022\165\023\044\024\035\030\052\031\032" +
    "\032\037\033\060\042\033\046\057\001\001\000\002\001" +
    "\001\000\004\046\254\001\001\000\014\007\253\010\077" +
    "\011\100\012\103\013\067\001\001\000\002\001\001\000" +
    "\014\007\245\010\077\011\100\012\103\013\067\001\001" +
    "\000\002\001\001\000\004\046\235\001\001\000\014\007" +
    "\214\010\077\011\100\012\103\013\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\144\010\077\011" +
    "\100\012\103\013\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\102" +
    "\010\077\011\100\012\103\013\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\143\010\077\011\100\012\103\013\067\001" +
    "\001\000\002\001\001\000\014\007\142\010\077\011\100" +
    "\012\103\013\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\140\010\077\011\100\012\103\013\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\137\010" +
    "\077\011\100\012\103\013\067\001\001\000\014\007\136" +
    "\010\077\011\100\012\103\013\067\001\001\000\014\007" +
    "\135\010\077\011\100\012\103\013\067\001\001\000\014" +
    "\007\134\010\077\011\100\012\103\013\067\001\001\000" +
    "\014\007\133\010\077\011\100\012\103\013\067\001\001" +
    "\000\014\007\132\010\077\011\100\012\103\013\067\001" +
    "\001\000\014\007\131\010\077\011\100\012\103\013\067" +
    "\001\001\000\014\007\130\010\077\011\100\012\103\013" +
    "\067\001\001\000\014\007\127\010\077\011\100\012\103" +
    "\013\067\001\001\000\014\007\126\010\077\011\100\012" +
    "\103\013\067\001\001\000\014\007\125\010\077\011\100" +
    "\012\103\013\067\001\001\000\014\007\124\010\077\011" +
    "\100\012\103\013\067\001\001\000\014\007\123\010\077" +
    "\011\100\012\103\013\067\001\001\000\014\007\122\010" +
    "\077\011\100\012\103\013\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\146\013\062" +
    "\016\054\017\053\021\034\022\047\023\044\024\035\030" +
    "\052\031\032\032\037\033\060\035\147\042\033\044\154" +
    "\045\151\046\057\001\001\000\034\013\062\016\054\017" +
    "\053\021\034\022\165\023\044\024\035\030\052\031\032" +
    "\032\037\033\060\042\033\046\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\163" +
    "\013\062\016\054\017\053\021\034\022\047\023\044\024" +
    "\035\030\052\031\032\032\037\033\060\035\162\042\033" +
    "\046\057\001\001\000\014\007\155\010\077\011\100\012" +
    "\103\013\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\146\013\062\016\054\017\053\021\034\022" +
    "\047\023\044\024\035\030\052\031\032\032\037\033\060" +
    "\035\157\042\033\044\161\045\160\046\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\013\062\016\054\017\053\021\034\022" +
    "\165\023\044\024\035\030\052\031\032\032\037\033\060" +
    "\042\033\046\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\171\010\077\011\100\012\103\013\067" +
    "\001\001\000\040\004\163\013\062\016\054\017\053\021" +
    "\034\022\047\023\044\024\035\030\052\031\032\032\037" +
    "\033\060\035\170\042\033\046\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\146\013\062\016\054" +
    "\017\053\021\034\022\047\023\044\024\035\030\052\031" +
    "\032\032\037\033\060\035\173\042\033\044\175\045\174" +
    "\046\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\200\046\177\001\001\000\004" +
    "\034\213\001\001\000\002\001\001\000\040\004\036\013" +
    "\062\016\054\017\053\021\034\022\047\023\044\024\035" +
    "\030\052\031\032\032\037\033\060\037\212\042\033\046" +
    "\057\001\001\000\004\046\203\001\001\000\004\034\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\223\026\221\027\224\043\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\232\043\231\001\001\000\014\007\226\010\077\011\100" +
    "\012\103\013\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\230" +
    "\013\062\016\054\017\053\021\034\022\047\023\044\024" +
    "\035\030\052\031\032\032\037\033\060\042\033\046\057" +
    "\001\001\000\034\013\062\016\054\017\053\021\034\022" +
    "\165\023\044\024\035\030\052\031\032\032\037\033\060" +
    "\042\033\046\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\234\013\062\016\054\017\053\021\034" +
    "\022\047\023\044\024\035\030\052\031\032\032\037\033" +
    "\060\042\033\046\057\001\001\000\034\013\062\016\054" +
    "\017\053\021\034\022\165\023\044\024\035\030\052\031" +
    "\032\032\037\033\060\042\033\046\057\001\001\000\002" +
    "\001\001\000\016\005\237\007\240\010\077\011\100\012" +
    "\103\013\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\244\010" +
    "\077\011\100\012\103\013\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\247\013\062\016\054\017" +
    "\053\021\034\022\047\023\044\024\035\030\052\031\032" +
    "\032\037\033\060\041\250\042\033\046\057\001\001\000" +
    "\034\013\062\016\054\017\053\021\034\022\165\023\044" +
    "\024\035\030\052\031\032\032\037\033\060\042\033\046" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\256\010\077\011\100\012\103\013\067\001\001\000\002" +
    "\001\001\000\014\007\260\010\077\011\100\012\103\013" +
    "\067\001\001\000\002\001\001\000\014\007\267\010\077" +
    "\011\100\012\103\013\067\001\001\000\040\004\264\013" +
    "\062\016\054\017\053\021\034\022\047\023\044\024\035" +
    "\030\052\031\032\032\037\033\060\040\263\042\033\046" +
    "\057\001\001\000\002\001\001\000\034\013\062\016\054" +
    "\017\053\021\034\022\165\023\044\024\035\030\052\031" +
    "\032\032\037\033\060\042\033\046\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\264\013\062\016\054\017\053\021\034\022\047\023\044" +
    "\024\035\030\052\031\032\032\037\033\060\040\271\042" +
    "\033\046\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\276\010\077\011\100\012\103\013\067\001" +
    "\001\000\004\046\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\300\010\077\011\100\012\103\013" +
    "\067\001\001\000\002\001\001\000\034\013\062\016\054" +
    "\017\053\021\034\022\165\023\044\024\035\030\052\031" +
    "\032\032\037\033\060\042\033\046\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\306\001\001\000\002\001\001\000\014\007\310\010\077" +
    "\011\100\012\103\013\067\001\001\000\002\001\001\000" +
    "\004\034\312\001\001\000\040\004\313\013\062\016\054" +
    "\017\053\021\034\022\047\023\044\024\035\030\052\031" +
    "\032\032\037\033\060\036\316\042\033\046\057\001\001" +
    "\000\034\013\062\016\054\017\053\021\034\022\165\023" +
    "\044\024\035\030\052\031\032\032\037\033\060\042\033" +
    "\046\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\320\046\177\001\001\000\002" +
    "\001\001\000\040\004\313\013\062\016\054\017\053\021" +
    "\034\022\047\023\044\024\035\030\052\031\032\032\037" +
    "\033\060\036\322\042\033\046\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String fileName;
    @SuppressWarnings("deprecation")
    public Parser(Scanner s) {
        super(s);
    }
    public void syntax_error(Symbol sym) {
        Outs.errors.add(new Error(sym.left, sym.right, TypeError.SYNTAX, "No se esperaba «" + sym.value + "»"));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        Outs.errors.add(new Error(sym.left, sym.right, TypeError.SYNTAX, "No se esperaba (0) «" + sym.value + "»"));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_begin IDS INSTSGLOBAL RW_end 
            {
              ArrayList<Instruction> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		fileName = fn; RESULT = ins;              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_begin IDS RW_end 
            {
              ArrayList<Instruction> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		fileName = fn; RESULT = new ArrayList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> insts = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		insts.add(inst); RESULT = insts;              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              ArrayList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(inst));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLID 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= DECLFUNC 
            {
              Instruction RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTGLOBAL ::= error 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Statement> RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> insts = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		insts.add(inst); RESULT = insts;              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Statement> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(inst));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLID 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= IDASIGN 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= IFSTRUCT 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= LOOPFOR 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= LOOPWHILE 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= LOOPDOWHILE 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement inst = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= CALLFUNC 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression inst = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= PRINT 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = inst;                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= RW_return EXP 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Return(rleft, rright, exp);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= RW_back 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Return(rleft, rright, null);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= RW_continue 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Continue(instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= RW_break 
            {
              Statement RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Break(instleft, instright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CALLMAINFUNC ::= RW_start CALLFUNC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression fnc = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MainMethod(sleft, sright, fnc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLID ::= RW_insert LISTID RW_as TYPE RW_equ EXP 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitVar(ileft, iright, ids, exp, t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDASIGN ::= LISTID TK_prompt EXP 
            {
              Instruction RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(idsleft, idsright, ids, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGN",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTID ::= LISTID TK_comma IDS 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ls; RESULT.add(id);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTID ::= IDS 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFSTRUCT ::= RW_if EXP RW_then ELSEIFSTRUCT 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIfStruct b1 = (ElseIfStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, new Block(b1left, b1right, b1.instructions), b1._if);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFSTRUCT ::= RW_if EXP RW_then ELSESTRUCT 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIfStruct b1 = (ElseIfStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, new Block(b1left, b1right, b1.instructions), b1._if);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSTRUCT ::= RW_if EXP RW_then INSTIF 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(rleft, rright, cn, b1, null);                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSEIFSTRUCT ::= INSTRUCTIONS RW_elseif EXP RW_then ELSEIFSTRUCT 
            {
              ElseIfStruct RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> b1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIfStruct b2 = (ElseIfStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(b1, new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSEIFSTRUCT ::= INSTRUCTIONS RW_elseif EXP RW_then ELSESTRUCT 
            {
              ElseIfStruct RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> b1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIfStruct b2 = (ElseIfStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(b1, new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSEIFSTRUCT ::= INSTRUCTIONS RW_elseif EXP RW_then INSTIF 
            {
              ElseIfStruct RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> b1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(b1, new If(rleft, rright, cn, b2, null));                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSEIFSTRUCT ::= RW_elseif EXP RW_then ELSEIFSTRUCT 
            {
              ElseIfStruct RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIfStruct b2 = (ElseIfStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(new ArrayList<>(), new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSEIFSTRUCT ::= RW_elseif EXP RW_then ELSESTRUCT 
            {
              ElseIfStruct RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseIfStruct b2 = (ElseIfStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(new ArrayList<>(), new If(rleft, rright, cn, new Block(b2left, b2right, b2.instructions), b2._if));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSEIFSTRUCT ::= RW_elseif EXP RW_then INSTIF 
            {
              ElseIfStruct RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cn = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(new ArrayList<>(), new If(rleft, rright, cn, b2, null));                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFSTRUCT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSESTRUCT ::= INSTRUCTIONS RW_else INSTIF 
            {
              ElseIfStruct RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Statement> ins = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block insif = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(ins, insif);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSESTRUCT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSESTRUCT ::= RW_else INSTIF 
            {
              ElseIfStruct RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block insif = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ElseIfStruct(new ArrayList<>(), insif);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSESTRUCT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTIF ::= INSTRUCTIONS RW_endif 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTIF ::= RW_endif 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCHSTRUCT ::= RW_switch EXP RW_do CASESDEFAULT RW_endswitch 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(sleft, sright, exp, (ArrayList<Case>) b[0], (Block) b[1]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCHSTRUCT ::= RW_switch EXP RW_do RW_endswitch 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Switch(sleft, sright, exp, null, null);                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASESDEFAULT ::= CASES DEFAULT 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> c = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASESDEFAULT ::= CASES 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> c = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASESDEFAULT ::= DEFAULT 
            {
              Object[] RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {null, d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASES ::= CASES CASE 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(c);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASES ::= CASE 
            {
              ArrayList<Statement> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(c));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASE ::= RW_case EXP RW_then INSTRUCTIONS 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> b = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(cleft, cright, exp, new Block(bleft, bright, b));                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASE ::= RW_case EXP RW_then 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Case(cleft, cright, exp, new Block(cleft, cright, new ArrayList<>()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEFAULT ::= RW_else RW_then INSTRUCTIONS 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> b = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(dleft, dright, b);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEFAULT ::= RW_else RW_then 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(dleft, dright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOOPFOR ::= RW_for IDS TK_prompt EXP RW_to EXP RW_incr EXP RW_do INSTFOR 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression v2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression v3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(fleft, fright, id, v1, v2, v3,   b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LOOPFOR ::= RW_for IDS TK_prompt EXP RW_to EXP RW_do INSTFOR 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression v2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(fleft, fright, id, v1, v2, null, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOOPWHILE ::= RW_while EXP RW_do INSTWHILE 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(wleft, wright, exp, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOOPDOWHILE ::= INSTREPEAT RW_until EXP 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DoWhile(dleft, dright, exp, d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTFOR ::= INSTRUCTIONS RW_endfor 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTFOR ::= RW_endfor 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTWHILE ::= INSTRUCTIONS RW_endwhile 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTWHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTWHILE ::= RW_endwhile 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTWHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTREPEAT ::= RW_repeat INSTRUCTIONS 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTREPEAT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTREPEAT ::= RW_repeat 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTREPEAT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLFUNC ::= RW_func IDS TYPE RW_params TK_lpar LISTPARAMS TK_rpar INSTFUNC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, l,                 b ,t);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLFUNC ::= RW_func IDS TYPE INSTFUNC 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, new ArrayList<>(), b ,t);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLFUNC ::= RW_meth IDS RW_params TK_lpar LISTPARAMS TK_rpar INSTMETH 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, l,                 b ,Type.NULL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLFUNC ::= RW_meth IDS INSTMETH 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Function(sleft, sright, id, new ArrayList<>(), b ,Type.NULL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLFUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTFUNC ::= INSTRUCTIONS RW_endfunc 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFUNC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTFUNC ::= RW_endfunc 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTFUNC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTMETH ::= INSTRUCTIONS RW_endmeth 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(lleft, lright, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTMETH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTMETH ::= RW_endmeth 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Block(lleft, lright, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTMETH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTPARAMS ::= LISTPARAMS TK_comma IDS TYPE 
            {
              ArrayList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(new Parameter(idleft, idright, id, t));                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTPARAMS ::= IDS TYPE 
            {
              ArrayList<Parameter> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(new Parameter(idleft, idright, id, t)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CALLFUNC ::= RW_exec IDS TK_lpar LISTARGS TK_rpar 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CallFunction(exleft, exright, id, l);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CALLFUNC ::= RW_exec IDS TK_lpar TK_rpar 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallFunction(exleft, exright, id, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLFUNC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              ArrayList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expression> l = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(e1);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTARGS ::= EXP 
            {
              ArrayList<Expression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(e1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRINT ::= RW_println EXP 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Print(pleft, pright, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRINT ::= RW_print EXP 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Print(pleft, pright, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPE ::= RW_str 
            {
              Type RESULT =null;
		RESULT = Type.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TYPE ::= RW_int 
            {
              Type RESULT =null;
		RESULT = Type.INT;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TYPE ::= RW_char 
            {
              Type RESULT =null;
		RESULT = Type.CHAR;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TYPE ::= RW_bool 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TYPE ::= RW_double 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IDS ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IDS ::= RW_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IDS ::= RW_and 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= ARITHMETICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= RELATIONALS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= LOGICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= CALLFUNC 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= TK_id 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AccessVar(idleft, idright, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= TK_str 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= TK_char 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.CHAR);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= TK_int 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.INT);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= TK_double 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= RW_true 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= RW_false 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Primitive(pleft, pright, p, Type.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= TK_lpar EXP TK_rpar 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		exp.isGrp = true; RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARITHMETICS ::= EXP TK_div EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARITHMETICS ::= EXP RW_pow EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARITHMETICS ::= EXP RW_mod EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARITHMETICS ::= TK_minus EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetic(sleft, sright, null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RELATIONALS ::= EXP RW_equequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RELATIONALS ::= EXP RW_notequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RELATIONALS ::= EXP RW_lessequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RELATIONALS ::= EXP RW_greaterequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RELATIONALS ::= EXP RW_less EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RELATIONALS ::= EXP RW_greater EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relational(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LOGICS ::= EXP RW_and EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LOGICS ::= EXP RW_or EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(e1left, e1right, e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LOGICS ::= RW_not EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logic(sleft, sright, null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
